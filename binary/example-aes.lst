
example-aes.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 f9 07 00 08 f7 07 00 08 f5 07 00 08     . . ............
	...
 800002c:	f7 07 00 08 00 00 00 00 00 00 00 00 f7 07 00 08     ................
 800003c:	f7 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 800004c:	f5 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 800005c:	f5 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 800006c:	f5 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 800007c:	f5 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 800008c:	f5 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 800009c:	f5 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 80000ac:	f5 07 00 08 f5 07 00 08 f5 07 00 08 f5 07 00 08     ................
 80000bc:	f5 07 00 08                                         ....

080000c0 <send_aes_data>:

uint8_t aesKey[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
uint8_t aesData[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};

void send_aes_data(void)
{
 80000c0:	b570      	push	{r4, r5, r6, lr}
 80000c2:	4c05      	ldr	r4, [pc, #20]	; (80000d8 <send_aes_data+0x18>)
 80000c4:	0025      	movs	r5, r4
 80000c6:	3510      	adds	r5, #16
	for(int i = 0; i < 16; i++)
	{
		send_hex_byte(aesData[i]);
 80000c8:	7820      	ldrb	r0, [r4, #0]
 80000ca:	3401      	adds	r4, #1
 80000cc:	f000 f936 	bl	800033c <send_hex_byte>
	for(int i = 0; i < 16; i++)
 80000d0:	42ac      	cmp	r4, r5
 80000d2:	d1f9      	bne.n	80000c8 <send_aes_data+0x8>
	}
}
 80000d4:	bd70      	pop	{r4, r5, r6, pc}
 80000d6:	46c0      	nop			; (mov r8, r8)
 80000d8:	20000000 	.word	0x20000000

080000dc <aesexperiment>:

void aesexperiment(void)
{
 80000dc:	b530      	push	{r4, r5, lr}
 80000de:	b0b1      	sub	sp, #196	; 0xc4
	struct AES_ctx ctx = {{0},{0}};
 80000e0:	22c0      	movs	r2, #192	; 0xc0
 80000e2:	4910      	ldr	r1, [pc, #64]	; (8000124 <aesexperiment+0x48>)
 80000e4:	4668      	mov	r0, sp
 80000e6:	f001 fa3b 	bl	8001560 <memcpy>
	AES_init_ctx(&ctx, aesKey);
 80000ea:	4c0f      	ldr	r4, [pc, #60]	; (8000128 <aesexperiment+0x4c>)
 80000ec:	4668      	mov	r0, sp
 80000ee:	0025      	movs	r5, r4
 80000f0:	3510      	adds	r5, #16
 80000f2:	0029      	movs	r1, r5
 80000f4:	f001 f97e 	bl	80013f4 <AES_init_ctx>
	gpio_set(GPIOC, GPIO9);
 80000f8:	2180      	movs	r1, #128	; 0x80
 80000fa:	480c      	ldr	r0, [pc, #48]	; (800012c <aesexperiment+0x50>)
 80000fc:	0089      	lsls	r1, r1, #2
 80000fe:	f000 f961 	bl	80003c4 <gpio_set>
	AES_ECB_encrypt(&ctx, aesData);
 8000102:	0021      	movs	r1, r4
 8000104:	4668      	mov	r0, sp
 8000106:	f001 f98b 	bl	8001420 <AES_ECB_encrypt>
	gpio_clear(GPIOC, GPIO9);
 800010a:	2180      	movs	r1, #128	; 0x80
 800010c:	4807      	ldr	r0, [pc, #28]	; (800012c <aesexperiment+0x50>)
 800010e:	0089      	lsls	r1, r1, #2
 8000110:	f000 f95a 	bl	80003c8 <gpio_clear>
		send_hex_byte(aesData[i]);
 8000114:	7820      	ldrb	r0, [r4, #0]
 8000116:	3401      	adds	r4, #1
 8000118:	f000 f910 	bl	800033c <send_hex_byte>
	for(int i = 0; i < 16; i++)
 800011c:	42a5      	cmp	r5, r4
 800011e:	d1f9      	bne.n	8000114 <aesexperiment+0x38>
	send_aes_data();
}
 8000120:	b031      	add	sp, #196	; 0xc4
 8000122:	bd30      	pop	{r4, r5, pc}
 8000124:	0800178c 	.word	0x0800178c
 8000128:	20000000 	.word	0x20000000
 800012c:	48000800 	.word	0x48000800

08000130 <main>:

int main(void)
{
 8000130:	b510      	push	{r4, lr}
	
	//Enable gpio clock for led PC9 and PC8
	rcc_periph_clock_enable(RCC_GPIOC);
 8000132:	481b      	ldr	r0, [pc, #108]	; (80001a0 <main+0x70>)
 8000134:	f000 f9dc 	bl	80004f0 <rcc_periph_clock_enable>

	//Set mode for PC9 and PC8
	gpio_mode_setup(GPIOC, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO8 | GPIO9);
 8000138:	23c0      	movs	r3, #192	; 0xc0
 800013a:	2200      	movs	r2, #0
 800013c:	009b      	lsls	r3, r3, #2
 800013e:	2101      	movs	r1, #1
 8000140:	4818      	ldr	r0, [pc, #96]	; (80001a4 <main+0x74>)
 8000142:	f000 f95d 	bl	8000400 <gpio_mode_setup>
	gpio_clear(GPIOC, GPIO8 | GPIO9);
 8000146:	21c0      	movs	r1, #192	; 0xc0
 8000148:	4816      	ldr	r0, [pc, #88]	; (80001a4 <main+0x74>)
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	f000 f93c 	bl	80003c8 <gpio_clear>
	
	usart1_init();
 8000150:	f000 f88a 	bl	8000268 <usart1_init>

	usart1_send_string("Initialise\r");
 8000154:	4814      	ldr	r0, [pc, #80]	; (80001a8 <main+0x78>)
 8000156:	f000 f8e5 	bl	8000324 <usart1_send_string>
	usart1_send_string("Test AES.....");
 800015a:	4814      	ldr	r0, [pc, #80]	; (80001ac <main+0x7c>)
 800015c:	f000 f8e2 	bl	8000324 <usart1_send_string>
	int failed = 0;
	failed = aesTest();
 8000160:	f000 f82e 	bl	80001c0 <aesTest>
	if(failed != 0)
 8000164:	2800      	cmp	r0, #0
 8000166:	d004      	beq.n	8000172 <main+0x42>
	{
		usart1_send_string("failed\r");
 8000168:	4811      	ldr	r0, [pc, #68]	; (80001b0 <main+0x80>)
 800016a:	f000 f8db 	bl	8000324 <usart1_send_string>
		while(1)
		{
			__asm__("nop");
 800016e:	46c0      	nop			; (mov r8, r8)
		while(1)
 8000170:	e7fd      	b.n	800016e <main+0x3e>
		}
	}
	usart1_send_string("success\r");
 8000172:	4810      	ldr	r0, [pc, #64]	; (80001b4 <main+0x84>)
 8000174:	f000 f8d6 	bl	8000324 <usart1_send_string>
	gpio_set(GPIOC, GPIO8);
 8000178:	2180      	movs	r1, #128	; 0x80
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <main+0x74>)
 800017c:	0049      	lsls	r1, r1, #1
 800017e:	f000 f921 	bl	80003c4 <gpio_set>
	usart1_send_string("Start experiment\r");
 8000182:	480d      	ldr	r0, [pc, #52]	; (80001b8 <main+0x88>)
 8000184:	f000 f8ce 	bl	8000324 <usart1_send_string>
	aesexperiment();
 8000188:	f7ff ffa8 	bl	80000dc <aesexperiment>
	usart1_send_string("Experiment done\r");
 800018c:	480b      	ldr	r0, [pc, #44]	; (80001bc <main+0x8c>)
 800018e:	f000 f8c9 	bl	8000324 <usart1_send_string>
	while(1)
	{
		gpio_toggle(GPIOC, GPIO8);
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	4803      	ldr	r0, [pc, #12]	; (80001a4 <main+0x74>)
 8000196:	0049      	lsls	r1, r1, #1
 8000198:	f000 f91c 	bl	80003d4 <gpio_toggle>
	while(1)
 800019c:	e7f9      	b.n	8000192 <main+0x62>
 800019e:	46c0      	nop			; (mov r8, r8)
 80001a0:	00000293 	.word	0x00000293
 80001a4:	48000800 	.word	0x48000800
 80001a8:	08001734 	.word	0x08001734
 80001ac:	08001740 	.word	0x08001740
 80001b0:	08001750 	.word	0x08001750
 80001b4:	08001758 	.word	0x08001758
 80001b8:	08001764 	.word	0x08001764
 80001bc:	08001778 	.word	0x08001778

080001c0 <aesTest>:
#include "aesTest.h"

//Test if aes implementation behaves as expected (aka no corruption in code)
//Test vectors are from NIST SP 800-38A
int aesTest(void)
{
 80001c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001c2:	b0d5      	sub	sp, #340	; 0x154
	struct AES_ctx ctx = {{0},{0}};
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001c4:	466e      	mov	r6, sp
	struct AES_ctx ctx = {{0},{0}};
 80001c6:	491c      	ldr	r1, [pc, #112]	; (8000238 <aesTest+0x78>)
 80001c8:	22c0      	movs	r2, #192	; 0xc0
 80001ca:	a824      	add	r0, sp, #144	; 0x90
 80001cc:	f001 f9c8 	bl	8001560 <memcpy>
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001d0:	0032      	movs	r2, r6
 80001d2:	4b1a      	ldr	r3, [pc, #104]	; (800023c <aesTest+0x7c>)
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
                                  			{0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51},
                                  			{0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef},
                                  			{0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10}
                                		};
	uint8_t aestestoutputvector[][16] = 	{	{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97},
 80001d4:	af14      	add	r7, sp, #80	; 0x50
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001d6:	cb13      	ldmia	r3!, {r0, r1, r4}
 80001d8:	c213      	stmia	r2!, {r0, r1, r4}
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
 80001da:	4c19      	ldr	r4, [pc, #100]	; (8000240 <aesTest+0x80>)
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001dc:	681b      	ldr	r3, [r3, #0]
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
 80001de:	0021      	movs	r1, r4
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001e0:	6013      	str	r3, [r2, #0]
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
 80001e2:	a804      	add	r0, sp, #16
 80001e4:	2240      	movs	r2, #64	; 0x40
 80001e6:	f001 f9bb 	bl	8001560 <memcpy>
	uint8_t aestestoutputvector[][16] = 	{	{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97},
 80001ea:	0021      	movs	r1, r4
 80001ec:	2240      	movs	r2, #64	; 0x40
 80001ee:	0038      	movs	r0, r7
 80001f0:	3140      	adds	r1, #64	; 0x40
 80001f2:	f001 f9b5 	bl	8001560 <memcpy>
                                        		{0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a, 0x96, 0xfd, 0xba, 0xaf},
							{0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b, 0x00, 0xe3, 0xed, 0x03, 0x06, 0x88},
                                        		{0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4}
                                   		};

	for( unsigned int i = 0; i < sizeof(aestestinputvector)/sizeof(aestestinputvector[0]); i++)
 80001f6:	003d      	movs	r5, r7
 80001f8:	ac04      	add	r4, sp, #16
	{
		AES_init_ctx(&ctx, aestestKey);
 80001fa:	0031      	movs	r1, r6
 80001fc:	a824      	add	r0, sp, #144	; 0x90
 80001fe:	f001 f8f9 	bl	80013f4 <AES_init_ctx>
		AES_ECB_encrypt(&ctx, aestestinputvector[i]);
 8000202:	0021      	movs	r1, r4
 8000204:	a824      	add	r0, sp, #144	; 0x90
 8000206:	f001 f90b 	bl	8001420 <AES_ECB_encrypt>
 800020a:	2200      	movs	r2, #0
		uint32_t failed = 0;
 800020c:	2100      	movs	r1, #0
		for(uint8_t j = 0; j < 16; j++)
		{
			if(aestestinputvector[i][j] != aestestoutputvector[i][j])
 800020e:	5ca8      	ldrb	r0, [r5, r2]
 8000210:	5ca3      	ldrb	r3, [r4, r2]
 8000212:	3201      	adds	r2, #1
			{
				failed++;
 8000214:	1a1b      	subs	r3, r3, r0
 8000216:	1e58      	subs	r0, r3, #1
 8000218:	4183      	sbcs	r3, r0
 800021a:	18c9      	adds	r1, r1, r3
		for(uint8_t j = 0; j < 16; j++)
 800021c:	2a10      	cmp	r2, #16
 800021e:	d1f6      	bne.n	800020e <aesTest+0x4e>
			}
		}
		if(failed != 0)
 8000220:	2900      	cmp	r1, #0
 8000222:	d106      	bne.n	8000232 <aesTest+0x72>
	for( unsigned int i = 0; i < sizeof(aestestinputvector)/sizeof(aestestinputvector[0]); i++)
 8000224:	3410      	adds	r4, #16
 8000226:	3510      	adds	r5, #16
 8000228:	42a7      	cmp	r7, r4
 800022a:	d1e6      	bne.n	80001fa <aesTest+0x3a>
		{
			return -1;
		}
	}

	return 0;
 800022c:	2000      	movs	r0, #0
	
}
 800022e:	b055      	add	sp, #340	; 0x154
 8000230:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -1;
 8000232:	2001      	movs	r0, #1
 8000234:	4240      	negs	r0, r0
 8000236:	e7fa      	b.n	800022e <aesTest+0x6e>
 8000238:	080018e0 	.word	0x080018e0
 800023c:	0800184c 	.word	0x0800184c
 8000240:	08001860 	.word	0x08001860

08000244 <usart1_gpio_configure>:
void usart1_enable(void);

void usart1_send_char(char c);

void usart1_gpio_configure(void)
{
 8000244:	b570      	push	{r4, r5, r6, lr}
	/*Configure gpio*/
	gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO9);
 8000246:	2580      	movs	r5, #128	; 0x80
 8000248:	2490      	movs	r4, #144	; 0x90
 800024a:	00ad      	lsls	r5, r5, #2
 800024c:	05e4      	lsls	r4, r4, #23
 800024e:	002b      	movs	r3, r5
 8000250:	0020      	movs	r0, r4
 8000252:	2200      	movs	r2, #0
 8000254:	2102      	movs	r1, #2
 8000256:	f000 f8d3 	bl	8000400 <gpio_mode_setup>
	gpio_set_af(GPIOA, GPIO_AF1, GPIO9);
 800025a:	002a      	movs	r2, r5
 800025c:	2101      	movs	r1, #1
 800025e:	0020      	movs	r0, r4
 8000260:	f000 f90c 	bl	800047c <gpio_set_af>
}
 8000264:	bd70      	pop	{r4, r5, r6, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <usart1_init>:

void usart1_init(void)
{
 8000268:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USART1);
 800026a:	4813      	ldr	r0, [pc, #76]	; (80002b8 <usart1_init+0x50>)
 800026c:	f000 f940 	bl	80004f0 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOA);
 8000270:	4812      	ldr	r0, [pc, #72]	; (80002bc <usart1_init+0x54>)
 8000272:	f000 f93d 	bl	80004f0 <rcc_periph_clock_enable>
	
	usart_set_baudrate(USART1, 115200);
 8000276:	21e1      	movs	r1, #225	; 0xe1
 8000278:	4c11      	ldr	r4, [pc, #68]	; (80002c0 <usart1_init+0x58>)
 800027a:	0249      	lsls	r1, r1, #9
 800027c:	0020      	movs	r0, r4
 800027e:	f000 f9af 	bl	80005e0 <usart_set_baudrate>
	usart_set_databits(USART1, 8);
 8000282:	0020      	movs	r0, r4
 8000284:	2108      	movs	r1, #8
 8000286:	f000 f9b7 	bl	80005f8 <usart_set_databits>
	usart_set_stopbits(USART1, USART_CR2_STOPBITS_1);
 800028a:	0020      	movs	r0, r4
 800028c:	2100      	movs	r1, #0
 800028e:	f000 f9c1 	bl	8000614 <usart_set_stopbits>
	usart_set_mode(USART1, USART_MODE_TX);
 8000292:	0020      	movs	r0, r4
 8000294:	2108      	movs	r1, #8
 8000296:	f000 f9cd 	bl	8000634 <usart_set_mode>
	usart_set_parity(USART1, USART_PARITY_NONE);
 800029a:	0020      	movs	r0, r4
 800029c:	2100      	movs	r1, #0
 800029e:	f000 f9c1 	bl	8000624 <usart_set_parity>
	usart_set_flow_control(USART1, USART_FLOWCONTROL_NONE);
 80002a2:	2100      	movs	r1, #0
 80002a4:	0020      	movs	r0, r4
 80002a6:	f000 f9cb 	bl	8000640 <usart_set_flow_control>
	usart1_enable();
}

void usart1_enable(void)
{
	usart1_gpio_configure();
 80002aa:	f7ff ffcb 	bl	8000244 <usart1_gpio_configure>
	usart_enable(USART1);
 80002ae:	0020      	movs	r0, r4
 80002b0:	f000 f9ce 	bl	8000650 <usart_enable>
}
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	0000030e 	.word	0x0000030e
 80002bc:	00000291 	.word	0x00000291
 80002c0:	40013800 	.word	0x40013800

080002c4 <usart1_enable>:
{
 80002c4:	b510      	push	{r4, lr}
	usart1_gpio_configure();
 80002c6:	f7ff ffbd 	bl	8000244 <usart1_gpio_configure>
	usart_enable(USART1);
 80002ca:	4802      	ldr	r0, [pc, #8]	; (80002d4 <usart1_enable+0x10>)
 80002cc:	f000 f9c0 	bl	8000650 <usart_enable>
}
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	40013800 	.word	0x40013800

080002d8 <usart1_send_char>:

void usart1_send_char(char c)
{
 80002d8:	b510      	push	{r4, lr}
	usart_send_blocking(USART1, c);
 80002da:	0001      	movs	r1, r0
 80002dc:	4801      	ldr	r0, [pc, #4]	; (80002e4 <usart1_send_char+0xc>)
 80002de:	f000 f9c1 	bl	8000664 <usart_send_blocking>
}
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	40013800 	.word	0x40013800

080002e8 <usart1_send_string_len>:

void usart1_send_string_len(char *s, unsigned int len)
{
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	0004      	movs	r4, r0
	for(unsigned int i = 0; i < len; i++)
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d015      	beq.n	800031c <usart1_send_string_len+0x34>
 80002f0:	1845      	adds	r5, r0, r1
 80002f2:	e002      	b.n	80002fa <usart1_send_string_len+0x12>
		usart1_send_char(*s);
		if(*s == '\r')
		{
			usart1_send_char('\n');
		}
		s++;
 80002f4:	3401      	adds	r4, #1
	for(unsigned int i = 0; i < len; i++)
 80002f6:	42ac      	cmp	r4, r5
 80002f8:	d010      	beq.n	800031c <usart1_send_string_len+0x34>
		if(*s == 0)
 80002fa:	7821      	ldrb	r1, [r4, #0]
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d00d      	beq.n	800031c <usart1_send_string_len+0x34>
	usart_send_blocking(USART1, c);
 8000300:	4807      	ldr	r0, [pc, #28]	; (8000320 <usart1_send_string_len+0x38>)
 8000302:	b289      	uxth	r1, r1
 8000304:	f000 f9ae 	bl	8000664 <usart_send_blocking>
		if(*s == '\r')
 8000308:	7823      	ldrb	r3, [r4, #0]
 800030a:	2b0d      	cmp	r3, #13
 800030c:	d1f2      	bne.n	80002f4 <usart1_send_string_len+0xc>
	usart_send_blocking(USART1, c);
 800030e:	210a      	movs	r1, #10
 8000310:	4803      	ldr	r0, [pc, #12]	; (8000320 <usart1_send_string_len+0x38>)
		s++;
 8000312:	3401      	adds	r4, #1
	usart_send_blocking(USART1, c);
 8000314:	f000 f9a6 	bl	8000664 <usart_send_blocking>
	for(unsigned int i = 0; i < len; i++)
 8000318:	42ac      	cmp	r4, r5
 800031a:	d1ee      	bne.n	80002fa <usart1_send_string_len+0x12>
	}
}
 800031c:	bd70      	pop	{r4, r5, r6, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	40013800 	.word	0x40013800

08000324 <usart1_send_string>:
void usart1_send_string(char *s)
{
	unsigned int len = 0;
	char *s_inc = s;
	while(*s_inc != '\0')
 8000324:	7803      	ldrb	r3, [r0, #0]
	unsigned int len = 0;
 8000326:	2100      	movs	r1, #0
{
 8000328:	b510      	push	{r4, lr}
	while(*s_inc != '\0')
 800032a:	2b00      	cmp	r3, #0
 800032c:	d003      	beq.n	8000336 <usart1_send_string+0x12>
	{
		len++;
 800032e:	3101      	adds	r1, #1
	while(*s_inc != '\0')
 8000330:	5c43      	ldrb	r3, [r0, r1]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d1fb      	bne.n	800032e <usart1_send_string+0xa>
		s_inc++;
	}
	usart1_send_string_len(s, len);
 8000336:	f7ff ffd7 	bl	80002e8 <usart1_send_string_len>
}
 800033a:	bd10      	pop	{r4, pc}

0800033c <send_hex_byte>:

void send_hex_byte(uint8_t c)
{
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	b086      	sub	sp, #24
	char lookup[]="0123456789ABCDEF";
 8000340:	ac01      	add	r4, sp, #4
 8000342:	0022      	movs	r2, r4
{
 8000344:	0005      	movs	r5, r0
	char lookup[]="0123456789ABCDEF";
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <send_hex_byte+0x34>)
 8000348:	cb43      	ldmia	r3!, {r0, r1, r6}
 800034a:	c243      	stmia	r2!, {r0, r1, r6}
 800034c:	6819      	ldr	r1, [r3, #0]
	usart_send_blocking(USART1, c);
 800034e:	4e09      	ldr	r6, [pc, #36]	; (8000374 <send_hex_byte+0x38>)
	char lookup[]="0123456789ABCDEF";
 8000350:	6011      	str	r1, [r2, #0]
 8000352:	791b      	ldrb	r3, [r3, #4]
	usart_send_blocking(USART1, c);
 8000354:	0030      	movs	r0, r6
	char lookup[]="0123456789ABCDEF";
 8000356:	7113      	strb	r3, [r2, #4]
	uint8_t c_high = (c & 0xF0) >> 4;
	c = c & 0xF;
	usart1_send_char(lookup[c_high]);
 8000358:	092b      	lsrs	r3, r5, #4
	usart_send_blocking(USART1, c);
 800035a:	5ce1      	ldrb	r1, [r4, r3]
 800035c:	f000 f982 	bl	8000664 <usart_send_blocking>
	usart1_send_char(lookup[c]);
 8000360:	200f      	movs	r0, #15
 8000362:	4005      	ands	r5, r0
	usart_send_blocking(USART1, c);
 8000364:	5d61      	ldrb	r1, [r4, r5]
 8000366:	0030      	movs	r0, r6
 8000368:	f000 f97c 	bl	8000664 <usart_send_blocking>
}
 800036c:	b006      	add	sp, #24
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	080019a0 	.word	0x080019a0
 8000374:	40013800 	.word	0x40013800

08000378 <send_hex>:

void send_hex(uint32_t val)
{
 8000378:	b510      	push	{r4, lr}
 800037a:	2378      	movs	r3, #120	; 0x78
 800037c:	0004      	movs	r4, r0
	unsigned int len = 0;
 800037e:	2100      	movs	r1, #0
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <send_hex+0x40>)
 8000382:	e000      	b.n	8000386 <send_hex+0xe>
 8000384:	5c53      	ldrb	r3, [r2, r1]
		len++;
 8000386:	3101      	adds	r1, #1
	while(*s_inc != '\0')
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1fb      	bne.n	8000384 <send_hex+0xc>
	usart1_send_string_len(s, len);
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <send_hex+0x44>)
 800038e:	f7ff ffab 	bl	80002e8 <usart1_send_string_len>
	usart1_send_string("0x");
	for(int i = 0; i < 4; i++)
	{
		send_hex_byte((char)(val >> i*8) & 0xFF );
 8000392:	b2e0      	uxtb	r0, r4
 8000394:	f7ff ffd2 	bl	800033c <send_hex_byte>
 8000398:	0a20      	lsrs	r0, r4, #8
 800039a:	b2c0      	uxtb	r0, r0
 800039c:	f7ff ffce 	bl	800033c <send_hex_byte>
 80003a0:	0c20      	lsrs	r0, r4, #16
 80003a2:	b2c0      	uxtb	r0, r0
 80003a4:	f7ff ffca 	bl	800033c <send_hex_byte>
 80003a8:	0e20      	lsrs	r0, r4, #24
 80003aa:	f7ff ffc7 	bl	800033c <send_hex_byte>
	usart1_send_string_len(s, len);
 80003ae:	2101      	movs	r1, #1
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <send_hex+0x48>)
 80003b2:	f7ff ff99 	bl	80002e8 <usart1_send_string_len>
	}
	usart1_send_string("\r");
}
 80003b6:	bd10      	pop	{r4, pc}
 80003b8:	080019b5 	.word	0x080019b5
 80003bc:	080019b4 	.word	0x080019b4
 80003c0:	08001774 	.word	0x08001774

080003c4 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80003c4:	6181      	str	r1, [r0, #24]
}
 80003c6:	4770      	bx	lr

080003c8 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80003c8:	0409      	lsls	r1, r1, #16
 80003ca:	6181      	str	r1, [r0, #24]
}
 80003cc:	4770      	bx	lr

080003ce <gpio_get>:
@param[in] gpioport Unsigned int32. Port identifier @ref gpio_port_id
@return Unsigned int16. The value held in the specified GPIO port.
*/
uint16_t gpio_port_read(uint32_t gpioport)
{
	return (uint16_t)GPIO_IDR(gpioport);
 80003ce:	6900      	ldr	r0, [r0, #16]
	return gpio_port_read(gpioport) & gpios;
 80003d0:	4008      	ands	r0, r1
}
 80003d2:	4770      	bx	lr

080003d4 <gpio_toggle>:
	uint32_t port = GPIO_ODR(gpioport);
 80003d4:	6942      	ldr	r2, [r0, #20]
	GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);
 80003d6:	0013      	movs	r3, r2
 80003d8:	400b      	ands	r3, r1
 80003da:	041b      	lsls	r3, r3, #16
 80003dc:	4391      	bics	r1, r2
 80003de:	4319      	orrs	r1, r3
 80003e0:	6181      	str	r1, [r0, #24]
}
 80003e2:	4770      	bx	lr

080003e4 <gpio_port_read>:
	return (uint16_t)GPIO_IDR(gpioport);
 80003e4:	6900      	ldr	r0, [r0, #16]
 80003e6:	b280      	uxth	r0, r0
}
 80003e8:	4770      	bx	lr

080003ea <gpio_port_write>:
@param[in] gpioport Unsigned int32. Port identifier @ref gpio_port_id
@param[in] data Unsigned int16. The value to be written to the GPIO port.
*/
void gpio_port_write(uint32_t gpioport, uint16_t data)
{
	GPIO_ODR(gpioport) = data;
 80003ea:	6141      	str	r1, [r0, #20]
}
 80003ec:	4770      	bx	lr

080003ee <gpio_port_config_lock>:
void gpio_port_config_lock(uint32_t gpioport, uint16_t gpios)
{
	uint32_t reg32;

	/* Special "Lock Key Writing Sequence", see datasheet. */
	GPIO_LCKR(gpioport) = GPIO_LCKK | gpios;	/* Set LCKK. */
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	025b      	lsls	r3, r3, #9
 80003f2:	430b      	orrs	r3, r1
 80003f4:	61c3      	str	r3, [r0, #28]
	GPIO_LCKR(gpioport) = ~GPIO_LCKK & gpios;	/* Clear LCKK. */
 80003f6:	61c1      	str	r1, [r0, #28]
	GPIO_LCKR(gpioport) = GPIO_LCKK | gpios;	/* Set LCKK. */
 80003f8:	61c3      	str	r3, [r0, #28]
	reg32 = GPIO_LCKR(gpioport);			/* Read LCKK. */
 80003fa:	69c3      	ldr	r3, [r0, #28]
	reg32 = GPIO_LCKR(gpioport);			/* Read LCKK again. */
 80003fc:	69c3      	ldr	r3, [r0, #28]
	 * optimized out anyways.
	 */
	reg32 = reg32;

	/* If (reg32 & GPIO_LCKK) is true, the lock is now active. */
}
 80003fe:	4770      	bx	lr

08000400 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000402:	b085      	sub	sp, #20
 8000404:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000406:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8000408:	2100      	movs	r1, #0
{
 800040a:	9202      	str	r2, [sp, #8]
 800040c:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 800040e:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000410:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8000412:	9c03      	ldr	r4, [sp, #12]
 8000414:	2501      	movs	r5, #1
 8000416:	410c      	asrs	r4, r1
 8000418:	422c      	tst	r4, r5
 800041a:	d00a      	beq.n	8000432 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 800041c:	003d      	movs	r5, r7
 800041e:	004c      	lsls	r4, r1, #1
 8000420:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000422:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8000424:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000426:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000428:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 800042a:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 800042c:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 800042e:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000430:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8000432:	3101      	adds	r1, #1
 8000434:	2910      	cmp	r1, #16
 8000436:	d1ec      	bne.n	8000412 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000438:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 800043a:	60c3      	str	r3, [r0, #12]
}
 800043c:	b005      	add	sp, #20
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000440 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8000440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000442:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8000444:	2901      	cmp	r1, #1
 8000446:	d116      	bne.n	8000476 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8000448:	6841      	ldr	r1, [r0, #4]
 800044a:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 800044c:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 800044e:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000450:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000452:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8000454:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8000456:	001d      	movs	r5, r3
 8000458:	4125      	asrs	r5, r4
 800045a:	4235      	tst	r5, r6
 800045c:	d006      	beq.n	800046c <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 800045e:	003a      	movs	r2, r7
 8000460:	0065      	lsls	r5, r4, #1
 8000462:	40aa      	lsls	r2, r5
 8000464:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8000466:	9a01      	ldr	r2, [sp, #4]
 8000468:	40aa      	lsls	r2, r5
 800046a:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 800046c:	3401      	adds	r4, #1
 800046e:	2c10      	cmp	r4, #16
 8000470:	d1f1      	bne.n	8000456 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8000472:	6081      	str	r1, [r0, #8]
}
 8000474:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000476:	6841      	ldr	r1, [r0, #4]
 8000478:	4399      	bics	r1, r3
 800047a:	e7e7      	b.n	800044c <gpio_set_output_options+0xc>

0800047c <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 800047c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 800047e:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8000480:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000482:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8000484:	6a04      	ldr	r4, [r0, #32]
{
 8000486:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8000488:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800048a:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 800048c:	9d01      	ldr	r5, [sp, #4]
 800048e:	411d      	asrs	r5, r3
 8000490:	4235      	tst	r5, r6
 8000492:	d006      	beq.n	80004a2 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8000494:	003a      	movs	r2, r7
 8000496:	009d      	lsls	r5, r3, #2
 8000498:	40aa      	lsls	r2, r5
 800049a:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 800049c:	9a00      	ldr	r2, [sp, #0]
 800049e:	40aa      	lsls	r2, r5
 80004a0:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 80004a2:	3301      	adds	r3, #1
 80004a4:	2b08      	cmp	r3, #8
 80004a6:	d1f1      	bne.n	800048c <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 80004a8:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80004aa:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 80004ac:	9a01      	ldr	r2, [sp, #4]
 80004ae:	411a      	asrs	r2, r3
 80004b0:	4232      	tst	r2, r6
 80004b2:	d007      	beq.n	80004c4 <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80004b4:	003a      	movs	r2, r7
 80004b6:	009d      	lsls	r5, r3, #2
 80004b8:	3d20      	subs	r5, #32
 80004ba:	40aa      	lsls	r2, r5
 80004bc:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 80004be:	9a00      	ldr	r2, [sp, #0]
 80004c0:	40aa      	lsls	r2, r5
 80004c2:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 80004c4:	3301      	adds	r3, #1
 80004c6:	2b10      	cmp	r3, #16
 80004c8:	d1f0      	bne.n	80004ac <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 80004ca:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 80004cc:	6241      	str	r1, [r0, #36]	; 0x24
}
 80004ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080004d0 <rcc_peripheral_enable_clock>:
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */

void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg |= en;
 80004d0:	6803      	ldr	r3, [r0, #0]
 80004d2:	430b      	orrs	r3, r1
 80004d4:	6003      	str	r3, [r0, #0]
}
 80004d6:	4770      	bx	lr

080004d8 <rcc_peripheral_disable_clock>:
 * @li If register is RCC_APB1ENR, from @ref rcc_apb1enr_en
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */
void rcc_peripheral_disable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg &= ~en;
 80004d8:	6803      	ldr	r3, [r0, #0]
 80004da:	438b      	bics	r3, r1
 80004dc:	6003      	str	r3, [r0, #0]
}
 80004de:	4770      	bx	lr

080004e0 <rcc_peripheral_reset>:
 80004e0:	6803      	ldr	r3, [r0, #0]
 80004e2:	4319      	orrs	r1, r3
 80004e4:	6001      	str	r1, [r0, #0]
 80004e6:	4770      	bx	lr

080004e8 <rcc_peripheral_clear_reset>:
 80004e8:	6803      	ldr	r3, [r0, #0]
 80004ea:	438b      	bics	r3, r1
 80004ec:	6003      	str	r3, [r0, #0]
 80004ee:	4770      	bx	lr

080004f0 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <rcc_periph_clock_enable+0x18>)
 80004f2:	0942      	lsrs	r2, r0, #5
 80004f4:	18d2      	adds	r2, r2, r3
 80004f6:	231f      	movs	r3, #31
 80004f8:	4018      	ands	r0, r3
 80004fa:	3b1e      	subs	r3, #30
 80004fc:	4083      	lsls	r3, r0
 80004fe:	6811      	ldr	r1, [r2, #0]
 8000500:	430b      	orrs	r3, r1
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40021000 	.word	0x40021000

0800050c <rcc_periph_clock_disable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_disable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) &= ~_RCC_BIT(clken);
 800050c:	211f      	movs	r1, #31
 800050e:	0943      	lsrs	r3, r0, #5
 8000510:	4008      	ands	r0, r1
 8000512:	391e      	subs	r1, #30
 8000514:	4081      	lsls	r1, r0
 8000516:	4a03      	ldr	r2, [pc, #12]	; (8000524 <rcc_periph_clock_disable+0x18>)
 8000518:	189b      	adds	r3, r3, r2
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	438a      	bics	r2, r1
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40021000 	.word	0x40021000

08000528 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <rcc_periph_reset_pulse+0x1c>)
 800052a:	0943      	lsrs	r3, r0, #5
 800052c:	189b      	adds	r3, r3, r2
 800052e:	221f      	movs	r2, #31
 8000530:	4010      	ands	r0, r2
 8000532:	3a1e      	subs	r2, #30
 8000534:	4082      	lsls	r2, r0
 8000536:	6819      	ldr	r1, [r3, #0]
 8000538:	4311      	orrs	r1, r2
 800053a:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800053c:	6819      	ldr	r1, [r3, #0]
 800053e:	4391      	bics	r1, r2
 8000540:	6019      	str	r1, [r3, #0]
}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000

08000548 <rcc_periph_reset_hold>:
 8000548:	b510      	push	{r4, lr}
 800054a:	f7ff ffd1 	bl	80004f0 <rcc_periph_clock_enable>
 800054e:	bd10      	pop	{r4, pc}

08000550 <rcc_periph_reset_release>:
 8000550:	b510      	push	{r4, lr}
 8000552:	f7ff ffdb 	bl	800050c <rcc_periph_clock_disable>
 8000556:	bd10      	pop	{r4, pc}

08000558 <rcc_set_mco>:
 * @param[in] mcosrc the unshifted source bits
 */

void rcc_set_mco(uint32_t mcosrc)
{
	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <rcc_set_mco+0x10>)
 800055a:	4904      	ldr	r1, [pc, #16]	; (800056c <rcc_set_mco+0x14>)
 800055c:	6813      	ldr	r3, [r2, #0]
			(mcosrc << RCC_CFGR_MCO_SHIFT);
 800055e:	0600      	lsls	r0, r0, #24
	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 8000560:	400b      	ands	r3, r1
 8000562:	4303      	orrs	r3, r0
 8000564:	6013      	str	r3, [r2, #0]
}
 8000566:	4770      	bx	lr
 8000568:	40021004 	.word	0x40021004
 800056c:	f0ffffff 	.word	0xf0ffffff

08000570 <rcc_osc_bypass_enable>:
 * pwr_disable_backup_domain_write_protect).
 * @param[in] osc Oscillator ID. Only HSE and LSE have effect.
 */
void rcc_osc_bypass_enable(enum rcc_osc osc)
{
	switch (osc) {
 8000570:	2802      	cmp	r0, #2
 8000572:	d002      	beq.n	800057a <rcc_osc_bypass_enable+0xa>
 8000574:	2805      	cmp	r0, #5
 8000576:	d007      	beq.n	8000588 <rcc_osc_bypass_enable+0x18>
		break;
	default:
		/* Do nothing, only HSE/LSE allowed here. */
		break;
	}
}
 8000578:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEBYP;
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <rcc_osc_bypass_enable+0x20>)
 800057e:	02db      	lsls	r3, r3, #11
 8000580:	6811      	ldr	r1, [r2, #0]
		RCC_BDCR |= RCC_BDCR_LSEBYP;
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	e7f7      	b.n	8000578 <rcc_osc_bypass_enable+0x8>
		RCC_BDCR |= RCC_BDCR_LSEBYP;
 8000588:	4a02      	ldr	r2, [pc, #8]	; (8000594 <rcc_osc_bypass_enable+0x24>)
 800058a:	2304      	movs	r3, #4
 800058c:	6811      	ldr	r1, [r2, #0]
 800058e:	e7f8      	b.n	8000582 <rcc_osc_bypass_enable+0x12>
 8000590:	40021000 	.word	0x40021000
 8000594:	40021020 	.word	0x40021020

08000598 <rcc_osc_bypass_disable>:
 * (see @ref rcc_backupdomain_reset).
 * @param[in] osc Oscillator ID. Only HSE and LSE have effect.
 */
void rcc_osc_bypass_disable(enum rcc_osc osc)
{
	switch (osc) {
 8000598:	2802      	cmp	r0, #2
 800059a:	d002      	beq.n	80005a2 <rcc_osc_bypass_disable+0xa>
 800059c:	2805      	cmp	r0, #5
 800059e:	d006      	beq.n	80005ae <rcc_osc_bypass_disable+0x16>
		break;
	default:
		/* Do nothing, only HSE/LSE allowed here. */
		break;
	}
}
 80005a0:	4770      	bx	lr
		RCC_CR &= ~RCC_CR_HSEBYP;
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <rcc_osc_bypass_disable+0x20>)
 80005a4:	4905      	ldr	r1, [pc, #20]	; (80005bc <rcc_osc_bypass_disable+0x24>)
 80005a6:	6813      	ldr	r3, [r2, #0]
 80005a8:	400b      	ands	r3, r1
		RCC_BDCR &= ~RCC_BDCR_LSEBYP;
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	e7f8      	b.n	80005a0 <rcc_osc_bypass_disable+0x8>
		RCC_BDCR &= ~RCC_BDCR_LSEBYP;
 80005ae:	2104      	movs	r1, #4
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <rcc_osc_bypass_disable+0x28>)
 80005b2:	6813      	ldr	r3, [r2, #0]
 80005b4:	438b      	bics	r3, r1
 80005b6:	e7f8      	b.n	80005aa <rcc_osc_bypass_disable+0x12>
 80005b8:	40021000 	.word	0x40021000
 80005bc:	fffbffff 	.word	0xfffbffff
 80005c0:	40021020 	.word	0x40021020

080005c4 <rcc_get_div_from_hpre>:

/* This is a helper to calculate dividers that go 2/4/8/16/64/128/256/512.
 * These dividers also use the top bit as an "enable". This is tyipcally
 * used for AHB and other system clock prescaler. */
uint16_t rcc_get_div_from_hpre(uint8_t div_val) {
	if (div_val < 0x8) {
 80005c4:	2201      	movs	r2, #1
uint16_t rcc_get_div_from_hpre(uint8_t div_val) {
 80005c6:	0003      	movs	r3, r0
		return 1;
 80005c8:	0010      	movs	r0, r2
	if (div_val < 0x8) {
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	d904      	bls.n	80005d8 <rcc_get_div_from_hpre+0x14>
	} else if (div_val <= 0x0b /* DIV16 */) {
 80005ce:	2b0b      	cmp	r3, #11
 80005d0:	d803      	bhi.n	80005da <rcc_get_div_from_hpre+0x16>
		return (1U << (div_val - 7));
 80005d2:	3b07      	subs	r3, #7
	} else {
		return (1U << (div_val - 6));
 80005d4:	409a      	lsls	r2, r3
 80005d6:	b290      	uxth	r0, r2
	}
}
 80005d8:	4770      	bx	lr
		return (1U << (div_val - 6));
 80005da:	3b06      	subs	r3, #6
 80005dc:	e7fa      	b.n	80005d4 <rcc_get_div_from_hpre+0x10>
	...

080005e0 <usart_set_baudrate>:
@param[in] baud unsigned 32 bit. Baud rate specified in Hz.
*/

void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <usart_set_baudrate+0x14>)
{
 80005e2:	b510      	push	{r4, lr}
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 80005e4:	681b      	ldr	r3, [r3, #0]
{
 80005e6:	0004      	movs	r4, r0
	USART_BRR(usart) = (clock + baud / 2) / baud;
 80005e8:	0848      	lsrs	r0, r1, #1
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	f001 f816 	bl	800161c <__udivsi3>
 80005f0:	60e0      	str	r0, [r4, #12]
}
 80005f2:	bd10      	pop	{r4, pc}
 80005f4:	20000024 	.word	0x20000024

080005f8 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 80005f8:	2908      	cmp	r1, #8
 80005fa:	d104      	bne.n	8000606 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80005fc:	6803      	ldr	r3, [r0, #0]
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <usart_set_databits+0x18>)
 8000600:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8000602:	6003      	str	r3, [r0, #0]
	}
}
 8000604:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	6802      	ldr	r2, [r0, #0]
 800060a:	015b      	lsls	r3, r3, #5
 800060c:	4313      	orrs	r3, r2
 800060e:	e7f8      	b.n	8000602 <usart_set_databits+0xa>
 8000610:	ffffefff 	.word	0xffffefff

08000614 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8000614:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8000616:	4a02      	ldr	r2, [pc, #8]	; (8000620 <usart_set_stopbits+0xc>)
 8000618:	4013      	ands	r3, r2
 800061a:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 800061c:	6043      	str	r3, [r0, #4]
}
 800061e:	4770      	bx	lr
 8000620:	ffffcfff 	.word	0xffffcfff

08000624 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8000624:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8000626:	4a02      	ldr	r2, [pc, #8]	; (8000630 <usart_set_parity+0xc>)
 8000628:	4013      	ands	r3, r2
 800062a:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 800062c:	6003      	str	r3, [r0, #0]
}
 800062e:	4770      	bx	lr
 8000630:	fffff9ff 	.word	0xfffff9ff

08000634 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000634:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 8000636:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000638:	4393      	bics	r3, r2
 800063a:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 800063c:	6003      	str	r3, [r0, #0]
}
 800063e:	4770      	bx	lr

08000640 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8000640:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8000642:	4a02      	ldr	r2, [pc, #8]	; (800064c <usart_set_flow_control+0xc>)
 8000644:	4013      	ands	r3, r2
 8000646:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8000648:	6083      	str	r3, [r0, #8]
}
 800064a:	4770      	bx	lr
 800064c:	fffffcff 	.word	0xfffffcff

08000650 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8000650:	2301      	movs	r3, #1
 8000652:	6802      	ldr	r2, [r0, #0]
 8000654:	4313      	orrs	r3, r2
 8000656:	6003      	str	r3, [r0, #0]
}
 8000658:	4770      	bx	lr

0800065a <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 800065a:	2201      	movs	r2, #1
 800065c:	6803      	ldr	r3, [r0, #0]
 800065e:	4393      	bics	r3, r2
 8000660:	6003      	str	r3, [r0, #0]
}
 8000662:	4770      	bx	lr

08000664 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	000d      	movs	r5, r1
 8000668:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800066a:	f000 f8b3 	bl	80007d4 <usart_wait_send_ready>
	usart_send(usart, data);
 800066e:	0029      	movs	r1, r5
 8000670:	0020      	movs	r0, r4
 8000672:	f000 f8a7 	bl	80007c4 <usart_send>
}
 8000676:	bd70      	pop	{r4, r5, r6, pc}

08000678 <usart_recv_blocking>:
usart_reg_base
@returns unsigned 16 bit data word.
*/

uint16_t usart_recv_blocking(uint32_t usart)
{
 8000678:	b510      	push	{r4, lr}
 800067a:	0004      	movs	r4, r0
	usart_wait_recv_ready(usart);
 800067c:	f000 f8af 	bl	80007de <usart_wait_recv_ready>

	return usart_recv(usart);
 8000680:	0020      	movs	r0, r4
 8000682:	f000 f8a3 	bl	80007cc <usart_recv>
}
 8000686:	bd10      	pop	{r4, pc}

08000688 <usart_enable_rx_dma>:
usart_reg_base
*/

void usart_enable_rx_dma(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_DMAR;
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	6882      	ldr	r2, [r0, #8]
 800068c:	4313      	orrs	r3, r2
 800068e:	6083      	str	r3, [r0, #8]
}
 8000690:	4770      	bx	lr

08000692 <usart_disable_rx_dma>:
usart_reg_base
*/

void usart_disable_rx_dma(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_DMAR;
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	6883      	ldr	r3, [r0, #8]
 8000696:	4393      	bics	r3, r2
 8000698:	6083      	str	r3, [r0, #8]
}
 800069a:	4770      	bx	lr

0800069c <usart_enable_tx_dma>:
usart_reg_base
*/

void usart_enable_tx_dma(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_DMAT;
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	6882      	ldr	r2, [r0, #8]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	6083      	str	r3, [r0, #8]
}
 80006a4:	4770      	bx	lr

080006a6 <usart_disable_tx_dma>:
usart_reg_base
*/

void usart_disable_tx_dma(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_DMAT;
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	6883      	ldr	r3, [r0, #8]
 80006aa:	4393      	bics	r3, r2
 80006ac:	6083      	str	r3, [r0, #8]
}
 80006ae:	4770      	bx	lr

080006b0 <usart_enable_rx_interrupt>:
usart_reg_base
*/

void usart_enable_rx_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_RXNEIE;
 80006b0:	2320      	movs	r3, #32
 80006b2:	6802      	ldr	r2, [r0, #0]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	6003      	str	r3, [r0, #0]
}
 80006b8:	4770      	bx	lr

080006ba <usart_disable_rx_interrupt>:
usart_reg_base
*/

void usart_disable_rx_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_RXNEIE;
 80006ba:	2220      	movs	r2, #32
 80006bc:	6803      	ldr	r3, [r0, #0]
 80006be:	4393      	bics	r3, r2
 80006c0:	6003      	str	r3, [r0, #0]
}
 80006c2:	4770      	bx	lr

080006c4 <usart_enable_tx_interrupt>:
usart_reg_base
*/

void usart_enable_tx_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_TXEIE;
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	6802      	ldr	r2, [r0, #0]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6003      	str	r3, [r0, #0]
}
 80006cc:	4770      	bx	lr

080006ce <usart_disable_tx_interrupt>:
usart_reg_base
*/

void usart_disable_tx_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_TXEIE;
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	6803      	ldr	r3, [r0, #0]
 80006d2:	4393      	bics	r3, r2
 80006d4:	6003      	str	r3, [r0, #0]
}
 80006d6:	4770      	bx	lr

080006d8 <usart_enable_tx_complete_interrupt>:
usart_reg_base
 */

void usart_enable_tx_complete_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_TCIE;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	6802      	ldr	r2, [r0, #0]
 80006dc:	4313      	orrs	r3, r2
 80006de:	6003      	str	r3, [r0, #0]
}
 80006e0:	4770      	bx	lr

080006e2 <usart_disable_tx_complete_interrupt>:
usart_reg_base
 */

void usart_disable_tx_complete_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_TCIE;
 80006e2:	2240      	movs	r2, #64	; 0x40
 80006e4:	6803      	ldr	r3, [r0, #0]
 80006e6:	4393      	bics	r3, r2
 80006e8:	6003      	str	r3, [r0, #0]
}
 80006ea:	4770      	bx	lr

080006ec <usart_enable_idle_interrupt>:
usart_reg_base
*/

void usart_enable_idle_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_IDLEIE;
 80006ec:	2310      	movs	r3, #16
 80006ee:	6802      	ldr	r2, [r0, #0]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	6003      	str	r3, [r0, #0]
}
 80006f4:	4770      	bx	lr

080006f6 <usart_disable_idle_interrupt>:
usart_reg_base
*/

void usart_disable_idle_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_IDLEIE;
 80006f6:	2210      	movs	r2, #16
 80006f8:	6803      	ldr	r3, [r0, #0]
 80006fa:	4393      	bics	r3, r2
 80006fc:	6003      	str	r3, [r0, #0]
}
 80006fe:	4770      	bx	lr

08000700 <usart_enable_error_interrupt>:
usart_reg_base
*/

void usart_enable_error_interrupt(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_EIE;
 8000700:	2301      	movs	r3, #1
 8000702:	6882      	ldr	r2, [r0, #8]
 8000704:	4313      	orrs	r3, r2
 8000706:	6083      	str	r3, [r0, #8]
}
 8000708:	4770      	bx	lr

0800070a <usart_disable_error_interrupt>:
usart_reg_base
*/

void usart_disable_error_interrupt(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_EIE;
 800070a:	2201      	movs	r2, #1
 800070c:	6883      	ldr	r3, [r0, #8]
 800070e:	4393      	bics	r3, r2
 8000710:	6083      	str	r3, [r0, #8]
}
 8000712:	4770      	bx	lr

08000714 <usart_enable_data_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_data_inversion(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_DATAINV;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	6842      	ldr	r2, [r0, #4]
 8000718:	02db      	lsls	r3, r3, #11
 800071a:	4313      	orrs	r3, r2
 800071c:	6043      	str	r3, [r0, #4]
}
 800071e:	4770      	bx	lr

08000720 <usart_disable_data_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_data_inversion(uint32_t usart)
{
	USART_CR2(usart) &= ~USART_CR2_DATAINV;
 8000720:	6843      	ldr	r3, [r0, #4]
 8000722:	4a02      	ldr	r2, [pc, #8]	; (800072c <usart_disable_data_inversion+0xc>)
 8000724:	4013      	ands	r3, r2
 8000726:	6043      	str	r3, [r0, #4]
}
 8000728:	4770      	bx	lr
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	fffbffff 	.word	0xfffbffff

08000730 <usart_enable_tx_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_tx_inversion(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_TXINV;
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	6842      	ldr	r2, [r0, #4]
 8000734:	029b      	lsls	r3, r3, #10
 8000736:	4313      	orrs	r3, r2
 8000738:	6043      	str	r3, [r0, #4]
}
 800073a:	4770      	bx	lr

0800073c <usart_disable_tx_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_tx_inversion(uint32_t usart)
{
	USART_CR2(usart) &= ~USART_CR2_TXINV;
 800073c:	6843      	ldr	r3, [r0, #4]
 800073e:	4a02      	ldr	r2, [pc, #8]	; (8000748 <usart_disable_tx_inversion+0xc>)
 8000740:	4013      	ands	r3, r2
 8000742:	6043      	str	r3, [r0, #4]
}
 8000744:	4770      	bx	lr
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	fffdffff 	.word	0xfffdffff

0800074c <usart_enable_rx_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_rx_inversion(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_RXINV;
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	6842      	ldr	r2, [r0, #4]
 8000750:	025b      	lsls	r3, r3, #9
 8000752:	4313      	orrs	r3, r2
 8000754:	6043      	str	r3, [r0, #4]
}
 8000756:	4770      	bx	lr

08000758 <usart_disable_rx_inversion>:
 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_rx_inversion(uint32_t usart)
{

	USART_CR2(usart) &= ~USART_CR2_RXINV;
 8000758:	6843      	ldr	r3, [r0, #4]
 800075a:	4a02      	ldr	r2, [pc, #8]	; (8000764 <usart_disable_rx_inversion+0xc>)
 800075c:	4013      	ands	r3, r2
 800075e:	6043      	str	r3, [r0, #4]
}
 8000760:	4770      	bx	lr
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	fffeffff 	.word	0xfffeffff

08000768 <usart_enable_halfduplex>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_halfduplex(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_HDSEL;
 8000768:	2308      	movs	r3, #8
 800076a:	6882      	ldr	r2, [r0, #8]
 800076c:	4313      	orrs	r3, r2
 800076e:	6083      	str	r3, [r0, #8]
}
 8000770:	4770      	bx	lr

08000772 <usart_disable_halfduplex>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_halfduplex(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_HDSEL;
 8000772:	2208      	movs	r2, #8
 8000774:	6883      	ldr	r3, [r0, #8]
 8000776:	4393      	bics	r3, r2
 8000778:	6083      	str	r3, [r0, #8]
}
 800077a:	4770      	bx	lr

0800077c <usart_set_rx_timeout_value>:
 @param[in] value The receive timeout value in terms of number of bit duration.
 */
void usart_set_rx_timeout_value(uint32_t usart, uint32_t value)
{
	uint32_t reg;
	reg = USART_RTOR(usart) & ~USART_RTOR_RTO_MASK;
 800077c:	6943      	ldr	r3, [r0, #20]
	reg |= (USART_RTOR_RTO_VAL(value) & USART_RTOR_RTO_MASK);
 800077e:	0309      	lsls	r1, r1, #12
	reg = USART_RTOR(usart) & ~USART_RTOR_RTO_MASK;
 8000780:	0d1b      	lsrs	r3, r3, #20
 8000782:	051b      	lsls	r3, r3, #20
	reg |= (USART_RTOR_RTO_VAL(value) & USART_RTOR_RTO_MASK);
 8000784:	0b09      	lsrs	r1, r1, #12
 8000786:	4319      	orrs	r1, r3
	USART_RTOR(usart) = reg;
 8000788:	6141      	str	r1, [r0, #20]
}
 800078a:	4770      	bx	lr

0800078c <usart_enable_rx_timeout>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_rx_timeout(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_RTOEN;
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	6842      	ldr	r2, [r0, #4]
 8000790:	041b      	lsls	r3, r3, #16
 8000792:	4313      	orrs	r3, r2
 8000794:	6043      	str	r3, [r0, #4]
}
 8000796:	4770      	bx	lr

08000798 <usart_disable_rx_timeout>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_rx_timeout(uint32_t usart)
{
	USART_CR2(usart) &= ~USART_CR2_RTOEN;
 8000798:	6843      	ldr	r3, [r0, #4]
 800079a:	4a02      	ldr	r2, [pc, #8]	; (80007a4 <usart_disable_rx_timeout+0xc>)
 800079c:	4013      	ands	r3, r2
 800079e:	6043      	str	r3, [r0, #4]
}
 80007a0:	4770      	bx	lr
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	ff7fffff 	.word	0xff7fffff

080007a8 <usart_enable_rx_timeout_interrupt>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_rx_timeout_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_RTOIE;
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	6802      	ldr	r2, [r0, #0]
 80007ac:	04db      	lsls	r3, r3, #19
 80007ae:	4313      	orrs	r3, r2
 80007b0:	6003      	str	r3, [r0, #0]
}
 80007b2:	4770      	bx	lr

080007b4 <usart_disable_rx_timeout_interrupt>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_rx_timeout_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_RTOIE;
 80007b4:	6803      	ldr	r3, [r0, #0]
 80007b6:	4a02      	ldr	r2, [pc, #8]	; (80007c0 <usart_disable_rx_timeout_interrupt+0xc>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	6003      	str	r3, [r0, #0]
}
 80007bc:	4770      	bx	lr
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	fbffffff 	.word	0xfbffffff

080007c4 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 80007c4:	05c9      	lsls	r1, r1, #23
 80007c6:	0dc9      	lsrs	r1, r1, #23
 80007c8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80007ca:	4770      	bx	lr

080007cc <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 80007cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80007ce:	05c0      	lsls	r0, r0, #23
 80007d0:	0dc0      	lsrs	r0, r0, #23
}
 80007d2:	4770      	bx	lr

080007d4 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	69c2      	ldr	r2, [r0, #28]
 80007d8:	421a      	tst	r2, r3
 80007da:	d0fc      	beq.n	80007d6 <usart_wait_send_ready+0x2>
}
 80007dc:	4770      	bx	lr

080007de <usart_wait_recv_ready>:
 */

void usart_wait_recv_ready(uint32_t usart)
{
	/* Wait until the data is ready to be received. */
	while ((USART_ISR(usart) & USART_ISR_RXNE) == 0);
 80007de:	2320      	movs	r3, #32
 80007e0:	69c2      	ldr	r2, [r0, #28]
 80007e2:	421a      	tst	r2, r3
 80007e4:	d0fc      	beq.n	80007e0 <usart_wait_recv_ready+0x2>
}
 80007e6:	4770      	bx	lr

080007e8 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 80007e8:	69c0      	ldr	r0, [r0, #28]
 80007ea:	4008      	ands	r0, r1
 80007ec:	1e41      	subs	r1, r0, #1
 80007ee:	4188      	sbcs	r0, r1
 80007f0:	b2c0      	uxtb	r0, r0
}
 80007f2:	4770      	bx	lr

080007f4 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 80007f4:	e7fe      	b.n	80007f4 <blocking_handler>

080007f6 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80007f6:	4770      	bx	lr

080007f8 <reset_handler>:
{
 80007f8:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <reset_handler+0x5c>)
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <reset_handler+0x60>)
 80007fe:	4917      	ldr	r1, [pc, #92]	; (800085c <reset_handler+0x64>)
 8000800:	428b      	cmp	r3, r1
 8000802:	d318      	bcc.n	8000836 <reset_handler+0x3e>
		*dest++ = 0;
 8000804:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <reset_handler+0x68>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d317      	bcc.n	800083c <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <reset_handler+0x6c>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000814:	4c14      	ldr	r4, [pc, #80]	; (8000868 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000816:	430b      	orrs	r3, r1
 8000818:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <reset_handler+0x74>)
 800081c:	429c      	cmp	r4, r3
 800081e:	d30f      	bcc.n	8000840 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000820:	4c13      	ldr	r4, [pc, #76]	; (8000870 <reset_handler+0x78>)
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <reset_handler+0x7c>)
 8000824:	429c      	cmp	r4, r3
 8000826:	d30e      	bcc.n	8000846 <reset_handler+0x4e>
	(void)main();
 8000828:	f7ff fc82 	bl	8000130 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800082c:	4c12      	ldr	r4, [pc, #72]	; (8000878 <reset_handler+0x80>)
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <reset_handler+0x84>)
 8000830:	429c      	cmp	r4, r3
 8000832:	d30b      	bcc.n	800084c <reset_handler+0x54>
}
 8000834:	bd10      	pop	{r4, pc}
		*dest = *src;
 8000836:	ca01      	ldmia	r2!, {r0}
 8000838:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 800083a:	e7e1      	b.n	8000800 <reset_handler+0x8>
		*dest++ = 0;
 800083c:	c302      	stmia	r3!, {r1}
 800083e:	e7e3      	b.n	8000808 <reset_handler+0x10>
		(*fp)();
 8000840:	cc08      	ldmia	r4!, {r3}
 8000842:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000844:	e7e9      	b.n	800081a <reset_handler+0x22>
		(*fp)();
 8000846:	cc08      	ldmia	r4!, {r3}
 8000848:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800084a:	e7ea      	b.n	8000822 <reset_handler+0x2a>
		(*fp)();
 800084c:	cc08      	ldmia	r4!, {r3}
 800084e:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000850:	e7ed      	b.n	800082e <reset_handler+0x36>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000000 	.word	0x20000000
 8000858:	08001bc4 	.word	0x08001bc4
 800085c:	20000028 	.word	0x20000028
 8000860:	20000028 	.word	0x20000028
 8000864:	e000ed14 	.word	0xe000ed14
 8000868:	08001bc4 	.word	0x08001bc4
 800086c:	08001bc4 	.word	0x08001bc4
 8000870:	08001bc4 	.word	0x08001bc4
 8000874:	08001bc4 	.word	0x08001bc4
 8000878:	08001bc4 	.word	0x08001bc4
 800087c:	08001bc4 	.word	0x08001bc4

08000880 <rcc_get_usart_clksel_freq>:
	rcc_apb1_frequency = 48000000;
	rcc_ahb_frequency = 48000000;
}

static uint32_t rcc_get_usart_clksel_freq(uint8_t shift) {
	uint8_t clksel = (RCC_CFGR3 >> shift) & RCC_CFGR3_USARTxSW_MASK;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <rcc_get_usart_clksel_freq+0x3c>)
 8000882:	2203      	movs	r2, #3
 8000884:	681b      	ldr	r3, [r3, #0]
static uint32_t rcc_get_usart_clksel_freq(uint8_t shift) {
 8000886:	b510      	push	{r4, lr}
	uint8_t clksel = (RCC_CFGR3 >> shift) & RCC_CFGR3_USARTxSW_MASK;
 8000888:	40c3      	lsrs	r3, r0
 800088a:	4013      	ands	r3, r2
	uint8_t hpre = (RCC_CFGR >> RCC_CFGR_HPRE_SHIFT) & RCC_CFGR_HPRE_MASK;
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <rcc_get_usart_clksel_freq+0x40>)
 800088e:	6810      	ldr	r0, [r2, #0]
	switch (clksel) {
 8000890:	2b01      	cmp	r3, #1
 8000892:	d006      	beq.n	80008a2 <rcc_get_usart_clksel_freq+0x22>
 8000894:	2b03      	cmp	r3, #3
 8000896:	d00e      	beq.n	80008b6 <rcc_get_usart_clksel_freq+0x36>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10a      	bne.n	80008b2 <rcc_get_usart_clksel_freq+0x32>
		case RCC_CFGR3_USART1SW_PCLK:
			return rcc_apb1_frequency;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <rcc_get_usart_clksel_freq+0x44>)
 800089e:	6818      	ldr	r0, [r3, #0]
			return rcc_ahb_frequency * rcc_get_div_from_hpre(hpre);
		case RCC_CFGR3_USART1SW_HSI:
			return 8000000U;
	}
	cm3_assert_not_reached();
}
 80008a0:	bd10      	pop	{r4, pc}
	uint8_t hpre = (RCC_CFGR >> RCC_CFGR_HPRE_SHIFT) & RCC_CFGR_HPRE_MASK;
 80008a2:	0600      	lsls	r0, r0, #24
			return rcc_ahb_frequency * rcc_get_div_from_hpre(hpre);
 80008a4:	0f00      	lsrs	r0, r0, #28
 80008a6:	f7ff fe8d 	bl	80005c4 <rcc_get_div_from_hpre>
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <rcc_get_usart_clksel_freq+0x48>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4358      	muls	r0, r3
 80008b0:	e7f6      	b.n	80008a0 <rcc_get_usart_clksel_freq+0x20>
	cm3_assert_not_reached();
 80008b2:	f000 fb1f 	bl	8000ef4 <cm3_assert_failed>
	switch (clksel) {
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <rcc_get_usart_clksel_freq+0x4c>)
 80008b8:	e7f2      	b.n	80008a0 <rcc_get_usart_clksel_freq+0x20>
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40021030 	.word	0x40021030
 80008c0:	40021004 	.word	0x40021004
 80008c4:	20000024 	.word	0x20000024
 80008c8:	20000020 	.word	0x20000020
 80008cc:	007a1200 	.word	0x007a1200

080008d0 <rcc_osc_ready_int_clear>:
{
 80008d0:	b500      	push	{lr}
 80008d2:	2806      	cmp	r0, #6
 80008d4:	d80b      	bhi.n	80008ee <rcc_osc_ready_int_clear+0x1e>
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <rcc_osc_ready_int_clear+0x38>)
		RCC_CIR |= RCC_CIR_HSI48RDYC;
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	f000 fe94 	bl	8001608 <__gnu_thumb1_case_uqi>
 80008e0:	0e0c0a08 	.word	0x0e0c0a08
 80008e4:	1012      	.short	0x1012
 80008e6:	04          	.byte	0x04
 80008e7:	00          	.byte	0x00
 80008e8:	03d2      	lsls	r2, r2, #15
		RCC_CIR |= RCC_CIR_LSIRDYC;
 80008ea:	430a      	orrs	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bd00      	pop	{pc}
		RCC_CIR |= RCC_CIR_HSI14RDYC;
 80008f0:	0392      	lsls	r2, r2, #14
 80008f2:	e7fa      	b.n	80008ea <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_HSIRDYC;
 80008f4:	02d2      	lsls	r2, r2, #11
 80008f6:	e7f8      	b.n	80008ea <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_HSERDYC;
 80008f8:	0312      	lsls	r2, r2, #12
 80008fa:	e7f6      	b.n	80008ea <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_PLLRDYC;
 80008fc:	0352      	lsls	r2, r2, #13
 80008fe:	e7f4      	b.n	80008ea <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_LSERDYC;
 8000900:	0292      	lsls	r2, r2, #10
 8000902:	e7f2      	b.n	80008ea <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_LSIRDYC;
 8000904:	0252      	lsls	r2, r2, #9
 8000906:	e7f0      	b.n	80008ea <rcc_osc_ready_int_clear+0x1a>
 8000908:	40021008 	.word	0x40021008

0800090c <rcc_osc_ready_int_enable>:
{
 800090c:	b500      	push	{lr}
 800090e:	2806      	cmp	r0, #6
 8000910:	d80b      	bhi.n	800092a <rcc_osc_ready_int_enable+0x1e>
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <rcc_osc_ready_int_enable+0x38>)
		RCC_CIR |= RCC_CIR_HSI48RDYIE;
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	6819      	ldr	r1, [r3, #0]
 8000918:	f000 fe76 	bl	8001608 <__gnu_thumb1_case_uqi>
 800091c:	0e0c0a08 	.word	0x0e0c0a08
 8000920:	1012      	.short	0x1012
 8000922:	04          	.byte	0x04
 8000923:	00          	.byte	0x00
 8000924:	01d2      	lsls	r2, r2, #7
		RCC_CIR |= RCC_CIR_LSIRDYIE;
 8000926:	430a      	orrs	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	bd00      	pop	{pc}
		RCC_CIR |= RCC_CIR_HSI14RDYIE;
 800092c:	0192      	lsls	r2, r2, #6
 800092e:	e7fa      	b.n	8000926 <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_HSIRDYIE;
 8000930:	00d2      	lsls	r2, r2, #3
 8000932:	e7f8      	b.n	8000926 <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_HSERDYIE;
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	e7f6      	b.n	8000926 <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_PLLRDYIE;
 8000938:	0152      	lsls	r2, r2, #5
 800093a:	e7f4      	b.n	8000926 <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_LSERDYIE;
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	e7f2      	b.n	8000926 <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_LSIRDYIE;
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	e7f0      	b.n	8000926 <rcc_osc_ready_int_enable+0x1a>
 8000944:	40021008 	.word	0x40021008

08000948 <rcc_osc_ready_int_disable>:
{
 8000948:	b500      	push	{lr}
 800094a:	2806      	cmp	r0, #6
 800094c:	d80a      	bhi.n	8000964 <rcc_osc_ready_int_disable+0x1c>
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <rcc_osc_ready_int_disable+0x38>)
		RCC_CIR &= ~RCC_CIR_HSI48RDYC;
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	f000 fe59 	bl	8001608 <__gnu_thumb1_case_uqi>
 8000956:	0a08      	.short	0x0a08
 8000958:	10120e0c 	.word	0x10120e0c
 800095c:	04          	.byte	0x04
 800095d:	00          	.byte	0x00
 800095e:	4909      	ldr	r1, [pc, #36]	; (8000984 <rcc_osc_ready_int_disable+0x3c>)
		RCC_CIR &= ~RCC_CIR_LSIRDYC;
 8000960:	400a      	ands	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	bd00      	pop	{pc}
		RCC_CIR &= ~RCC_CIR_HSI14RDYC;
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <rcc_osc_ready_int_disable+0x40>)
 8000968:	e7fa      	b.n	8000960 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_HSIRDYC;
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <rcc_osc_ready_int_disable+0x44>)
 800096c:	e7f8      	b.n	8000960 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_HSERDYC;
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <rcc_osc_ready_int_disable+0x48>)
 8000970:	e7f6      	b.n	8000960 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_PLLRDYC;
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <rcc_osc_ready_int_disable+0x4c>)
 8000974:	e7f4      	b.n	8000960 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_LSERDYC;
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <rcc_osc_ready_int_disable+0x50>)
 8000978:	e7f2      	b.n	8000960 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_LSIRDYC;
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <rcc_osc_ready_int_disable+0x54>)
 800097c:	e7f0      	b.n	8000960 <rcc_osc_ready_int_disable+0x18>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40021008 	.word	0x40021008
 8000984:	ffbfffff 	.word	0xffbfffff
 8000988:	ffdfffff 	.word	0xffdfffff
 800098c:	fffbffff 	.word	0xfffbffff
 8000990:	fff7ffff 	.word	0xfff7ffff
 8000994:	ffefffff 	.word	0xffefffff
 8000998:	fffdffff 	.word	0xfffdffff
 800099c:	fffeffff 	.word	0xfffeffff

080009a0 <rcc_osc_ready_int_flag>:
{
 80009a0:	b510      	push	{r4, lr}
 80009a2:	2806      	cmp	r0, #6
 80009a4:	d81c      	bhi.n	80009e0 <rcc_osc_ready_int_flag+0x40>
 80009a6:	2301      	movs	r3, #1
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <rcc_osc_ready_int_flag+0x44>)
 80009aa:	f000 fe2d 	bl	8001608 <__gnu_thumb1_case_uqi>
 80009ae:	0b08      	.short	0x0b08
 80009b0:	1417110e 	.word	0x1417110e
 80009b4:	04          	.byte	0x04
 80009b5:	00          	.byte	0x00
		return (RCC_CIR & RCC_CIR_HSI48RDYF) != 0;
 80009b6:	6810      	ldr	r0, [r2, #0]
 80009b8:	0980      	lsrs	r0, r0, #6
		return (RCC_CIR & RCC_CIR_LSIRDYF) != 0;
 80009ba:	4018      	ands	r0, r3
}
 80009bc:	bd10      	pop	{r4, pc}
		return (RCC_CIR & RCC_CIR_HSI14RDYF) != 0;
 80009be:	6810      	ldr	r0, [r2, #0]
 80009c0:	0940      	lsrs	r0, r0, #5
 80009c2:	e7fa      	b.n	80009ba <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_HSIRDYF) != 0;
 80009c4:	6810      	ldr	r0, [r2, #0]
 80009c6:	0880      	lsrs	r0, r0, #2
 80009c8:	e7f7      	b.n	80009ba <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_HSERDYF) != 0;
 80009ca:	6810      	ldr	r0, [r2, #0]
 80009cc:	08c0      	lsrs	r0, r0, #3
 80009ce:	e7f4      	b.n	80009ba <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_PLLRDYF) != 0;
 80009d0:	6810      	ldr	r0, [r2, #0]
 80009d2:	0900      	lsrs	r0, r0, #4
 80009d4:	e7f1      	b.n	80009ba <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_LSERDYF) != 0;
 80009d6:	6810      	ldr	r0, [r2, #0]
 80009d8:	0840      	lsrs	r0, r0, #1
 80009da:	e7ee      	b.n	80009ba <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_LSIRDYF) != 0;
 80009dc:	6810      	ldr	r0, [r2, #0]
 80009de:	e7ec      	b.n	80009ba <rcc_osc_ready_int_flag+0x1a>
	cm3_assert_not_reached();
 80009e0:	f000 fa88 	bl	8000ef4 <cm3_assert_failed>
 80009e4:	40021008 	.word	0x40021008

080009e8 <rcc_css_int_clear>:
	RCC_CIR |= RCC_CIR_CSSC;
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <rcc_css_int_clear+0x10>)
 80009ec:	041b      	lsls	r3, r3, #16
 80009ee:	6811      	ldr	r1, [r2, #0]
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	4770      	bx	lr
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40021008 	.word	0x40021008

080009fc <rcc_css_int_flag>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <rcc_css_int_flag+0xc>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	0600      	lsls	r0, r0, #24
 8000a02:	0fc0      	lsrs	r0, r0, #31
}
 8000a04:	4770      	bx	lr
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40021008 	.word	0x40021008

08000a0c <rcc_is_osc_ready>:
{
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	b500      	push	{lr}
 8000a10:	2806      	cmp	r0, #6
 8000a12:	d80a      	bhi.n	8000a2a <rcc_is_osc_ready+0x1e>
 8000a14:	3301      	adds	r3, #1
 8000a16:	f000 fdf7 	bl	8001608 <__gnu_thumb1_case_uqi>
 8000a1a:	0e0a      	.short	0x0e0a
 8000a1c:	16181210 	.word	0x16181210
 8000a20:	04          	.byte	0x04
 8000a21:	00          	.byte	0x00
		return RCC_CR2 & RCC_CR2_HSI48RDY;
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <rcc_is_osc_ready+0x44>)
		return RCC_CR & RCC_CR_HSERDY;
 8000a24:	6810      	ldr	r0, [r2, #0]
 8000a26:	0c40      	lsrs	r0, r0, #17
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a28:	4003      	ands	r3, r0
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	bd00      	pop	{pc}
		return RCC_CR2 & RCC_CR2_HSI14RDY;
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <rcc_is_osc_ready+0x44>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a30:	6810      	ldr	r0, [r2, #0]
 8000a32:	0840      	lsrs	r0, r0, #1
 8000a34:	e7f8      	b.n	8000a28 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSIRDY;
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <rcc_is_osc_ready+0x48>)
 8000a38:	e7fa      	b.n	8000a30 <rcc_is_osc_ready+0x24>
		return RCC_CR & RCC_CR_HSERDY;
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <rcc_is_osc_ready+0x48>)
 8000a3c:	e7f2      	b.n	8000a24 <rcc_is_osc_ready+0x18>
		return RCC_CR & RCC_CR_PLLRDY;
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <rcc_is_osc_ready+0x48>)
 8000a40:	6810      	ldr	r0, [r2, #0]
 8000a42:	0e40      	lsrs	r0, r0, #25
 8000a44:	e7f0      	b.n	8000a28 <rcc_is_osc_ready+0x1c>
		return RCC_BDCR & RCC_BDCR_LSERDY;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <rcc_is_osc_ready+0x4c>)
 8000a48:	e7f2      	b.n	8000a30 <rcc_is_osc_ready+0x24>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <rcc_is_osc_ready+0x50>)
 8000a4c:	e7f0      	b.n	8000a30 <rcc_is_osc_ready+0x24>
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40021034 	.word	0x40021034
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40021020 	.word	0x40021020
 8000a5c:	40021024 	.word	0x40021024

08000a60 <rcc_wait_for_osc_ready>:
{
 8000a60:	b510      	push	{r4, lr}
 8000a62:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8000a64:	0020      	movs	r0, r4
 8000a66:	f7ff ffd1 	bl	8000a0c <rcc_is_osc_ready>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d0fa      	beq.n	8000a64 <rcc_wait_for_osc_ready+0x4>
}
 8000a6e:	bd10      	pop	{r4, pc}

08000a70 <rcc_osc_on>:
{
 8000a70:	b500      	push	{lr}
 8000a72:	2806      	cmp	r0, #6
 8000a74:	d80b      	bhi.n	8000a8e <rcc_osc_on+0x1e>
 8000a76:	f000 fdc7 	bl	8001608 <__gnu_thumb1_case_uqi>
 8000a7a:	0f0b      	.short	0x0f0b
 8000a7c:	13151711 	.word	0x13151711
 8000a80:	04          	.byte	0x04
 8000a81:	00          	.byte	0x00
		RCC_CR2 |= RCC_CR2_HSI48ON;
 8000a82:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <rcc_osc_on+0x44>)
		RCC_CR |= RCC_CR_HSEON;
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	6811      	ldr	r1, [r2, #0]
 8000a88:	025b      	lsls	r3, r3, #9
		RCC_CR |= RCC_CR_PLLON;
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bd00      	pop	{pc}
		RCC_CR2 |= RCC_CR2_HSI14ON;
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <rcc_osc_on+0x44>)
		RCC_CSR |= RCC_CSR_LSION;
 8000a92:	2301      	movs	r3, #1
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	e7f8      	b.n	8000a8a <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSION;
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <rcc_osc_on+0x48>)
 8000a9a:	e7fa      	b.n	8000a92 <rcc_osc_on+0x22>
		RCC_CR |= RCC_CR_HSEON;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <rcc_osc_on+0x48>)
 8000a9e:	e7f1      	b.n	8000a84 <rcc_osc_on+0x14>
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <rcc_osc_on+0x4c>)
 8000aa2:	e7f6      	b.n	8000a92 <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <rcc_osc_on+0x50>)
 8000aa6:	e7f4      	b.n	8000a92 <rcc_osc_on+0x22>
		RCC_CR |= RCC_CR_PLLON;
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <rcc_osc_on+0x48>)
 8000aac:	045b      	lsls	r3, r3, #17
 8000aae:	6811      	ldr	r1, [r2, #0]
 8000ab0:	e7eb      	b.n	8000a8a <rcc_osc_on+0x1a>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40021034 	.word	0x40021034
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40021020 	.word	0x40021020
 8000ac0:	40021024 	.word	0x40021024

08000ac4 <rcc_osc_off>:
{
 8000ac4:	b500      	push	{lr}
 8000ac6:	2806      	cmp	r0, #6
 8000ac8:	d80a      	bhi.n	8000ae0 <rcc_osc_off+0x1c>
 8000aca:	f000 fd9d 	bl	8001608 <__gnu_thumb1_case_uqi>
 8000ace:	0f0a      	.short	0x0f0a
 8000ad0:	13150911 	.word	0x13150911
 8000ad4:	04          	.byte	0x04
 8000ad5:	00          	.byte	0x00
		RCC_CR2 &= ~RCC_CR2_HSI48ON;
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <rcc_osc_off+0x38>)
		RCC_CR &= ~RCC_CR_HSEON;
 8000ad8:	6813      	ldr	r3, [r2, #0]
 8000ada:	4909      	ldr	r1, [pc, #36]	; (8000b00 <rcc_osc_off+0x3c>)
 8000adc:	400b      	ands	r3, r1
		RCC_CSR &= ~RCC_CSR_LSION;
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bd00      	pop	{pc}
		RCC_CR2 &= ~RCC_CR2_HSI14ON;
 8000ae2:	4a06      	ldr	r2, [pc, #24]	; (8000afc <rcc_osc_off+0x38>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6813      	ldr	r3, [r2, #0]
 8000ae8:	438b      	bics	r3, r1
 8000aea:	e7f8      	b.n	8000ade <rcc_osc_off+0x1a>
		RCC_CR &= ~RCC_CR_HSION;
 8000aec:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <rcc_osc_off+0x40>)
 8000aee:	e7f9      	b.n	8000ae4 <rcc_osc_off+0x20>
		RCC_CR &= ~RCC_CR_HSEON;
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <rcc_osc_off+0x40>)
 8000af2:	e7f1      	b.n	8000ad8 <rcc_osc_off+0x14>
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <rcc_osc_off+0x44>)
 8000af6:	e7f5      	b.n	8000ae4 <rcc_osc_off+0x20>
		RCC_CSR &= ~RCC_CSR_LSION;
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <rcc_osc_off+0x48>)
 8000afa:	e7f3      	b.n	8000ae4 <rcc_osc_off+0x20>
 8000afc:	40021034 	.word	0x40021034
 8000b00:	fffeffff 	.word	0xfffeffff
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40021020 	.word	0x40021020
 8000b0c:	40021024 	.word	0x40021024

08000b10 <rcc_css_enable>:
	RCC_CR |= RCC_CR_CSSON;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <rcc_css_enable+0x10>)
 8000b14:	031b      	lsls	r3, r3, #12
 8000b16:	6811      	ldr	r1, [r2, #0]
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	4770      	bx	lr
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40021000 	.word	0x40021000

08000b24 <rcc_css_disable>:
	RCC_CR &= ~RCC_CR_CSSON;
 8000b24:	4a02      	ldr	r2, [pc, #8]	; (8000b30 <rcc_css_disable+0xc>)
 8000b26:	4903      	ldr	r1, [pc, #12]	; (8000b34 <rcc_css_disable+0x10>)
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	400b      	ands	r3, r1
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	4770      	bx	lr
 8000b30:	40021000 	.word	0x40021000
 8000b34:	fff7ffff 	.word	0xfff7ffff

08000b38 <rcc_set_sysclk_source>:
	switch (clk) {
 8000b38:	3801      	subs	r0, #1
{
 8000b3a:	b500      	push	{lr}
 8000b3c:	2805      	cmp	r0, #5
 8000b3e:	d812      	bhi.n	8000b66 <rcc_set_sysclk_source+0x2e>
 8000b40:	f000 fd62 	bl	8001608 <__gnu_thumb1_case_uqi>
 8000b44:	11120903 	.word	0x11120903
 8000b48:	1911      	.short	0x1911
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSI;
 8000b4a:	2103      	movs	r1, #3
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <rcc_set_sysclk_source+0x48>)
 8000b4e:	6813      	ldr	r3, [r2, #0]
 8000b50:	438b      	bics	r3, r1
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	e007      	b.n	8000b66 <rcc_set_sysclk_source+0x2e>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000b56:	2203      	movs	r2, #3
 8000b58:	4909      	ldr	r1, [pc, #36]	; (8000b80 <rcc_set_sysclk_source+0x48>)
 8000b5a:	680b      	ldr	r3, [r1, #0]
 8000b5c:	4393      	bics	r3, r2
 8000b5e:	001a      	movs	r2, r3
 8000b60:	2301      	movs	r3, #1
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_PLL;
 8000b62:	4313      	orrs	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]
}
 8000b66:	bd00      	pop	{pc}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_PLL;
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4905      	ldr	r1, [pc, #20]	; (8000b80 <rcc_set_sysclk_source+0x48>)
 8000b6c:	680b      	ldr	r3, [r1, #0]
 8000b6e:	4393      	bics	r3, r2
 8000b70:	001a      	movs	r2, r3
 8000b72:	2302      	movs	r3, #2
 8000b74:	e7f5      	b.n	8000b62 <rcc_set_sysclk_source+0x2a>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
 8000b76:	2303      	movs	r3, #3
 8000b78:	4a01      	ldr	r2, [pc, #4]	; (8000b80 <rcc_set_sysclk_source+0x48>)
 8000b7a:	6811      	ldr	r1, [r2, #0]
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	e7e8      	b.n	8000b52 <rcc_set_sysclk_source+0x1a>
 8000b80:	40021004 	.word	0x40021004

08000b84 <rcc_set_usbclk_source>:
	switch (clk) {
 8000b84:	2803      	cmp	r0, #3
 8000b86:	d002      	beq.n	8000b8e <rcc_set_usbclk_source+0xa>
 8000b88:	2806      	cmp	r0, #6
 8000b8a:	d006      	beq.n	8000b9a <rcc_set_usbclk_source+0x16>
}
 8000b8c:	4770      	bx	lr
		RCC_CFGR3 |= RCC_CFGR3_USBSW;
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <rcc_set_usbclk_source+0x20>)
 8000b92:	6811      	ldr	r1, [r2, #0]
 8000b94:	430b      	orrs	r3, r1
		RCC_CFGR3 &= ~RCC_CFGR3_USBSW;
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	e7f8      	b.n	8000b8c <rcc_set_usbclk_source+0x8>
		RCC_CFGR3 &= ~RCC_CFGR3_USBSW;
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	4a01      	ldr	r2, [pc, #4]	; (8000ba4 <rcc_set_usbclk_source+0x20>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	438b      	bics	r3, r1
 8000ba2:	e7f8      	b.n	8000b96 <rcc_set_usbclk_source+0x12>
 8000ba4:	40021030 	.word	0x40021030

08000ba8 <rcc_enable_rtc_clock>:
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <rcc_enable_rtc_clock+0x10>)
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	6811      	ldr	r1, [r2, #0]
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	4770      	bx	lr
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40021020 	.word	0x40021020

08000bbc <rcc_disable_rtc_clock>:
	RCC_BDCR &= ~RCC_BDCR_RTCEN;
 8000bbc:	4a02      	ldr	r2, [pc, #8]	; (8000bc8 <rcc_disable_rtc_clock+0xc>)
 8000bbe:	4903      	ldr	r1, [pc, #12]	; (8000bcc <rcc_disable_rtc_clock+0x10>)
 8000bc0:	6813      	ldr	r3, [r2, #0]
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	6013      	str	r3, [r2, #0]
}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021020 	.word	0x40021020
 8000bcc:	ffff7fff 	.word	0xffff7fff

08000bd0 <rcc_set_rtc_clock_source>:
	switch (clk) {
 8000bd0:	2804      	cmp	r0, #4
 8000bd2:	d013      	beq.n	8000bfc <rcc_set_rtc_clock_source+0x2c>
 8000bd4:	2805      	cmp	r0, #5
 8000bd6:	d008      	beq.n	8000bea <rcc_set_rtc_clock_source+0x1a>
 8000bd8:	2802      	cmp	r0, #2
 8000bda:	d105      	bne.n	8000be8 <rcc_set_rtc_clock_source+0x18>
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_HSE;
 8000bdc:	23c0      	movs	r3, #192	; 0xc0
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <rcc_set_rtc_clock_source+0x3c>)
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	6811      	ldr	r1, [r2, #0]
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	4770      	bx	lr
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_LSE;
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <rcc_set_rtc_clock_source+0x3c>)
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <rcc_set_rtc_clock_source+0x40>)
 8000bee:	680b      	ldr	r3, [r1, #0]
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	005b      	lsls	r3, r3, #1
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_LSI;
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
}
 8000bfa:	e7f5      	b.n	8000be8 <rcc_set_rtc_clock_source+0x18>
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_LSI;
 8000bfc:	4903      	ldr	r1, [pc, #12]	; (8000c0c <rcc_set_rtc_clock_source+0x3c>)
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <rcc_set_rtc_clock_source+0x40>)
 8000c00:	680b      	ldr	r3, [r1, #0]
 8000c02:	401a      	ands	r2, r3
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	e7f5      	b.n	8000bf6 <rcc_set_rtc_clock_source+0x26>
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40021020 	.word	0x40021020
 8000c10:	fffffcff 	.word	0xfffffcff

08000c14 <rcc_set_pll_multiplication_factor>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) | mul;
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <rcc_set_pll_multiplication_factor+0x10>)
 8000c16:	4904      	ldr	r1, [pc, #16]	; (8000c28 <rcc_set_pll_multiplication_factor+0x14>)
 8000c18:	6813      	ldr	r3, [r2, #0]
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	4303      	orrs	r3, r0
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	4770      	bx	lr
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40021004 	.word	0x40021004
 8000c28:	ffc3ffff 	.word	0xffc3ffff

08000c2c <rcc_set_pll_source>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <rcc_set_pll_source+0x10>)
 8000c2e:	4904      	ldr	r1, [pc, #16]	; (8000c40 <rcc_set_pll_source+0x14>)
 8000c30:	6813      	ldr	r3, [r2, #0]
			(pllsrc << 16);
 8000c32:	0400      	lsls	r0, r0, #16
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000c34:	400b      	ands	r3, r1
 8000c36:	4303      	orrs	r3, r0
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	4770      	bx	lr
 8000c3c:	40021004 	.word	0x40021004
 8000c40:	fffeffff 	.word	0xfffeffff

08000c44 <rcc_set_pllxtpre>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <rcc_set_pllxtpre+0x10>)
 8000c46:	4904      	ldr	r1, [pc, #16]	; (8000c58 <rcc_set_pllxtpre+0x14>)
 8000c48:	6813      	ldr	r3, [r2, #0]
			(pllxtpre << 17);
 8000c4a:	0440      	lsls	r0, r0, #17
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000c4c:	400b      	ands	r3, r1
 8000c4e:	4303      	orrs	r3, r0
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	4770      	bx	lr
 8000c54:	40021004 	.word	0x40021004
 8000c58:	fffdffff 	.word	0xfffdffff

08000c5c <rcc_set_ppre>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE) | ppre;
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <rcc_set_ppre+0x10>)
 8000c5e:	4904      	ldr	r1, [pc, #16]	; (8000c70 <rcc_set_ppre+0x14>)
 8000c60:	6813      	ldr	r3, [r2, #0]
 8000c62:	400b      	ands	r3, r1
 8000c64:	4303      	orrs	r3, r0
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	4770      	bx	lr
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	40021004 	.word	0x40021004
 8000c70:	fffff8ff 	.word	0xfffff8ff

08000c74 <rcc_set_hpre>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) | hpre;
 8000c74:	21f0      	movs	r1, #240	; 0xf0
 8000c76:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <rcc_set_hpre+0x10>)
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	438b      	bics	r3, r1
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	4770      	bx	lr
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40021004 	.word	0x40021004

08000c88 <rcc_set_prediv>:
	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV) | prediv;
 8000c88:	210f      	movs	r1, #15
 8000c8a:	4a03      	ldr	r2, [pc, #12]	; (8000c98 <rcc_set_prediv+0x10>)
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	438b      	bics	r3, r1
 8000c90:	4303      	orrs	r3, r0
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	4770      	bx	lr
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	4002102c 	.word	0x4002102c

08000c9c <rcc_system_clock_source>:
	switch (RCC_CFGR & RCC_CFGR_SWS) {
 8000c9c:	220c      	movs	r2, #12
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <rcc_system_clock_source+0x30>)
{
 8000ca0:	b510      	push	{r4, lr}
	switch (RCC_CFGR & RCC_CFGR_SWS) {
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d00b      	beq.n	8000cc2 <rcc_system_clock_source+0x26>
 8000caa:	d806      	bhi.n	8000cba <rcc_system_clock_source+0x1e>
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00a      	beq.n	8000cc6 <rcc_system_clock_source+0x2a>
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d004      	beq.n	8000cc0 <rcc_system_clock_source+0x24>
	cm3_assert_not_reached();
 8000cb6:	f000 f91d 	bl	8000ef4 <cm3_assert_failed>
		return RCC_HSI48;
 8000cba:	2006      	movs	r0, #6
	switch (RCC_CFGR & RCC_CFGR_SWS) {
 8000cbc:	2b0c      	cmp	r3, #12
 8000cbe:	d1fa      	bne.n	8000cb6 <rcc_system_clock_source+0x1a>
}
 8000cc0:	bd10      	pop	{r4, pc}
		return RCC_PLL;
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	e7fc      	b.n	8000cc0 <rcc_system_clock_source+0x24>
		return RCC_HSI;
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	e7fa      	b.n	8000cc0 <rcc_system_clock_source+0x24>
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40021004 	.word	0x40021004

08000cd0 <rcc_set_i2c_clock_hsi>:
	if (i2c == I2C1) {
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <rcc_set_i2c_clock_hsi+0x14>)
 8000cd2:	4298      	cmp	r0, r3
 8000cd4:	d104      	bne.n	8000ce0 <rcc_set_i2c_clock_hsi+0x10>
		RCC_CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <rcc_set_i2c_clock_hsi+0x18>)
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	438b      	bics	r3, r1
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	40021030 	.word	0x40021030

08000cec <rcc_set_i2c_clock_sysclk>:
	if (i2c == I2C1) {
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <rcc_set_i2c_clock_sysclk+0x14>)
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d104      	bne.n	8000cfc <rcc_set_i2c_clock_sysclk+0x10>
		RCC_CFGR3 |= RCC_CFGR3_I2C1SW;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <rcc_set_i2c_clock_sysclk+0x18>)
 8000cf6:	6811      	ldr	r1, [r2, #0]
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	4770      	bx	lr
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	40005400 	.word	0x40005400
 8000d04:	40021030 	.word	0x40021030

08000d08 <rcc_get_i2c_clocks>:
	return RCC_CFGR3 & RCC_CFGR3_I2C1SW;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <rcc_get_i2c_clocks+0xc>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	4018      	ands	r0, r3
}
 8000d10:	4770      	bx	lr
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40021030 	.word	0x40021030

08000d18 <rcc_usb_clock_source>:
	return (RCC_CFGR3 & RCC_CFGR3_USBSW) ? RCC_PLL : RCC_HSI48;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <rcc_usb_clock_source+0x10>)
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	061b      	lsls	r3, r3, #24
 8000d20:	d400      	bmi.n	8000d24 <rcc_usb_clock_source+0xc>
 8000d22:	1800      	adds	r0, r0, r0
}
 8000d24:	4770      	bx	lr
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	40021030 	.word	0x40021030

08000d2c <rcc_clock_setup_in_hse_8mhz_out_48mhz>:
{
 8000d2c:	b570      	push	{r4, r5, r6, lr}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000d2e:	2403      	movs	r4, #3
 8000d30:	2501      	movs	r5, #1
	rcc_osc_on(RCC_HSE);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f7ff fe9c 	bl	8000a70 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSE);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff fe91 	bl	8000a60 <rcc_wait_for_osc_ready>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x64>)
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000d40:	2000      	movs	r0, #0
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000d42:	6813      	ldr	r3, [r2, #0]
 8000d44:	43a3      	bics	r3, r4
 8000d46:	432b      	orrs	r3, r5
 8000d48:	6013      	str	r3, [r2, #0]
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000d4a:	f7ff ff93 	bl	8000c74 <rcc_set_hpre>
	rcc_set_ppre(RCC_CFGR_PPRE_NODIV);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff ff84 	bl	8000c5c <rcc_set_ppre>
	flash_prefetch_enable();
 8000d54:	f000 f8d2 	bl	8000efc <flash_prefetch_enable>
	flash_set_ws(FLASH_ACR_LATENCY_024_048MHZ);
 8000d58:	0028      	movs	r0, r5
 8000d5a:	f000 f8df 	bl	8000f1c <flash_set_ws>
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_MUL6);
 8000d5e:	2080      	movs	r0, #128	; 0x80
 8000d60:	0340      	lsls	r0, r0, #13
 8000d62:	f7ff ff57 	bl	8000c14 <rcc_set_pll_multiplication_factor>
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 8000d66:	0028      	movs	r0, r5
 8000d68:	f7ff ff60 	bl	8000c2c <rcc_set_pll_source>
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff ff69 	bl	8000c44 <rcc_set_pllxtpre>
	rcc_osc_on(RCC_PLL);
 8000d72:	0020      	movs	r0, r4
 8000d74:	f7ff fe7c 	bl	8000a70 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_PLL);
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f7ff fe71 	bl	8000a60 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_PLL);
 8000d7e:	0020      	movs	r0, r4
 8000d80:	f7ff feda 	bl	8000b38 <rcc_set_sysclk_source>
	rcc_apb1_frequency = 48000000;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x68>)
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x6c>)
 8000d88:	6013      	str	r3, [r2, #0]
	rcc_ahb_frequency = 48000000;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x70>)
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	40021004 	.word	0x40021004
 8000d94:	02dc6c00 	.word	0x02dc6c00
 8000d98:	20000024 	.word	0x20000024
 8000d9c:	20000020 	.word	0x20000020

08000da0 <rcc_clock_setup_in_hsi_out_48mhz>:
{
 8000da0:	b510      	push	{r4, lr}
	rcc_osc_on(RCC_HSI);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fe64 	bl	8000a70 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fe59 	bl	8000a60 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_HSI);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fec2 	bl	8000b38 <rcc_set_sysclk_source>
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff5d 	bl	8000c74 <rcc_set_hpre>
	rcc_set_ppre(RCC_CFGR_PPRE_NODIV);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ff4e 	bl	8000c5c <rcc_set_ppre>
	flash_prefetch_enable();
 8000dc0:	f000 f89c 	bl	8000efc <flash_prefetch_enable>
	flash_set_ws(FLASH_ACR_LATENCY_024_048MHZ);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 f8a9 	bl	8000f1c <flash_set_ws>
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_MUL12);
 8000dca:	20a0      	movs	r0, #160	; 0xa0
 8000dcc:	0380      	lsls	r0, r0, #14
 8000dce:	f7ff ff21 	bl	8000c14 <rcc_set_pll_multiplication_factor>
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSI_CLK_DIV2);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff ff2a 	bl	8000c2c <rcc_set_pll_source>
	rcc_osc_on(RCC_PLL);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f7ff fe49 	bl	8000a70 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_PLL);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f7ff fe3e 	bl	8000a60 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_PLL);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f7ff fea7 	bl	8000b38 <rcc_set_sysclk_source>
	rcc_apb1_frequency = 48000000;
 8000dea:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <rcc_clock_setup_in_hsi_out_48mhz+0x58>)
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <rcc_clock_setup_in_hsi_out_48mhz+0x5c>)
 8000dee:	6013      	str	r3, [r2, #0]
	rcc_ahb_frequency = 48000000;
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <rcc_clock_setup_in_hsi_out_48mhz+0x60>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	02dc6c00 	.word	0x02dc6c00
 8000dfc:	20000024 	.word	0x20000024
 8000e00:	20000020 	.word	0x20000020

08000e04 <rcc_clock_setup_in_hsi48_out_48mhz>:
{
 8000e04:	b510      	push	{r4, lr}
	rcc_osc_on(RCC_HSI48);
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff fe32 	bl	8000a70 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI48);
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f7ff fe27 	bl	8000a60 <rcc_wait_for_osc_ready>
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff ff2e 	bl	8000c74 <rcc_set_hpre>
	rcc_set_ppre(RCC_CFGR_PPRE_NODIV);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff1f 	bl	8000c5c <rcc_set_ppre>
	flash_prefetch_enable();
 8000e1e:	f000 f86d 	bl	8000efc <flash_prefetch_enable>
	flash_set_ws(FLASH_ACR_LATENCY_024_048MHZ);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 f87a 	bl	8000f1c <flash_set_ws>
	rcc_set_sysclk_source(RCC_HSI48);
 8000e28:	2006      	movs	r0, #6
 8000e2a:	f7ff fe85 	bl	8000b38 <rcc_set_sysclk_source>
	rcc_apb1_frequency = 48000000;
 8000e2e:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <rcc_clock_setup_in_hsi48_out_48mhz+0x38>)
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <rcc_clock_setup_in_hsi48_out_48mhz+0x3c>)
 8000e32:	6013      	str	r3, [r2, #0]
	rcc_ahb_frequency = 48000000;
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <rcc_clock_setup_in_hsi48_out_48mhz+0x40>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	02dc6c00 	.word	0x02dc6c00
 8000e40:	20000024 	.word	0x20000024
 8000e44:	20000020 	.word	0x20000020

08000e48 <rcc_get_usart_clk_freq>:
/** @brief Get the peripheral clock speed for the USART at base specified.
 * @param usart  Base address of USART to get clock frequency for.
 */
uint32_t rcc_get_usart_clk_freq(uint32_t usart)
{
	if (usart == USART1_BASE) {
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <rcc_get_usart_clk_freq+0x2c>)
{
 8000e4a:	b510      	push	{r4, lr}
	if (usart == USART1_BASE) {
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	d103      	bne.n	8000e58 <rcc_get_usart_clk_freq+0x10>
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART1SW_SHIFT);
 8000e50:	2000      	movs	r0, #0
	} else if (usart == USART2_BASE) {
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART2SW_SHIFT);
	} else if (usart == USART3_BASE) {
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART3SW_SHIFT);
 8000e52:	f7ff fd15 	bl	8000880 <rcc_get_usart_clksel_freq>
	} else {
		return rcc_apb1_frequency;
	}
}
 8000e56:	bd10      	pop	{r4, pc}
	} else if (usart == USART2_BASE) {
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <rcc_get_usart_clk_freq+0x30>)
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d101      	bne.n	8000e62 <rcc_get_usart_clk_freq+0x1a>
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART2SW_SHIFT);
 8000e5e:	2010      	movs	r0, #16
 8000e60:	e7f7      	b.n	8000e52 <rcc_get_usart_clk_freq+0xa>
	} else if (usart == USART3_BASE) {
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <rcc_get_usart_clk_freq+0x34>)
 8000e64:	4298      	cmp	r0, r3
 8000e66:	d101      	bne.n	8000e6c <rcc_get_usart_clk_freq+0x24>
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART3SW_SHIFT);
 8000e68:	2012      	movs	r0, #18
 8000e6a:	e7f2      	b.n	8000e52 <rcc_get_usart_clk_freq+0xa>
		return rcc_apb1_frequency;
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <rcc_get_usart_clk_freq+0x38>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	e7f1      	b.n	8000e56 <rcc_get_usart_clk_freq+0xe>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40013800 	.word	0x40013800
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	20000024 	.word	0x20000024

08000e84 <rcc_get_timer_clk_freq>:
/** @brief Get the peripheral clock speed for the Timer at base specified.
 * @param timer  Base address of TIM to get clock frequency for.
 */
uint32_t rcc_get_timer_clk_freq(uint32_t timer __attribute__((unused)))
{
	uint8_t ppre = (RCC_CFGR >> RCC_CFGR_PPRE_SHIFT) & RCC_CFGR_PPRE_MASK;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <rcc_get_timer_clk_freq+0x14>)
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <rcc_get_timer_clk_freq+0x18>)
 8000e88:	681b      	ldr	r3, [r3, #0]
	return (ppre == RCC_CFGR_PPRE_NODIV) 	? rcc_apb1_frequency
 8000e8a:	6810      	ldr	r0, [r2, #0]
	uint8_t ppre = (RCC_CFGR >> RCC_CFGR_PPRE_SHIFT) & RCC_CFGR_PPRE_MASK;
 8000e8c:	055b      	lsls	r3, r3, #21
						: 2 * rcc_apb1_frequency;
 8000e8e:	0f5b      	lsrs	r3, r3, #29
 8000e90:	d000      	beq.n	8000e94 <rcc_get_timer_clk_freq+0x10>
 8000e92:	0040      	lsls	r0, r0, #1
}
 8000e94:	4770      	bx	lr
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40021004 	.word	0x40021004
 8000e9c:	20000024 	.word	0x20000024

08000ea0 <rcc_get_i2c_clk_freq>:
/** @brief Get the peripheral clock speed for the I2C device at base specified.
 * @param i2c  Base address of I2C to get clock frequency for.
 */
uint32_t rcc_get_i2c_clk_freq(uint32_t i2c)
{
	if (i2c == I2C1_BASE) {
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <rcc_get_i2c_clk_freq+0x30>)
{
 8000ea2:	b510      	push	{r4, lr}
	if (i2c == I2C1_BASE) {
 8000ea4:	4298      	cmp	r0, r3
 8000ea6:	d10d      	bne.n	8000ec4 <rcc_get_i2c_clk_freq+0x24>
		if (RCC_CFGR3 & RCC_CFGR3_I2C1SW) {
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <rcc_get_i2c_clk_freq+0x34>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	06db      	lsls	r3, r3, #27
 8000eae:	d50c      	bpl.n	8000eca <rcc_get_i2c_clk_freq+0x2a>
			uint8_t hpre = (RCC_CFGR >> RCC_CFGR_HPRE_SHIFT) & RCC_CFGR_HPRE_MASK;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <rcc_get_i2c_clk_freq+0x38>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	0600      	lsls	r0, r0, #24
			return rcc_ahb_frequency * rcc_get_div_from_hpre(hpre);
 8000eb6:	0f00      	lsrs	r0, r0, #28
 8000eb8:	f7ff fb84 	bl	80005c4 <rcc_get_div_from_hpre>
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <rcc_get_i2c_clk_freq+0x3c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4358      	muls	r0, r3
			return 8000000U;
		}
	} else {
		return rcc_apb1_frequency;
	}
}
 8000ec2:	bd10      	pop	{r4, pc}
		return rcc_apb1_frequency;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <rcc_get_i2c_clk_freq+0x40>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	e7fb      	b.n	8000ec2 <rcc_get_i2c_clk_freq+0x22>
			return 8000000U;
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <rcc_get_i2c_clk_freq+0x44>)
 8000ecc:	e7f9      	b.n	8000ec2 <rcc_get_i2c_clk_freq+0x22>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40021030 	.word	0x40021030
 8000ed8:	40021004 	.word	0x40021004
 8000edc:	20000020 	.word	0x20000020
 8000ee0:	20000024 	.word	0x20000024
 8000ee4:	007a1200 	.word	0x007a1200

08000ee8 <rcc_get_spi_clk_freq>:
/*---------------------------------------------------------------------------*/
/** @brief Get the peripheral clock speed for the SPI device at base specified.
 * @param spi  Base address of SPI device to get clock frequency for (e.g. SPI1_BASE).
 */
uint32_t rcc_get_spi_clk_freq(uint32_t spi __attribute__((unused))) {
	return rcc_apb1_frequency;
 8000ee8:	4b01      	ldr	r3, [pc, #4]	; (8000ef0 <rcc_get_spi_clk_freq+0x8>)
 8000eea:	6818      	ldr	r0, [r3, #0]
}
 8000eec:	4770      	bx	lr
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000024 	.word	0x20000024

08000ef4 <cm3_assert_failed>:

#include <libopencm3/cm3/assert.h>

void __attribute__((weak)) cm3_assert_failed(void)
{
	while (1);
 8000ef4:	e7fe      	b.n	8000ef4 <cm3_assert_failed>

08000ef6 <cm3_assert_failed_verbose>:
void __attribute__((weak)) cm3_assert_failed_verbose(
		const char *file __attribute__((unused)),
		int line __attribute__((unused)),
		const char *func __attribute__((unused)),
		const char *assert_expr __attribute__((unused)))
{
 8000ef6:	b510      	push	{r4, lr}
	cm3_assert_failed();
 8000ef8:	f7ff fffc 	bl	8000ef4 <cm3_assert_failed>

08000efc <flash_prefetch_enable>:

#include <libopencm3/stm32/flash.h>

void flash_prefetch_enable(void)
{
	FLASH_ACR |= FLASH_ACR_PRFTEN;
 8000efc:	2310      	movs	r3, #16
 8000efe:	4a02      	ldr	r2, [pc, #8]	; (8000f08 <flash_prefetch_enable+0xc>)
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	430b      	orrs	r3, r1
 8000f04:	6013      	str	r3, [r2, #0]
}
 8000f06:	4770      	bx	lr
 8000f08:	40022000 	.word	0x40022000

08000f0c <flash_prefetch_disable>:

void flash_prefetch_disable(void)
{
	FLASH_ACR &= ~FLASH_ACR_PRFTEN;
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4a02      	ldr	r2, [pc, #8]	; (8000f18 <flash_prefetch_disable+0xc>)
 8000f10:	6813      	ldr	r3, [r2, #0]
 8000f12:	438b      	bics	r3, r1
 8000f14:	6013      	str	r3, [r2, #0]
}
 8000f16:	4770      	bx	lr
 8000f18:	40022000 	.word	0x40022000

08000f1c <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000f1c:	2107      	movs	r1, #7
	reg32 = FLASH_ACR;
 8000f1e:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <flash_set_ws+0x10>)
 8000f20:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000f22:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8000f24:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	4770      	bx	lr
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40022000 	.word	0x40022000

08000f30 <flash_unlock_option_bytes>:

void flash_unlock_option_bytes(void)
{
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY1;
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <flash_unlock_option_bytes+0xc>)
 8000f32:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <flash_unlock_option_bytes+0x10>)
 8000f34:	601a      	str	r2, [r3, #0]
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY2;
 8000f36:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <flash_unlock_option_bytes+0x14>)
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	4770      	bx	lr
 8000f3c:	40022008 	.word	0x40022008
 8000f40:	45670123 	.word	0x45670123
 8000f44:	cdef89ab 	.word	0xcdef89ab

08000f48 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	46ce      	mov	lr, r9
 8000f4c:	4647      	mov	r7, r8
 8000f4e:	000c      	movs	r4, r1
 8000f50:	0003      	movs	r3, r0
 8000f52:	b580      	push	{r7, lr}
 8000f54:	3410      	adds	r4, #16
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000f56:	780a      	ldrb	r2, [r1, #0]
 8000f58:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000f5a:	784a      	ldrb	r2, [r1, #1]
 8000f5c:	705a      	strb	r2, [r3, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000f5e:	788a      	ldrb	r2, [r1, #2]
 8000f60:	709a      	strb	r2, [r3, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000f62:	78ca      	ldrb	r2, [r1, #3]
 8000f64:	3104      	adds	r1, #4
 8000f66:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < Nk; ++i)
 8000f68:	3304      	adds	r3, #4
 8000f6a:	42a1      	cmp	r1, r4
 8000f6c:	d1f3      	bne.n	8000f56 <KeyExpansion+0xe>
      tempa[2]=RoundKey[k + 2];
      tempa[3]=RoundKey[k + 3];

    }

    if (i % Nk == 0)
 8000f6e:	2303      	movs	r3, #3
 8000f70:	4699      	mov	r9, r3
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <KeyExpansion+0x7c>)
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000f74:	2504      	movs	r5, #4
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f76:	469c      	mov	ip, r3
        tempa[0] = getSBoxValue(tempa[0]);
 8000f78:	4e13      	ldr	r6, [pc, #76]	; (8000fc8 <KeyExpansion+0x80>)
    if (i % Nk == 0)
 8000f7a:	464f      	mov	r7, r9
      tempa[0]=RoundKey[k + 0];
 8000f7c:	7b03      	ldrb	r3, [r0, #12]
      tempa[1]=RoundKey[k + 1];
 8000f7e:	7b44      	ldrb	r4, [r0, #13]
      tempa[2]=RoundKey[k + 2];
 8000f80:	7b81      	ldrb	r1, [r0, #14]
      tempa[3]=RoundKey[k + 3];
 8000f82:	7bc2      	ldrb	r2, [r0, #15]
    if (i % Nk == 0)
 8000f84:	422f      	tst	r7, r5
 8000f86:	d109      	bne.n	8000f9c <KeyExpansion+0x54>
        tempa[0] = getSBoxValue(tempa[0]);
 8000f88:	5d34      	ldrb	r4, [r6, r4]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f8a:	4667      	mov	r7, ip
        tempa[0] = getSBoxValue(tempa[0]);
 8000f8c:	46a0      	mov	r8, r4
        tempa[1] = getSBoxValue(tempa[1]);
 8000f8e:	5c74      	ldrb	r4, [r6, r1]
        tempa[2] = getSBoxValue(tempa[2]);
 8000f90:	5cb1      	ldrb	r1, [r6, r2]
        tempa[3] = getSBoxValue(tempa[3]);
 8000f92:	5cf2      	ldrb	r2, [r6, r3]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f94:	08ab      	lsrs	r3, r5, #2
 8000f96:	5cfb      	ldrb	r3, [r7, r3]
 8000f98:	4647      	mov	r7, r8
 8000f9a:	407b      	eors	r3, r7
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000f9c:	7807      	ldrb	r7, [r0, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000f9e:	3501      	adds	r5, #1
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000fa0:	407b      	eors	r3, r7
 8000fa2:	7403      	strb	r3, [r0, #16]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000fa4:	7843      	ldrb	r3, [r0, #1]
 8000fa6:	405c      	eors	r4, r3
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000fa8:	7883      	ldrb	r3, [r0, #2]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000faa:	7444      	strb	r4, [r0, #17]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000fac:	4059      	eors	r1, r3
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000fae:	78c3      	ldrb	r3, [r0, #3]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000fb0:	7481      	strb	r1, [r0, #18]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000fb2:	405a      	eors	r2, r3
 8000fb4:	74c2      	strb	r2, [r0, #19]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000fb6:	3004      	adds	r0, #4
 8000fb8:	2d2c      	cmp	r5, #44	; 0x2c
 8000fba:	d1de      	bne.n	8000f7a <KeyExpansion+0x32>
  }
}
 8000fbc:	bc0c      	pop	{r2, r3}
 8000fbe:	4690      	mov	r8, r2
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc4:	080019b8 	.word	0x080019b8
 8000fc8:	08001ac4 	.word	0x08001ac4

08000fcc <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	4645      	mov	r5, r8
 8000fd0:	46de      	mov	lr, fp
 8000fd2:	4657      	mov	r7, sl
 8000fd4:	464e      	mov	r6, r9
 8000fd6:	b5e0      	push	{r5, r6, r7, lr}
 8000fd8:	000d      	movs	r5, r1
 8000fda:	000c      	movs	r4, r1
 8000fdc:	0002      	movs	r2, r0
 8000fde:	b087      	sub	sp, #28
 8000fe0:	9104      	str	r1, [sp, #16]
 8000fe2:	9005      	str	r0, [sp, #20]
 8000fe4:	3510      	adds	r5, #16
 8000fe6:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000fe8:	5cd1      	ldrb	r1, [r2, r3]
 8000fea:	5ce6      	ldrb	r6, [r4, r3]
 8000fec:	4071      	eors	r1, r6
 8000fee:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d1f8      	bne.n	8000fe8 <Cipher+0x1c>
  for (i = 0; i < 4; ++i)
 8000ff6:	3404      	adds	r4, #4
 8000ff8:	3204      	adds	r2, #4
 8000ffa:	42a5      	cmp	r5, r4
 8000ffc:	d1f3      	bne.n	8000fe6 <Cipher+0x1a>
 8000ffe:	469c      	mov	ip, r3
 8001000:	330c      	adds	r3, #12
 8001002:	1a1b      	subs	r3, r3, r0
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	23a0      	movs	r3, #160	; 0xa0
 8001008:	1a1b      	subs	r3, r3, r0
 800100a:	9303      	str	r3, [sp, #12]
 800100c:	2310      	movs	r3, #16
 800100e:	4698      	mov	r8, r3
 8001010:	3304      	adds	r3, #4
 8001012:	4699      	mov	r9, r3
 8001014:	4f57      	ldr	r7, [pc, #348]	; (8001174 <Cipher+0x1a8>)
 8001016:	4480      	add	r8, r0
 8001018:	4481      	add	r9, r0
{
 800101a:	4642      	mov	r2, r8
 800101c:	464c      	mov	r4, r9
    for (j = 0; j < 4; ++j)
 800101e:	0013      	movs	r3, r2
 8001020:	3b10      	subs	r3, #16
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8001022:	7819      	ldrb	r1, [r3, #0]
 8001024:	5c79      	ldrb	r1, [r7, r1]
 8001026:	7019      	strb	r1, [r3, #0]
    for (j = 0; j < 4; ++j)
 8001028:	3304      	adds	r3, #4
 800102a:	429a      	cmp	r2, r3
 800102c:	d1f9      	bne.n	8001022 <Cipher+0x56>
  for (i = 0; i < 4; ++i)
 800102e:	3201      	adds	r2, #1
 8001030:	4294      	cmp	r4, r2
 8001032:	d1f4      	bne.n	800101e <Cipher+0x52>
  temp           = (*state)[0][1];
 8001034:	7843      	ldrb	r3, [r0, #1]
  (*state)[1][1] = (*state)[2][1];
 8001036:	7a42      	ldrb	r2, [r0, #9]
  (*state)[1][2] = (*state)[3][2];
 8001038:	7b81      	ldrb	r1, [r0, #14]
 800103a:	46a1      	mov	r9, r4
  (*state)[0][1] = (*state)[1][1];
 800103c:	7944      	ldrb	r4, [r0, #5]
  (*state)[1][1] = (*state)[2][1];
 800103e:	7142      	strb	r2, [r0, #5]
  (*state)[2][1] = (*state)[3][1];
 8001040:	7b42      	ldrb	r2, [r0, #13]
  (*state)[3][1] = temp;
 8001042:	7343      	strb	r3, [r0, #13]
  temp           = (*state)[0][2];
 8001044:	7883      	ldrb	r3, [r0, #2]
  (*state)[2][1] = (*state)[3][1];
 8001046:	7242      	strb	r2, [r0, #9]
  (*state)[0][2] = (*state)[2][2];
 8001048:	7a82      	ldrb	r2, [r0, #10]
  (*state)[2][2] = temp;
 800104a:	7283      	strb	r3, [r0, #10]
  temp           = (*state)[1][2];
 800104c:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
 800104e:	7181      	strb	r1, [r0, #6]
  (*state)[3][3] = (*state)[2][3];
 8001050:	7ac1      	ldrb	r1, [r0, #11]
  (*state)[3][2] = temp;
 8001052:	7383      	strb	r3, [r0, #14]
  (*state)[0][3] = (*state)[3][3];
 8001054:	7bc5      	ldrb	r5, [r0, #15]
  temp           = (*state)[0][3];
 8001056:	78c3      	ldrb	r3, [r0, #3]
  (*state)[3][3] = (*state)[2][3];
 8001058:	73c1      	strb	r1, [r0, #15]
  (*state)[2][3] = (*state)[1][3];
 800105a:	79c1      	ldrb	r1, [r0, #7]
  (*state)[0][1] = (*state)[1][1];
 800105c:	7044      	strb	r4, [r0, #1]
  (*state)[0][2] = (*state)[2][2];
 800105e:	7082      	strb	r2, [r0, #2]
  (*state)[0][3] = (*state)[3][3];
 8001060:	70c5      	strb	r5, [r0, #3]
  (*state)[2][3] = (*state)[1][3];
 8001062:	72c1      	strb	r1, [r0, #11]
  (*state)[1][3] = temp;
 8001064:	71c3      	strb	r3, [r0, #7]
  // Last one without MixColumns()
  for (round = 1; ; ++round)
  {
    SubBytes(state);
    ShiftRows(state);
    if (round == Nr) {
 8001066:	9b03      	ldr	r3, [sp, #12]
 8001068:	9901      	ldr	r1, [sp, #4]
 800106a:	428b      	cmp	r3, r1
 800106c:	d069      	beq.n	8001142 <Cipher+0x176>
 800106e:	4641      	mov	r1, r8
 8001070:	0003      	movs	r3, r0
 8001072:	9002      	str	r0, [sp, #8]
 8001074:	9100      	str	r1, [sp, #0]
    t   = (*state)[i][0];
 8001076:	7819      	ldrb	r1, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8001078:	406a      	eors	r2, r5
 800107a:	404c      	eors	r4, r1
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800107c:	09e5      	lsrs	r5, r4, #7
 800107e:	0068      	lsls	r0, r5, #1
 8001080:	182d      	adds	r5, r5, r0
 8001082:	00e8      	lsls	r0, r5, #3
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8001084:	4062      	eors	r2, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001086:	182d      	adds	r5, r5, r0
 8001088:	0064      	lsls	r4, r4, #1
 800108a:	4065      	eors	r5, r4
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800108c:	000c      	movs	r4, r1
 800108e:	4054      	eors	r4, r2
 8001090:	4065      	eors	r5, r4
 8001092:	701d      	strb	r5, [r3, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8001094:	785d      	ldrb	r5, [r3, #1]
 8001096:	7898      	ldrb	r0, [r3, #2]
 8001098:	002c      	movs	r4, r5
 800109a:	4044      	eors	r4, r0
 800109c:	46a2      	mov	sl, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800109e:	09e4      	lsrs	r4, r4, #7
 80010a0:	0066      	lsls	r6, r4, #1
 80010a2:	46b3      	mov	fp, r6
 80010a4:	445c      	add	r4, fp
 80010a6:	00e6      	lsls	r6, r4, #3
 80010a8:	46b3      	mov	fp, r6
 80010aa:	4656      	mov	r6, sl
 80010ac:	445c      	add	r4, fp
 80010ae:	0076      	lsls	r6, r6, #1
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80010b0:	4055      	eors	r5, r2
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010b2:	4074      	eors	r4, r6
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80010b4:	406c      	eors	r4, r5
 80010b6:	705c      	strb	r4, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80010b8:	0004      	movs	r4, r0
 80010ba:	78dd      	ldrb	r5, [r3, #3]
 80010bc:	4050      	eors	r0, r2
 80010be:	406c      	eors	r4, r5
 80010c0:	46a2      	mov	sl, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010c2:	09e4      	lsrs	r4, r4, #7
 80010c4:	0066      	lsls	r6, r4, #1
 80010c6:	46b3      	mov	fp, r6
 80010c8:	445c      	add	r4, fp
 80010ca:	00e6      	lsls	r6, r4, #3
 80010cc:	46b3      	mov	fp, r6
 80010ce:	4656      	mov	r6, sl
 80010d0:	445c      	add	r4, fp
 80010d2:	0076      	lsls	r6, r6, #1
 80010d4:	4074      	eors	r4, r6
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80010d6:	4044      	eors	r4, r0
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010d8:	4069      	eors	r1, r5
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80010da:	709c      	strb	r4, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010dc:	000c      	movs	r4, r1
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010de:	09c9      	lsrs	r1, r1, #7
 80010e0:	0048      	lsls	r0, r1, #1
 80010e2:	4680      	mov	r8, r0
 80010e4:	4441      	add	r1, r8
 80010e6:	00c8      	lsls	r0, r1, #3
 80010e8:	4680      	mov	r8, r0
 80010ea:	0064      	lsls	r4, r4, #1
 80010ec:	4441      	add	r1, r8
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010ee:	406a      	eors	r2, r5
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010f0:	4061      	eors	r1, r4
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010f2:	4051      	eors	r1, r2
  for (i = 0; i < 4; ++i)
 80010f4:	9a00      	ldr	r2, [sp, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010f6:	70d9      	strb	r1, [r3, #3]
  for (i = 0; i < 4; ++i)
 80010f8:	3304      	adds	r3, #4
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d003      	beq.n	8001106 <Cipher+0x13a>
 80010fe:	785c      	ldrb	r4, [r3, #1]
 8001100:	789a      	ldrb	r2, [r3, #2]
 8001102:	78dd      	ldrb	r5, [r3, #3]
 8001104:	e7b7      	b.n	8001076 <Cipher+0xaa>
 8001106:	9b00      	ldr	r3, [sp, #0]
 8001108:	9802      	ldr	r0, [sp, #8]
 800110a:	4698      	mov	r8, r3
 800110c:	4663      	mov	r3, ip
 800110e:	009c      	lsls	r4, r3, #2
 8001110:	9b04      	ldr	r3, [sp, #16]
 8001112:	0001      	movs	r1, r0
 8001114:	469a      	mov	sl, r3
 8001116:	4646      	mov	r6, r8
 8001118:	4454      	add	r4, sl
    for (j = 0; j < 4; ++j)
 800111a:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 800111c:	5cca      	ldrb	r2, [r1, r3]
 800111e:	5ce5      	ldrb	r5, [r4, r3]
 8001120:	406a      	eors	r2, r5
 8001122:	54ca      	strb	r2, [r1, r3]
    for (j = 0; j < 4; ++j)
 8001124:	3301      	adds	r3, #1
 8001126:	2b04      	cmp	r3, #4
 8001128:	d1f8      	bne.n	800111c <Cipher+0x150>
  for (i = 0; i < 4; ++i)
 800112a:	3104      	adds	r1, #4
 800112c:	3404      	adds	r4, #4
 800112e:	428e      	cmp	r6, r1
 8001130:	d1f3      	bne.n	800111a <Cipher+0x14e>
 8001132:	2304      	movs	r3, #4
 8001134:	469a      	mov	sl, r3
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	46b0      	mov	r8, r6
  for (round = 1; ; ++round)
 800113a:	3310      	adds	r3, #16
 800113c:	44d4      	add	ip, sl
 800113e:	9301      	str	r3, [sp, #4]
    SubBytes(state);
 8001140:	e76b      	b.n	800101a <Cipher+0x4e>
    if (round == Nr) {
 8001142:	24a0      	movs	r4, #160	; 0xa0
 8001144:	9904      	ldr	r1, [sp, #16]
 8001146:	9805      	ldr	r0, [sp, #20]
 8001148:	31a0      	adds	r1, #160	; 0xa0
  for (i = 0; i < 4; ++i)
 800114a:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 800114c:	5cc2      	ldrb	r2, [r0, r3]
 800114e:	5ccd      	ldrb	r5, [r1, r3]
 8001150:	406a      	eors	r2, r5
 8001152:	54c2      	strb	r2, [r0, r3]
    for (j = 0; j < 4; ++j)
 8001154:	3301      	adds	r3, #1
 8001156:	2b04      	cmp	r3, #4
 8001158:	d1f8      	bne.n	800114c <Cipher+0x180>
  for (i = 0; i < 4; ++i)
 800115a:	3404      	adds	r4, #4
 800115c:	3004      	adds	r0, #4
 800115e:	3104      	adds	r1, #4
 8001160:	2cb0      	cmp	r4, #176	; 0xb0
 8001162:	d1f2      	bne.n	800114a <Cipher+0x17e>
    MixColumns(state);
    AddRoundKey(round, state, RoundKey);
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
}
 8001164:	b007      	add	sp, #28
 8001166:	bc3c      	pop	{r2, r3, r4, r5}
 8001168:	4690      	mov	r8, r2
 800116a:	4699      	mov	r9, r3
 800116c:	46a2      	mov	sl, r4
 800116e:	46ab      	mov	fp, r5
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	08001ac4 	.word	0x08001ac4

08001178 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	464e      	mov	r6, r9
 800117c:	4645      	mov	r5, r8
 800117e:	46de      	mov	lr, fp
 8001180:	4657      	mov	r7, sl
 8001182:	b5e0      	push	{r5, r6, r7, lr}
 8001184:	000d      	movs	r5, r1
 8001186:	4681      	mov	r9, r0
 8001188:	26a0      	movs	r6, #160	; 0xa0
 800118a:	b08f      	sub	sp, #60	; 0x3c
 800118c:	35a0      	adds	r5, #160	; 0xa0
 800118e:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8001190:	5cc2      	ldrb	r2, [r0, r3]
 8001192:	5cec      	ldrb	r4, [r5, r3]
 8001194:	4062      	eors	r2, r4
 8001196:	54c2      	strb	r2, [r0, r3]
    for (j = 0; j < 4; ++j)
 8001198:	3301      	adds	r3, #1
 800119a:	2b04      	cmp	r3, #4
 800119c:	d1f8      	bne.n	8001190 <InvCipher+0x18>
  for (i = 0; i < 4; ++i)
 800119e:	3604      	adds	r6, #4
 80011a0:	3004      	adds	r0, #4
 80011a2:	3504      	adds	r5, #4
 80011a4:	2eb0      	cmp	r6, #176	; 0xb0
 80011a6:	d1f2      	bne.n	800118e <InvCipher+0x16>
 80011a8:	464a      	mov	r2, r9
 80011aa:	338c      	adds	r3, #140	; 0x8c
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	9309      	str	r3, [sp, #36]	; 0x24
 80011b0:	4253      	negs	r3, r2
 80011b2:	930c      	str	r3, [sp, #48]	; 0x30
 80011b4:	2310      	movs	r3, #16
 80011b6:	444b      	add	r3, r9
 80011b8:	9308      	str	r3, [sp, #32]
 80011ba:	2314      	movs	r3, #20
 80011bc:	3190      	adds	r1, #144	; 0x90
 80011be:	444b      	add	r3, r9
 80011c0:	910a      	str	r1, [sp, #40]	; 0x28
 80011c2:	930d      	str	r3, [sp, #52]	; 0x34
  (*state)[3][1] = (*state)[2][1];
 80011c4:	464a      	mov	r2, r9
 80011c6:	4649      	mov	r1, r9
  temp = (*state)[3][1];
 80011c8:	464b      	mov	r3, r9
  (*state)[3][1] = (*state)[2][1];
 80011ca:	7a52      	ldrb	r2, [r2, #9]
  temp = (*state)[3][1];
 80011cc:	7b5b      	ldrb	r3, [r3, #13]
  (*state)[3][1] = (*state)[2][1];
 80011ce:	734a      	strb	r2, [r1, #13]
  (*state)[2][1] = (*state)[1][1];
 80011d0:	794a      	ldrb	r2, [r1, #5]
 80011d2:	724a      	strb	r2, [r1, #9]
  (*state)[1][1] = (*state)[0][1];
 80011d4:	784a      	ldrb	r2, [r1, #1]
  (*state)[0][1] = temp;
 80011d6:	704b      	strb	r3, [r1, #1]
  (*state)[1][1] = (*state)[0][1];
 80011d8:	714a      	strb	r2, [r1, #5]
  (*state)[0][2] = (*state)[2][2];
 80011da:	7a8a      	ldrb	r2, [r1, #10]
  temp = (*state)[0][2];
 80011dc:	788b      	ldrb	r3, [r1, #2]
  (*state)[0][2] = (*state)[2][2];
 80011de:	708a      	strb	r2, [r1, #2]
  (*state)[1][2] = (*state)[3][2];
 80011e0:	7b8a      	ldrb	r2, [r1, #14]
  (*state)[2][2] = temp;
 80011e2:	728b      	strb	r3, [r1, #10]
  temp = (*state)[1][2];
 80011e4:	798b      	ldrb	r3, [r1, #6]
  (*state)[1][2] = (*state)[3][2];
 80011e6:	718a      	strb	r2, [r1, #6]
  (*state)[0][3] = (*state)[1][3];
 80011e8:	79ca      	ldrb	r2, [r1, #7]
  (*state)[3][2] = temp;
 80011ea:	738b      	strb	r3, [r1, #14]
  temp = (*state)[0][3];
 80011ec:	78cb      	ldrb	r3, [r1, #3]
  (*state)[0][3] = (*state)[1][3];
 80011ee:	70ca      	strb	r2, [r1, #3]
  (*state)[1][3] = (*state)[2][3];
 80011f0:	7aca      	ldrb	r2, [r1, #11]
 80011f2:	71ca      	strb	r2, [r1, #7]
  (*state)[2][3] = (*state)[3][3];
 80011f4:	7bca      	ldrb	r2, [r1, #15]
  (*state)[3][3] = temp;
 80011f6:	73cb      	strb	r3, [r1, #15]
  (*state)[2][3] = (*state)[3][3];
 80011f8:	72ca      	strb	r2, [r1, #11]
  (*state)[3][3] = temp;
 80011fa:	9a08      	ldr	r2, [sp, #32]
 80011fc:	980d      	ldr	r0, [sp, #52]	; 0x34
    for (j = 0; j < 4; ++j)
 80011fe:	0013      	movs	r3, r2
 8001200:	3b10      	subs	r3, #16
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8001202:	7819      	ldrb	r1, [r3, #0]
 8001204:	4c7a      	ldr	r4, [pc, #488]	; (80013f0 <InvCipher+0x278>)
 8001206:	5c61      	ldrb	r1, [r4, r1]
 8001208:	7019      	strb	r1, [r3, #0]
    for (j = 0; j < 4; ++j)
 800120a:	3304      	adds	r3, #4
 800120c:	429a      	cmp	r2, r3
 800120e:	d1f8      	bne.n	8001202 <InvCipher+0x8a>
  for (i = 0; i < 4; ++i)
 8001210:	3201      	adds	r2, #1
 8001212:	4290      	cmp	r0, r2
 8001214:	d1f3      	bne.n	80011fe <InvCipher+0x86>
 8001216:	4649      	mov	r1, r9
 8001218:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800121a:	9d08      	ldr	r5, [sp, #32]
  (*state)[3][3] = temp;
 800121c:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 800121e:	5cca      	ldrb	r2, [r1, r3]
 8001220:	5ce0      	ldrb	r0, [r4, r3]
 8001222:	4042      	eors	r2, r0
 8001224:	54ca      	strb	r2, [r1, r3]
    for (j = 0; j < 4; ++j)
 8001226:	3301      	adds	r3, #1
 8001228:	2b04      	cmp	r3, #4
 800122a:	d1f8      	bne.n	800121e <InvCipher+0xa6>
  for (i = 0; i < 4; ++i)
 800122c:	3104      	adds	r1, #4
 800122e:	3404      	adds	r4, #4
 8001230:	428d      	cmp	r5, r1
 8001232:	d1f3      	bne.n	800121c <InvCipher+0xa4>
  for (round = (Nr - 1); ; --round)
  {
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(round, state, RoundKey);
    if (round == 0) {
 8001234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001238:	4293      	cmp	r3, r2
 800123a:	d100      	bne.n	800123e <InvCipher+0xc6>
 800123c:	e0d0      	b.n	80013e0 <InvCipher+0x268>
 800123e:	464b      	mov	r3, r9
 8001240:	46ca      	mov	sl, r9
 8001242:	930b      	str	r3, [sp, #44]	; 0x2c
    b = (*state)[i][1];
 8001244:	4652      	mov	r2, sl
    a = (*state)[i][0];
 8001246:	4653      	mov	r3, sl
    b = (*state)[i][1];
 8001248:	7850      	ldrb	r0, [r2, #1]
    c = (*state)[i][2];
 800124a:	7892      	ldrb	r2, [r2, #2]
    a = (*state)[i][0];
 800124c:	781b      	ldrb	r3, [r3, #0]
    c = (*state)[i][2];
 800124e:	4693      	mov	fp, r2
    d = (*state)[i][3];
 8001250:	4652      	mov	r2, sl
    a = (*state)[i][0];
 8001252:	0019      	movs	r1, r3
    d = (*state)[i][3];
 8001254:	78d2      	ldrb	r2, [r2, #3]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001256:	09db      	lsrs	r3, r3, #7
    d = (*state)[i][3];
 8001258:	4691      	mov	r9, r2
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800125a:	005a      	lsls	r2, r3, #1
 800125c:	189b      	adds	r3, r3, r2
 800125e:	00da      	lsls	r2, r3, #3
 8001260:	189b      	adds	r3, r3, r2
 8001262:	004a      	lsls	r2, r1, #1
 8001264:	4053      	eors	r3, r2
 8001266:	b2dc      	uxtb	r4, r3
 8001268:	09e3      	lsrs	r3, r4, #7
 800126a:	005a      	lsls	r2, r3, #1
 800126c:	189b      	adds	r3, r3, r2
 800126e:	00da      	lsls	r2, r3, #3
 8001270:	189b      	adds	r3, r3, r2
 8001272:	0062      	lsls	r2, r4, #1
 8001274:	4053      	eors	r3, r2
 8001276:	b2dd      	uxtb	r5, r3
 8001278:	09eb      	lsrs	r3, r5, #7
 800127a:	005a      	lsls	r2, r3, #1
 800127c:	189b      	adds	r3, r3, r2
 800127e:	00df      	lsls	r7, r3, #3
 8001280:	19db      	adds	r3, r3, r7
 8001282:	006f      	lsls	r7, r5, #1
 8001284:	407b      	eors	r3, r7
 8001286:	b2de      	uxtb	r6, r3
 8001288:	09c3      	lsrs	r3, r0, #7
 800128a:	005a      	lsls	r2, r3, #1
 800128c:	189b      	adds	r3, r3, r2
 800128e:	00da      	lsls	r2, r3, #3
 8001290:	189b      	adds	r3, r3, r2
 8001292:	0042      	lsls	r2, r0, #1
 8001294:	4053      	eors	r3, r2
 8001296:	b2db      	uxtb	r3, r3
 8001298:	9004      	str	r0, [sp, #16]
 800129a:	09d8      	lsrs	r0, r3, #7
 800129c:	0042      	lsls	r2, r0, #1
 800129e:	1880      	adds	r0, r0, r2
 80012a0:	00c2      	lsls	r2, r0, #3
 80012a2:	1880      	adds	r0, r0, r2
 80012a4:	005a      	lsls	r2, r3, #1
 80012a6:	4050      	eors	r0, r2
 80012a8:	b2c0      	uxtb	r0, r0
 80012aa:	9602      	str	r6, [sp, #8]
 80012ac:	09c6      	lsrs	r6, r0, #7
 80012ae:	0077      	lsls	r7, r6, #1
 80012b0:	19f6      	adds	r6, r6, r7
 80012b2:	00f7      	lsls	r7, r6, #3
 80012b4:	19f7      	adds	r7, r6, r7
 80012b6:	0046      	lsls	r6, r0, #1
 80012b8:	4077      	eors	r7, r6
 80012ba:	465e      	mov	r6, fp
 80012bc:	09f2      	lsrs	r2, r6, #7
 80012be:	9405      	str	r4, [sp, #20]
 80012c0:	0054      	lsls	r4, r2, #1
 80012c2:	1912      	adds	r2, r2, r4
 80012c4:	00d4      	lsls	r4, r2, #3
 80012c6:	1914      	adds	r4, r2, r4
 80012c8:	0072      	lsls	r2, r6, #1
 80012ca:	4054      	eors	r4, r2
 80012cc:	b2e4      	uxtb	r4, r4
 80012ce:	9103      	str	r1, [sp, #12]
 80012d0:	09e1      	lsrs	r1, r4, #7
 80012d2:	004a      	lsls	r2, r1, #1
 80012d4:	1889      	adds	r1, r1, r2
 80012d6:	00ca      	lsls	r2, r1, #3
 80012d8:	188a      	adds	r2, r1, r2
 80012da:	0061      	lsls	r1, r4, #1
 80012dc:	404a      	eors	r2, r1
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	9507      	str	r5, [sp, #28]
 80012e2:	09d5      	lsrs	r5, r2, #7
 80012e4:	006e      	lsls	r6, r5, #1
 80012e6:	19ad      	adds	r5, r5, r6
 80012e8:	00ee      	lsls	r6, r5, #3
 80012ea:	9206      	str	r2, [sp, #24]
 80012ec:	19ae      	adds	r6, r5, r6
 80012ee:	0055      	lsls	r5, r2, #1
 80012f0:	464a      	mov	r2, r9
 80012f2:	406e      	eors	r6, r5
 80012f4:	09d5      	lsrs	r5, r2, #7
 80012f6:	0069      	lsls	r1, r5, #1
 80012f8:	186d      	adds	r5, r5, r1
 80012fa:	00e9      	lsls	r1, r5, #3
 80012fc:	1869      	adds	r1, r5, r1
 80012fe:	0055      	lsls	r5, r2, #1
 8001300:	4069      	eors	r1, r5
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	09d5      	lsrs	r5, r2, #7
 8001306:	0069      	lsls	r1, r5, #1
 8001308:	186d      	adds	r5, r5, r1
 800130a:	00e9      	lsls	r1, r5, #3
 800130c:	1869      	adds	r1, r5, r1
 800130e:	0055      	lsls	r5, r2, #1
 8001310:	4069      	eors	r1, r5
 8001312:	4690      	mov	r8, r2
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	09d1      	lsrs	r1, r2, #7
 8001318:	004d      	lsls	r5, r1, #1
 800131a:	1949      	adds	r1, r1, r5
 800131c:	00cd      	lsls	r5, r1, #3
 800131e:	4694      	mov	ip, r2
 8001320:	194d      	adds	r5, r1, r5
 8001322:	0051      	lsls	r1, r2, #1
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8001324:	465a      	mov	r2, fp
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001326:	404d      	eors	r5, r1
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8001328:	9904      	ldr	r1, [sp, #16]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800132a:	b2ed      	uxtb	r5, r5
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800132c:	4051      	eors	r1, r2
 800132e:	464a      	mov	r2, r9
 8001330:	4051      	eors	r1, r2
 8001332:	9a05      	ldr	r2, [sp, #20]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001334:	9501      	str	r5, [sp, #4]
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8001336:	4051      	eors	r1, r2
 8001338:	9a07      	ldr	r2, [sp, #28]
 800133a:	9d06      	ldr	r5, [sp, #24]
 800133c:	4059      	eors	r1, r3
 800133e:	4051      	eors	r1, r2
 8001340:	4069      	eors	r1, r5
 8001342:	9d02      	ldr	r5, [sp, #8]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001344:	b2ff      	uxtb	r7, r7
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8001346:	4069      	eors	r1, r5
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001348:	b2f6      	uxtb	r6, r6
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800134a:	9d01      	ldr	r5, [sp, #4]
 800134c:	4079      	eors	r1, r7
 800134e:	4071      	eors	r1, r6
 8001350:	4069      	eors	r1, r5
 8001352:	4655      	mov	r5, sl
 8001354:	7029      	strb	r1, [r5, #0]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8001356:	465d      	mov	r5, fp
 8001358:	9903      	ldr	r1, [sp, #12]
 800135a:	4069      	eors	r1, r5
 800135c:	464d      	mov	r5, r9
 800135e:	4069      	eors	r1, r5
 8001360:	4665      	mov	r5, ip
 8001362:	404b      	eors	r3, r1
 8001364:	4063      	eors	r3, r4
 8001366:	4043      	eors	r3, r0
 8001368:	406b      	eors	r3, r5
 800136a:	9d02      	ldr	r5, [sp, #8]
 800136c:	9904      	ldr	r1, [sp, #16]
 800136e:	406b      	eors	r3, r5
 8001370:	407b      	eors	r3, r7
 8001372:	9d01      	ldr	r5, [sp, #4]
 8001374:	4073      	eors	r3, r6
 8001376:	406b      	eors	r3, r5
 8001378:	4655      	mov	r5, sl
 800137a:	706b      	strb	r3, [r5, #1]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800137c:	9b03      	ldr	r3, [sp, #12]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800137e:	9d01      	ldr	r5, [sp, #4]
 8001380:	404b      	eors	r3, r1
 8001382:	4649      	mov	r1, r9
 8001384:	4059      	eors	r1, r3
 8001386:	404c      	eors	r4, r1
 8001388:	4641      	mov	r1, r8
 800138a:	404c      	eors	r4, r1
 800138c:	4054      	eors	r4, r2
 800138e:	9a06      	ldr	r2, [sp, #24]
 8001390:	9902      	ldr	r1, [sp, #8]
 8001392:	4054      	eors	r4, r2
 8001394:	404c      	eors	r4, r1
 8001396:	407c      	eors	r4, r7
 8001398:	4074      	eors	r4, r6
 800139a:	406c      	eors	r4, r5
 800139c:	4655      	mov	r5, sl
 800139e:	70ac      	strb	r4, [r5, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80013a0:	465d      	mov	r5, fp
 80013a2:	9a05      	ldr	r2, [sp, #20]
 80013a4:	406b      	eors	r3, r5
 80013a6:	4053      	eors	r3, r2
 80013a8:	4642      	mov	r2, r8
 80013aa:	4053      	eors	r3, r2
 80013ac:	4058      	eors	r0, r3
 80013ae:	4663      	mov	r3, ip
 80013b0:	4058      	eors	r0, r3
 80013b2:	4653      	mov	r3, sl
 80013b4:	4048      	eors	r0, r1
 80013b6:	9d01      	ldr	r5, [sp, #4]
 80013b8:	4047      	eors	r7, r0
 80013ba:	407e      	eors	r6, r7
 80013bc:	4075      	eors	r5, r6
 80013be:	70dd      	strb	r5, [r3, #3]
  for (i = 0; i < 4; ++i)
 80013c0:	2304      	movs	r3, #4
 80013c2:	469c      	mov	ip, r3
 80013c4:	9b08      	ldr	r3, [sp, #32]
 80013c6:	44e2      	add	sl, ip
 80013c8:	4553      	cmp	r3, sl
 80013ca:	d000      	beq.n	80013ce <InvCipher+0x256>
 80013cc:	e73a      	b.n	8001244 <InvCipher+0xcc>
 80013ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013d0:	4699      	mov	r9, r3
  for (round = (Nr - 1); ; --round)
 80013d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013d4:	3b10      	subs	r3, #16
 80013d6:	930a      	str	r3, [sp, #40]	; 0x28
 80013d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013da:	3b10      	subs	r3, #16
 80013dc:	9309      	str	r3, [sp, #36]	; 0x24
    InvShiftRows(state);
 80013de:	e6f1      	b.n	80011c4 <InvCipher+0x4c>
      break;
    }
    InvMixColumns(state);
  }

}
 80013e0:	b00f      	add	sp, #60	; 0x3c
 80013e2:	bc3c      	pop	{r2, r3, r4, r5}
 80013e4:	4690      	mov	r8, r2
 80013e6:	4699      	mov	r9, r3
 80013e8:	46a2      	mov	sl, r4
 80013ea:	46ab      	mov	fp, r5
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	080019c4 	.word	0x080019c4

080013f4 <AES_init_ctx>:
{
 80013f4:	b510      	push	{r4, lr}
  KeyExpansion(ctx->RoundKey, key);
 80013f6:	f7ff fda7 	bl	8000f48 <KeyExpansion>
}
 80013fa:	bd10      	pop	{r4, pc}

080013fc <AES_init_ctx_iv>:
{
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	0004      	movs	r4, r0
 8001400:	0015      	movs	r5, r2
  KeyExpansion(ctx->RoundKey, key);
 8001402:	f7ff fda1 	bl	8000f48 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8001406:	0020      	movs	r0, r4
 8001408:	0029      	movs	r1, r5
 800140a:	2210      	movs	r2, #16
 800140c:	30b0      	adds	r0, #176	; 0xb0
 800140e:	f000 f8a7 	bl	8001560 <memcpy>
}
 8001412:	bd70      	pop	{r4, r5, r6, pc}

08001414 <AES_ctx_set_iv>:
{
 8001414:	b510      	push	{r4, lr}
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8001416:	2210      	movs	r2, #16
 8001418:	30b0      	adds	r0, #176	; 0xb0
 800141a:	f000 f8a1 	bl	8001560 <memcpy>
}
 800141e:	bd10      	pop	{r4, pc}

08001420 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8001420:	0003      	movs	r3, r0
 8001422:	b510      	push	{r4, lr}
 8001424:	0008      	movs	r0, r1
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8001426:	0019      	movs	r1, r3
 8001428:	f7ff fdd0 	bl	8000fcc <Cipher>
}
 800142c:	bd10      	pop	{r4, pc}
 800142e:	46c0      	nop			; (mov r8, r8)

08001430 <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8001430:	0003      	movs	r3, r0
 8001432:	b510      	push	{r4, lr}
 8001434:	0008      	movs	r0, r1
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8001436:	0019      	movs	r1, r3
 8001438:	f7ff fe9e 	bl	8001178 <InvCipher>
}
 800143c:	bd10      	pop	{r4, pc}
 800143e:	46c0      	nop			; (mov r8, r8)

08001440 <AES_CBC_encrypt_buffer>:
}

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
  size_t i;
  uint8_t *Iv = ctx->Iv;
 8001440:	23b0      	movs	r3, #176	; 0xb0
{
 8001442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001444:	46d6      	mov	lr, sl
  uint8_t *Iv = ctx->Iv;
 8001446:	469a      	mov	sl, r3
{
 8001448:	464f      	mov	r7, r9
 800144a:	4646      	mov	r6, r8
  uint8_t *Iv = ctx->Iv;
 800144c:	4482      	add	sl, r0
{
 800144e:	b5c0      	push	{r6, r7, lr}
 8001450:	4689      	mov	r9, r1
 8001452:	0007      	movs	r7, r0
 8001454:	4690      	mov	r8, r2
  uint8_t *Iv = ctx->Iv;
 8001456:	4655      	mov	r5, sl
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001458:	2a00      	cmp	r2, #0
 800145a:	d012      	beq.n	8001482 <AES_CBC_encrypt_buffer+0x42>
 800145c:	2600      	movs	r6, #0
 800145e:	464b      	mov	r3, r9
 8001460:	0029      	movs	r1, r5
 8001462:	199d      	adds	r5, r3, r6
 8001464:	2300      	movs	r3, #0
    buf[i] ^= Iv[i];
 8001466:	5cec      	ldrb	r4, [r5, r3]
 8001468:	5cca      	ldrb	r2, [r1, r3]
 800146a:	4054      	eors	r4, r2
 800146c:	54ec      	strb	r4, [r5, r3]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 800146e:	3301      	adds	r3, #1
 8001470:	2b10      	cmp	r3, #16
 8001472:	d1f8      	bne.n	8001466 <AES_CBC_encrypt_buffer+0x26>
  {
    XorWithIv(buf, Iv);
    Cipher((state_t*)buf, ctx->RoundKey);
 8001474:	0039      	movs	r1, r7
 8001476:	0028      	movs	r0, r5
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001478:	3610      	adds	r6, #16
    Cipher((state_t*)buf, ctx->RoundKey);
 800147a:	f7ff fda7 	bl	8000fcc <Cipher>
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800147e:	45b0      	cmp	r8, r6
 8001480:	d8ed      	bhi.n	800145e <AES_CBC_encrypt_buffer+0x1e>
    Iv = buf;
    buf += AES_BLOCKLEN;
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8001482:	0029      	movs	r1, r5
 8001484:	4650      	mov	r0, sl
 8001486:	2210      	movs	r2, #16
 8001488:	f000 f86a 	bl	8001560 <memcpy>
}
 800148c:	bc1c      	pop	{r2, r3, r4}
 800148e:	4690      	mov	r8, r2
 8001490:	4699      	mov	r9, r3
 8001492:	46a2      	mov	sl, r4
 8001494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)

08001498 <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	46ce      	mov	lr, r9
 800149c:	4647      	mov	r7, r8
 800149e:	b580      	push	{r7, lr}
 80014a0:	4681      	mov	r9, r0
 80014a2:	000d      	movs	r5, r1
 80014a4:	4690      	mov	r8, r2
 80014a6:	b085      	sub	sp, #20
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	d01c      	beq.n	80014e6 <AES_CBC_decrypt_buffer+0x4e>
 80014ac:	0006      	movs	r6, r0
 80014ae:	2700      	movs	r7, #0
 80014b0:	36b0      	adds	r6, #176	; 0xb0
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 80014b2:	2210      	movs	r2, #16
 80014b4:	0029      	movs	r1, r5
 80014b6:	4668      	mov	r0, sp
 80014b8:	f000 f852 	bl	8001560 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 80014bc:	4649      	mov	r1, r9
 80014be:	0028      	movs	r0, r5
 80014c0:	f7ff fe5a 	bl	8001178 <InvCipher>
 80014c4:	2300      	movs	r3, #0
    buf[i] ^= Iv[i];
 80014c6:	5cf4      	ldrb	r4, [r6, r3]
 80014c8:	5cea      	ldrb	r2, [r5, r3]
 80014ca:	4054      	eors	r4, r2
 80014cc:	54ec      	strb	r4, [r5, r3]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 80014ce:	3301      	adds	r3, #1
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d1f8      	bne.n	80014c6 <AES_CBC_decrypt_buffer+0x2e>
    XorWithIv(buf, ctx->Iv);
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 80014d4:	2210      	movs	r2, #16
 80014d6:	4669      	mov	r1, sp
 80014d8:	0030      	movs	r0, r6
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80014da:	3710      	adds	r7, #16
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 80014dc:	f000 f840 	bl	8001560 <memcpy>
    buf += AES_BLOCKLEN;
 80014e0:	3510      	adds	r5, #16
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80014e2:	45b8      	cmp	r8, r7
 80014e4:	d8e5      	bhi.n	80014b2 <AES_CBC_decrypt_buffer+0x1a>
  }

}
 80014e6:	b005      	add	sp, #20
 80014e8:	bc0c      	pop	{r2, r3}
 80014ea:	4690      	mov	r8, r2
 80014ec:	4699      	mov	r9, r3
 80014ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014f0 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	46c6      	mov	lr, r8
 80014f4:	b500      	push	{lr}
 80014f6:	0006      	movs	r6, r0
 80014f8:	b084      	sub	sp, #16
  uint8_t buffer[AES_BLOCKLEN];
  
  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d012      	beq.n	8001524 <AES_CTR_xcrypt_buffer+0x34>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
	{
          ctx->Iv[bi] = 0;
 80014fe:	2300      	movs	r3, #0
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8001500:	0007      	movs	r7, r0
 8001502:	000c      	movs	r4, r1
 8001504:	188d      	adds	r5, r1, r2
          ctx->Iv[bi] = 0;
 8001506:	4698      	mov	r8, r3
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8001508:	2110      	movs	r1, #16
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 800150a:	37b0      	adds	r7, #176	; 0xb0
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 800150c:	2910      	cmp	r1, #16
 800150e:	d00d      	beq.n	800152c <AES_CTR_xcrypt_buffer+0x3c>
 8001510:	000a      	movs	r2, r1
 8001512:	3101      	adds	r1, #1
        break;   
      }
      bi = 0;
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8001514:	4668      	mov	r0, sp
 8001516:	7823      	ldrb	r3, [r4, #0]
 8001518:	5c82      	ldrb	r2, [r0, r2]
 800151a:	4053      	eors	r3, r2
 800151c:	7023      	strb	r3, [r4, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 800151e:	3401      	adds	r4, #1
 8001520:	42ac      	cmp	r4, r5
 8001522:	d1f3      	bne.n	800150c <AES_CTR_xcrypt_buffer+0x1c>
  }
}
 8001524:	b004      	add	sp, #16
 8001526:	bc04      	pop	{r2}
 8001528:	4690      	mov	r8, r2
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 800152c:	2210      	movs	r2, #16
 800152e:	0039      	movs	r1, r7
 8001530:	4668      	mov	r0, sp
 8001532:	f000 f815 	bl	8001560 <memcpy>
      Cipher((state_t*)buffer,ctx->RoundKey);
 8001536:	0031      	movs	r1, r6
 8001538:	4668      	mov	r0, sp
 800153a:	f7ff fd47 	bl	8000fcc <Cipher>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 800153e:	230f      	movs	r3, #15
        if (ctx->Iv[bi] == 255)
 8001540:	5cfa      	ldrb	r2, [r7, r3]
 8001542:	2aff      	cmp	r2, #255	; 0xff
 8001544:	d006      	beq.n	8001554 <AES_CTR_xcrypt_buffer+0x64>
        ctx->Iv[bi] += 1;
 8001546:	18f3      	adds	r3, r6, r3
 8001548:	33b0      	adds	r3, #176	; 0xb0
 800154a:	3201      	adds	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
        break;   
 800154e:	2101      	movs	r1, #1
      bi = 0;
 8001550:	2200      	movs	r2, #0
        break;   
 8001552:	e7df      	b.n	8001514 <AES_CTR_xcrypt_buffer+0x24>
          ctx->Iv[bi] = 0;
 8001554:	4642      	mov	r2, r8
 8001556:	54fa      	strb	r2, [r7, r3]
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8001558:	3b01      	subs	r3, #1
 800155a:	d2f1      	bcs.n	8001540 <AES_CTR_xcrypt_buffer+0x50>
 800155c:	e7f7      	b.n	800154e <AES_CTR_xcrypt_buffer+0x5e>
 800155e:	46c0      	nop			; (mov r8, r8)

08001560 <memcpy>:
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	46c6      	mov	lr, r8
 8001564:	b500      	push	{lr}
 8001566:	2a0f      	cmp	r2, #15
 8001568:	d943      	bls.n	80015f2 <memcpy+0x92>
 800156a:	000b      	movs	r3, r1
 800156c:	2603      	movs	r6, #3
 800156e:	4303      	orrs	r3, r0
 8001570:	401e      	ands	r6, r3
 8001572:	000c      	movs	r4, r1
 8001574:	0003      	movs	r3, r0
 8001576:	2e00      	cmp	r6, #0
 8001578:	d140      	bne.n	80015fc <memcpy+0x9c>
 800157a:	0015      	movs	r5, r2
 800157c:	3d10      	subs	r5, #16
 800157e:	092d      	lsrs	r5, r5, #4
 8001580:	46ac      	mov	ip, r5
 8001582:	012d      	lsls	r5, r5, #4
 8001584:	46a8      	mov	r8, r5
 8001586:	4480      	add	r8, r0
 8001588:	e000      	b.n	800158c <memcpy+0x2c>
 800158a:	003b      	movs	r3, r7
 800158c:	6867      	ldr	r7, [r4, #4]
 800158e:	6825      	ldr	r5, [r4, #0]
 8001590:	605f      	str	r7, [r3, #4]
 8001592:	68e7      	ldr	r7, [r4, #12]
 8001594:	601d      	str	r5, [r3, #0]
 8001596:	60df      	str	r7, [r3, #12]
 8001598:	001f      	movs	r7, r3
 800159a:	68a5      	ldr	r5, [r4, #8]
 800159c:	3710      	adds	r7, #16
 800159e:	609d      	str	r5, [r3, #8]
 80015a0:	3410      	adds	r4, #16
 80015a2:	4543      	cmp	r3, r8
 80015a4:	d1f1      	bne.n	800158a <memcpy+0x2a>
 80015a6:	4665      	mov	r5, ip
 80015a8:	230f      	movs	r3, #15
 80015aa:	240c      	movs	r4, #12
 80015ac:	3501      	adds	r5, #1
 80015ae:	012d      	lsls	r5, r5, #4
 80015b0:	1949      	adds	r1, r1, r5
 80015b2:	4013      	ands	r3, r2
 80015b4:	1945      	adds	r5, r0, r5
 80015b6:	4214      	tst	r4, r2
 80015b8:	d023      	beq.n	8001602 <memcpy+0xa2>
 80015ba:	598c      	ldr	r4, [r1, r6]
 80015bc:	51ac      	str	r4, [r5, r6]
 80015be:	3604      	adds	r6, #4
 80015c0:	1b9c      	subs	r4, r3, r6
 80015c2:	2c03      	cmp	r4, #3
 80015c4:	d8f9      	bhi.n	80015ba <memcpy+0x5a>
 80015c6:	2403      	movs	r4, #3
 80015c8:	3b04      	subs	r3, #4
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3301      	adds	r3, #1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4022      	ands	r2, r4
 80015d2:	18ed      	adds	r5, r5, r3
 80015d4:	18c9      	adds	r1, r1, r3
 80015d6:	1e56      	subs	r6, r2, #1
 80015d8:	2a00      	cmp	r2, #0
 80015da:	d007      	beq.n	80015ec <memcpy+0x8c>
 80015dc:	2300      	movs	r3, #0
 80015de:	e000      	b.n	80015e2 <memcpy+0x82>
 80015e0:	0023      	movs	r3, r4
 80015e2:	5cca      	ldrb	r2, [r1, r3]
 80015e4:	1c5c      	adds	r4, r3, #1
 80015e6:	54ea      	strb	r2, [r5, r3]
 80015e8:	429e      	cmp	r6, r3
 80015ea:	d1f9      	bne.n	80015e0 <memcpy+0x80>
 80015ec:	bc04      	pop	{r2}
 80015ee:	4690      	mov	r8, r2
 80015f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f2:	0005      	movs	r5, r0
 80015f4:	1e56      	subs	r6, r2, #1
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d1f0      	bne.n	80015dc <memcpy+0x7c>
 80015fa:	e7f7      	b.n	80015ec <memcpy+0x8c>
 80015fc:	1e56      	subs	r6, r2, #1
 80015fe:	0005      	movs	r5, r0
 8001600:	e7ec      	b.n	80015dc <memcpy+0x7c>
 8001602:	001a      	movs	r2, r3
 8001604:	e7f6      	b.n	80015f4 <memcpy+0x94>
 8001606:	46c0      	nop			; (mov r8, r8)

08001608 <__gnu_thumb1_case_uqi>:
 8001608:	b402      	push	{r1}
 800160a:	4671      	mov	r1, lr
 800160c:	0849      	lsrs	r1, r1, #1
 800160e:	0049      	lsls	r1, r1, #1
 8001610:	5c09      	ldrb	r1, [r1, r0]
 8001612:	0049      	lsls	r1, r1, #1
 8001614:	448e      	add	lr, r1
 8001616:	bc02      	pop	{r1}
 8001618:	4770      	bx	lr
 800161a:	46c0      	nop			; (mov r8, r8)

0800161c <__udivsi3>:
 800161c:	2200      	movs	r2, #0
 800161e:	0843      	lsrs	r3, r0, #1
 8001620:	428b      	cmp	r3, r1
 8001622:	d374      	bcc.n	800170e <__udivsi3+0xf2>
 8001624:	0903      	lsrs	r3, r0, #4
 8001626:	428b      	cmp	r3, r1
 8001628:	d35f      	bcc.n	80016ea <__udivsi3+0xce>
 800162a:	0a03      	lsrs	r3, r0, #8
 800162c:	428b      	cmp	r3, r1
 800162e:	d344      	bcc.n	80016ba <__udivsi3+0x9e>
 8001630:	0b03      	lsrs	r3, r0, #12
 8001632:	428b      	cmp	r3, r1
 8001634:	d328      	bcc.n	8001688 <__udivsi3+0x6c>
 8001636:	0c03      	lsrs	r3, r0, #16
 8001638:	428b      	cmp	r3, r1
 800163a:	d30d      	bcc.n	8001658 <__udivsi3+0x3c>
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	0209      	lsls	r1, r1, #8
 8001640:	ba12      	rev	r2, r2
 8001642:	0c03      	lsrs	r3, r0, #16
 8001644:	428b      	cmp	r3, r1
 8001646:	d302      	bcc.n	800164e <__udivsi3+0x32>
 8001648:	1212      	asrs	r2, r2, #8
 800164a:	0209      	lsls	r1, r1, #8
 800164c:	d065      	beq.n	800171a <__udivsi3+0xfe>
 800164e:	0b03      	lsrs	r3, r0, #12
 8001650:	428b      	cmp	r3, r1
 8001652:	d319      	bcc.n	8001688 <__udivsi3+0x6c>
 8001654:	e000      	b.n	8001658 <__udivsi3+0x3c>
 8001656:	0a09      	lsrs	r1, r1, #8
 8001658:	0bc3      	lsrs	r3, r0, #15
 800165a:	428b      	cmp	r3, r1
 800165c:	d301      	bcc.n	8001662 <__udivsi3+0x46>
 800165e:	03cb      	lsls	r3, r1, #15
 8001660:	1ac0      	subs	r0, r0, r3
 8001662:	4152      	adcs	r2, r2
 8001664:	0b83      	lsrs	r3, r0, #14
 8001666:	428b      	cmp	r3, r1
 8001668:	d301      	bcc.n	800166e <__udivsi3+0x52>
 800166a:	038b      	lsls	r3, r1, #14
 800166c:	1ac0      	subs	r0, r0, r3
 800166e:	4152      	adcs	r2, r2
 8001670:	0b43      	lsrs	r3, r0, #13
 8001672:	428b      	cmp	r3, r1
 8001674:	d301      	bcc.n	800167a <__udivsi3+0x5e>
 8001676:	034b      	lsls	r3, r1, #13
 8001678:	1ac0      	subs	r0, r0, r3
 800167a:	4152      	adcs	r2, r2
 800167c:	0b03      	lsrs	r3, r0, #12
 800167e:	428b      	cmp	r3, r1
 8001680:	d301      	bcc.n	8001686 <__udivsi3+0x6a>
 8001682:	030b      	lsls	r3, r1, #12
 8001684:	1ac0      	subs	r0, r0, r3
 8001686:	4152      	adcs	r2, r2
 8001688:	0ac3      	lsrs	r3, r0, #11
 800168a:	428b      	cmp	r3, r1
 800168c:	d301      	bcc.n	8001692 <__udivsi3+0x76>
 800168e:	02cb      	lsls	r3, r1, #11
 8001690:	1ac0      	subs	r0, r0, r3
 8001692:	4152      	adcs	r2, r2
 8001694:	0a83      	lsrs	r3, r0, #10
 8001696:	428b      	cmp	r3, r1
 8001698:	d301      	bcc.n	800169e <__udivsi3+0x82>
 800169a:	028b      	lsls	r3, r1, #10
 800169c:	1ac0      	subs	r0, r0, r3
 800169e:	4152      	adcs	r2, r2
 80016a0:	0a43      	lsrs	r3, r0, #9
 80016a2:	428b      	cmp	r3, r1
 80016a4:	d301      	bcc.n	80016aa <__udivsi3+0x8e>
 80016a6:	024b      	lsls	r3, r1, #9
 80016a8:	1ac0      	subs	r0, r0, r3
 80016aa:	4152      	adcs	r2, r2
 80016ac:	0a03      	lsrs	r3, r0, #8
 80016ae:	428b      	cmp	r3, r1
 80016b0:	d301      	bcc.n	80016b6 <__udivsi3+0x9a>
 80016b2:	020b      	lsls	r3, r1, #8
 80016b4:	1ac0      	subs	r0, r0, r3
 80016b6:	4152      	adcs	r2, r2
 80016b8:	d2cd      	bcs.n	8001656 <__udivsi3+0x3a>
 80016ba:	09c3      	lsrs	r3, r0, #7
 80016bc:	428b      	cmp	r3, r1
 80016be:	d301      	bcc.n	80016c4 <__udivsi3+0xa8>
 80016c0:	01cb      	lsls	r3, r1, #7
 80016c2:	1ac0      	subs	r0, r0, r3
 80016c4:	4152      	adcs	r2, r2
 80016c6:	0983      	lsrs	r3, r0, #6
 80016c8:	428b      	cmp	r3, r1
 80016ca:	d301      	bcc.n	80016d0 <__udivsi3+0xb4>
 80016cc:	018b      	lsls	r3, r1, #6
 80016ce:	1ac0      	subs	r0, r0, r3
 80016d0:	4152      	adcs	r2, r2
 80016d2:	0943      	lsrs	r3, r0, #5
 80016d4:	428b      	cmp	r3, r1
 80016d6:	d301      	bcc.n	80016dc <__udivsi3+0xc0>
 80016d8:	014b      	lsls	r3, r1, #5
 80016da:	1ac0      	subs	r0, r0, r3
 80016dc:	4152      	adcs	r2, r2
 80016de:	0903      	lsrs	r3, r0, #4
 80016e0:	428b      	cmp	r3, r1
 80016e2:	d301      	bcc.n	80016e8 <__udivsi3+0xcc>
 80016e4:	010b      	lsls	r3, r1, #4
 80016e6:	1ac0      	subs	r0, r0, r3
 80016e8:	4152      	adcs	r2, r2
 80016ea:	08c3      	lsrs	r3, r0, #3
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d301      	bcc.n	80016f4 <__udivsi3+0xd8>
 80016f0:	00cb      	lsls	r3, r1, #3
 80016f2:	1ac0      	subs	r0, r0, r3
 80016f4:	4152      	adcs	r2, r2
 80016f6:	0883      	lsrs	r3, r0, #2
 80016f8:	428b      	cmp	r3, r1
 80016fa:	d301      	bcc.n	8001700 <__udivsi3+0xe4>
 80016fc:	008b      	lsls	r3, r1, #2
 80016fe:	1ac0      	subs	r0, r0, r3
 8001700:	4152      	adcs	r2, r2
 8001702:	0843      	lsrs	r3, r0, #1
 8001704:	428b      	cmp	r3, r1
 8001706:	d301      	bcc.n	800170c <__udivsi3+0xf0>
 8001708:	004b      	lsls	r3, r1, #1
 800170a:	1ac0      	subs	r0, r0, r3
 800170c:	4152      	adcs	r2, r2
 800170e:	1a41      	subs	r1, r0, r1
 8001710:	d200      	bcs.n	8001714 <__udivsi3+0xf8>
 8001712:	4601      	mov	r1, r0
 8001714:	4152      	adcs	r2, r2
 8001716:	4610      	mov	r0, r2
 8001718:	4770      	bx	lr
 800171a:	e7ff      	b.n	800171c <__udivsi3+0x100>
 800171c:	b501      	push	{r0, lr}
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f806 	bl	8001730 <__aeabi_idiv0>
 8001724:	bd02      	pop	{r1, pc}
 8001726:	46c0      	nop			; (mov r8, r8)

08001728 <__aeabi_uidivmod>:
 8001728:	2900      	cmp	r1, #0
 800172a:	d0f7      	beq.n	800171c <__udivsi3+0x100>
 800172c:	e776      	b.n	800161c <__udivsi3>
 800172e:	4770      	bx	lr

08001730 <__aeabi_idiv0>:
 8001730:	4770      	bx	lr
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	74696e49 	.word	0x74696e49
 8001738:	696c6169 	.word	0x696c6169
 800173c:	000d6573 	.word	0x000d6573
 8001740:	74736554 	.word	0x74736554
 8001744:	53454120 	.word	0x53454120
 8001748:	2e2e2e2e 	.word	0x2e2e2e2e
 800174c:	0000002e 	.word	0x0000002e
 8001750:	6c696166 	.word	0x6c696166
 8001754:	000d6465 	.word	0x000d6465
 8001758:	63637573 	.word	0x63637573
 800175c:	0d737365 	.word	0x0d737365
 8001760:	00000000 	.word	0x00000000
 8001764:	72617453 	.word	0x72617453
 8001768:	78652074 	.word	0x78652074
 800176c:	69726570 	.word	0x69726570
 8001770:	746e656d 	.word	0x746e656d
 8001774:	0000000d 	.word	0x0000000d
 8001778:	65707845 	.word	0x65707845
 800177c:	656d6972 	.word	0x656d6972
 8001780:	6420746e 	.word	0x6420746e
 8001784:	0d656e6f 	.word	0x0d656e6f
	...
 800184c:	16157e2b 	.word	0x16157e2b
 8001850:	a6d2ae28 	.word	0xa6d2ae28
 8001854:	8815f7ab 	.word	0x8815f7ab
 8001858:	3c4fcf09 	.word	0x3c4fcf09
 800185c:	00000000 	.word	0x00000000
 8001860:	e2bec16b 	.word	0xe2bec16b
 8001864:	969f402e 	.word	0x969f402e
 8001868:	117e3de9 	.word	0x117e3de9
 800186c:	2a179373 	.word	0x2a179373
 8001870:	578a2dae 	.word	0x578a2dae
 8001874:	9cac031e 	.word	0x9cac031e
 8001878:	ac6fb79e 	.word	0xac6fb79e
 800187c:	518eaf45 	.word	0x518eaf45
 8001880:	461cc830 	.word	0x461cc830
 8001884:	11e45ca3 	.word	0x11e45ca3
 8001888:	19c1fbe5 	.word	0x19c1fbe5
 800188c:	ef520a1a 	.word	0xef520a1a
 8001890:	45249ff6 	.word	0x45249ff6
 8001894:	179b4fdf 	.word	0x179b4fdf
 8001898:	7b412bad 	.word	0x7b412bad
 800189c:	10376ce6 	.word	0x10376ce6
 80018a0:	b47bd73a 	.word	0xb47bd73a
 80018a4:	60367a0d 	.word	0x60367a0d
 80018a8:	f3ca9ea8 	.word	0xf3ca9ea8
 80018ac:	97ef6624 	.word	0x97ef6624
 80018b0:	85d5d3f5 	.word	0x85d5d3f5
 80018b4:	9d69b903 	.word	0x9d69b903
 80018b8:	5a8985e7 	.word	0x5a8985e7
 80018bc:	afbafd96 	.word	0xafbafd96
 80018c0:	7fcdb143 	.word	0x7fcdb143
 80018c4:	23ce8e59 	.word	0x23ce8e59
 80018c8:	e3001b88 	.word	0xe3001b88
 80018cc:	880603ed 	.word	0x880603ed
 80018d0:	5e780c7b 	.word	0x5e780c7b
 80018d4:	3fade827 	.word	0x3fade827
 80018d8:	71202382 	.word	0x71202382
 80018dc:	d45d7204 	.word	0xd45d7204
	...
 80019a0:	33323130 	.word	0x33323130
 80019a4:	37363534 	.word	0x37363534
 80019a8:	42413938 	.word	0x42413938
 80019ac:	46454443 	.word	0x46454443
 80019b0:	00000000 	.word	0x00000000
 80019b4:	00007830 	.word	0x00007830

080019b8 <Rcon>:
 80019b8:	0402018d 40201008 00361b80              ...... @..6.

080019c4 <rsbox>:
 80019c4:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 80019d4:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 80019e4:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 80019f4:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 8001a04:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 8001a14:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 8001a24:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 8001a34:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 8001a44:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 8001a54:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 8001a64:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 8001a74:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 8001a84:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 8001a94:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 8001aa4:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 8001ab4:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

08001ac4 <sbox>:
 8001ac4:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 8001ad4:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 8001ae4:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 8001af4:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 8001b04:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 8001b14:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 8001b24:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 8001b34:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 8001b44:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 8001b54:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 8001b64:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 8001b74:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 8001b84:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 8001b94:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 8001ba4:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 8001bb4:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..
