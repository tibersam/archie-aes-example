
example-aes.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 ed 07 00 08 eb 07 00 08 e9 07 00 08     . . ............
	...
 800002c:	eb 07 00 08 00 00 00 00 00 00 00 00 eb 07 00 08     ................
 800003c:	eb 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 800004c:	e9 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 800005c:	e9 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 800006c:	e9 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 800007c:	e9 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 800008c:	e9 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 800009c:	e9 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 80000ac:	e9 07 00 08 e9 07 00 08 e9 07 00 08 e9 07 00 08     ................
 80000bc:	e9 07 00 08                                         ....

080000c0 <send_aes_data>:

uint8_t aesKey[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
uint8_t aesData[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};

void send_aes_data(void)
{
 80000c0:	b570      	push	{r4, r5, r6, lr}
 80000c2:	4c05      	ldr	r4, [pc, #20]	; (80000d8 <send_aes_data+0x18>)
 80000c4:	0025      	movs	r5, r4
 80000c6:	3510      	adds	r5, #16
	for(int i = 0; i < 16; i++)
	{
		send_hex_byte(aesData[i]);
 80000c8:	7820      	ldrb	r0, [r4, #0]
 80000ca:	3401      	adds	r4, #1
 80000cc:	f000 f930 	bl	8000330 <send_hex_byte>
	for(int i = 0; i < 16; i++)
 80000d0:	42ac      	cmp	r4, r5
 80000d2:	d1f9      	bne.n	80000c8 <send_aes_data+0x8>
	}
}
 80000d4:	bd70      	pop	{r4, r5, r6, pc}
 80000d6:	46c0      	nop			; (mov r8, r8)
 80000d8:	20000000 	.word	0x20000000

080000dc <aesexperiment>:

void aesexperiment(void)
{
 80000dc:	b570      	push	{r4, r5, r6, lr}
 80000de:	b0b0      	sub	sp, #192	; 0xc0
	struct AES_ctx ctx = {{0},{0}};
 80000e0:	22c0      	movs	r2, #192	; 0xc0
 80000e2:	4668      	mov	r0, sp
 80000e4:	490c      	ldr	r1, [pc, #48]	; (8000118 <aesexperiment+0x3c>)
 80000e6:	f001 fa35 	bl	8001554 <memcpy>
	AES_init_ctx(&ctx, aesKey);
 80000ea:	4e0c      	ldr	r6, [pc, #48]	; (800011c <aesexperiment+0x40>)
	gpio_set(GPIOC, GPIO9);
 80000ec:	2580      	movs	r5, #128	; 0x80
	AES_init_ctx(&ctx, aesKey);
 80000ee:	0031      	movs	r1, r6
	gpio_set(GPIOC, GPIO9);
 80000f0:	4c0b      	ldr	r4, [pc, #44]	; (8000120 <aesexperiment+0x44>)
	AES_init_ctx(&ctx, aesKey);
 80000f2:	4668      	mov	r0, sp
	gpio_set(GPIOC, GPIO9);
 80000f4:	00ad      	lsls	r5, r5, #2
	AES_init_ctx(&ctx, aesKey);
 80000f6:	3110      	adds	r1, #16
 80000f8:	f001 f976 	bl	80013e8 <AES_init_ctx>
	gpio_set(GPIOC, GPIO9);
 80000fc:	0029      	movs	r1, r5
 80000fe:	0020      	movs	r0, r4
 8000100:	f000 f95a 	bl	80003b8 <gpio_set>
	AES_ECB_encrypt(&ctx, aesData);
 8000104:	0031      	movs	r1, r6
 8000106:	4668      	mov	r0, sp
 8000108:	f001 f984 	bl	8001414 <AES_ECB_encrypt>
	gpio_clear(GPIOC, GPIO9);
 800010c:	0029      	movs	r1, r5
 800010e:	0020      	movs	r0, r4
 8000110:	f000 f954 	bl	80003bc <gpio_clear>
}
 8000114:	b030      	add	sp, #192	; 0xc0
 8000116:	bd70      	pop	{r4, r5, r6, pc}
 8000118:	08001780 	.word	0x08001780
 800011c:	20000000 	.word	0x20000000
 8000120:	48000800 	.word	0x48000800

08000124 <main>:

int main(void)
{
 8000124:	b510      	push	{r4, lr}
	
	//Enable gpio clock for led PC9 and PC8
	rcc_periph_clock_enable(RCC_GPIOC);
 8000126:	481b      	ldr	r0, [pc, #108]	; (8000194 <main+0x70>)
 8000128:	f000 f9dc 	bl	80004e4 <rcc_periph_clock_enable>

	//Set mode for PC9 and PC8
	gpio_mode_setup(GPIOC, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, GPIO8 | GPIO9);
 800012c:	23c0      	movs	r3, #192	; 0xc0
 800012e:	2200      	movs	r2, #0
 8000130:	009b      	lsls	r3, r3, #2
 8000132:	2101      	movs	r1, #1
 8000134:	4818      	ldr	r0, [pc, #96]	; (8000198 <main+0x74>)
 8000136:	f000 f95d 	bl	80003f4 <gpio_mode_setup>
	gpio_clear(GPIOC, GPIO8 | GPIO9);
 800013a:	21c0      	movs	r1, #192	; 0xc0
 800013c:	4816      	ldr	r0, [pc, #88]	; (8000198 <main+0x74>)
 800013e:	0089      	lsls	r1, r1, #2
 8000140:	f000 f93c 	bl	80003bc <gpio_clear>
	
	usart1_init();
 8000144:	f000 f88a 	bl	800025c <usart1_init>

	usart1_send_string("Initialise\r");
 8000148:	4814      	ldr	r0, [pc, #80]	; (800019c <main+0x78>)
 800014a:	f000 f8e5 	bl	8000318 <usart1_send_string>
	usart1_send_string("Test AES.....");
 800014e:	4814      	ldr	r0, [pc, #80]	; (80001a0 <main+0x7c>)
 8000150:	f000 f8e2 	bl	8000318 <usart1_send_string>
	int failed = 0;
	failed = aesTest();
 8000154:	f000 f82e 	bl	80001b4 <aesTest>
	if(failed != 0)
 8000158:	2800      	cmp	r0, #0
 800015a:	d004      	beq.n	8000166 <main+0x42>
	{
		usart1_send_string("failed\r");
 800015c:	4811      	ldr	r0, [pc, #68]	; (80001a4 <main+0x80>)
 800015e:	f000 f8db 	bl	8000318 <usart1_send_string>
		while(1)
		{
			__asm__("nop");
 8000162:	46c0      	nop			; (mov r8, r8)
		while(1)
 8000164:	e7fd      	b.n	8000162 <main+0x3e>
		}
	}
	usart1_send_string("success\r");
 8000166:	4810      	ldr	r0, [pc, #64]	; (80001a8 <main+0x84>)
 8000168:	f000 f8d6 	bl	8000318 <usart1_send_string>
	gpio_set(GPIOC, GPIO8);
 800016c:	2180      	movs	r1, #128	; 0x80
 800016e:	480a      	ldr	r0, [pc, #40]	; (8000198 <main+0x74>)
 8000170:	0049      	lsls	r1, r1, #1
 8000172:	f000 f921 	bl	80003b8 <gpio_set>
	usart1_send_string("Start experiment\r");
 8000176:	480d      	ldr	r0, [pc, #52]	; (80001ac <main+0x88>)
 8000178:	f000 f8ce 	bl	8000318 <usart1_send_string>
	aesexperiment();
 800017c:	f7ff ffae 	bl	80000dc <aesexperiment>
	usart1_send_string("Experiment done\r");
 8000180:	480b      	ldr	r0, [pc, #44]	; (80001b0 <main+0x8c>)
 8000182:	f000 f8c9 	bl	8000318 <usart1_send_string>
	while(1)
	{
		gpio_toggle(GPIOC, GPIO8);
 8000186:	2180      	movs	r1, #128	; 0x80
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <main+0x74>)
 800018a:	0049      	lsls	r1, r1, #1
 800018c:	f000 f91c 	bl	80003c8 <gpio_toggle>
	while(1)
 8000190:	e7f9      	b.n	8000186 <main+0x62>
 8000192:	46c0      	nop			; (mov r8, r8)
 8000194:	00000293 	.word	0x00000293
 8000198:	48000800 	.word	0x48000800
 800019c:	08001728 	.word	0x08001728
 80001a0:	08001734 	.word	0x08001734
 80001a4:	08001744 	.word	0x08001744
 80001a8:	0800174c 	.word	0x0800174c
 80001ac:	08001758 	.word	0x08001758
 80001b0:	0800176c 	.word	0x0800176c

080001b4 <aesTest>:
#include "aesTest.h"

//Test if aes implementation behaves as expected (aka no corruption in code)
//Test vectors are from NIST SP 800-38A
int aesTest(void)
{
 80001b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001b6:	b0d5      	sub	sp, #340	; 0x154
	struct AES_ctx ctx = {{0},{0}};
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001b8:	466e      	mov	r6, sp
	struct AES_ctx ctx = {{0},{0}};
 80001ba:	491c      	ldr	r1, [pc, #112]	; (800022c <aesTest+0x78>)
 80001bc:	22c0      	movs	r2, #192	; 0xc0
 80001be:	a824      	add	r0, sp, #144	; 0x90
 80001c0:	f001 f9c8 	bl	8001554 <memcpy>
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001c4:	0032      	movs	r2, r6
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <aesTest+0x7c>)
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
                                  			{0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51},
                                  			{0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef},
                                  			{0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10}
                                		};
	uint8_t aestestoutputvector[][16] = 	{	{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97},
 80001c8:	af14      	add	r7, sp, #80	; 0x50
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001ca:	cb13      	ldmia	r3!, {r0, r1, r4}
 80001cc:	c213      	stmia	r2!, {r0, r1, r4}
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
 80001ce:	4c19      	ldr	r4, [pc, #100]	; (8000234 <aesTest+0x80>)
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001d0:	681b      	ldr	r3, [r3, #0]
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
 80001d2:	0021      	movs	r1, r4
        uint8_t aestestKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
 80001d4:	6013      	str	r3, [r2, #0]
	uint8_t aestestinputvector[][16] = 	{	{0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a},
 80001d6:	a804      	add	r0, sp, #16
 80001d8:	2240      	movs	r2, #64	; 0x40
 80001da:	f001 f9bb 	bl	8001554 <memcpy>
	uint8_t aestestoutputvector[][16] = 	{	{0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97},
 80001de:	0021      	movs	r1, r4
 80001e0:	2240      	movs	r2, #64	; 0x40
 80001e2:	0038      	movs	r0, r7
 80001e4:	3140      	adds	r1, #64	; 0x40
 80001e6:	f001 f9b5 	bl	8001554 <memcpy>
                                        		{0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a, 0x96, 0xfd, 0xba, 0xaf},
							{0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b, 0x00, 0xe3, 0xed, 0x03, 0x06, 0x88},
                                        		{0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4}
                                   		};

	for( unsigned int i = 0; i < sizeof(aestestinputvector)/sizeof(aestestinputvector[0]); i++)
 80001ea:	003d      	movs	r5, r7
 80001ec:	ac04      	add	r4, sp, #16
	{
		AES_init_ctx(&ctx, aestestKey);
 80001ee:	0031      	movs	r1, r6
 80001f0:	a824      	add	r0, sp, #144	; 0x90
 80001f2:	f001 f8f9 	bl	80013e8 <AES_init_ctx>
		AES_ECB_encrypt(&ctx, aestestinputvector[i]);
 80001f6:	0021      	movs	r1, r4
 80001f8:	a824      	add	r0, sp, #144	; 0x90
 80001fa:	f001 f90b 	bl	8001414 <AES_ECB_encrypt>
 80001fe:	2200      	movs	r2, #0
		uint32_t failed = 0;
 8000200:	2100      	movs	r1, #0
		for(uint8_t j = 0; j < 16; j++)
		{
			if(aestestinputvector[i][j] != aestestoutputvector[i][j])
 8000202:	5ca8      	ldrb	r0, [r5, r2]
 8000204:	5ca3      	ldrb	r3, [r4, r2]
 8000206:	3201      	adds	r2, #1
			{
				failed++;
 8000208:	1a1b      	subs	r3, r3, r0
 800020a:	1e58      	subs	r0, r3, #1
 800020c:	4183      	sbcs	r3, r0
 800020e:	18c9      	adds	r1, r1, r3
		for(uint8_t j = 0; j < 16; j++)
 8000210:	2a10      	cmp	r2, #16
 8000212:	d1f6      	bne.n	8000202 <aesTest+0x4e>
			}
		}
		if(failed != 0)
 8000214:	2900      	cmp	r1, #0
 8000216:	d106      	bne.n	8000226 <aesTest+0x72>
	for( unsigned int i = 0; i < sizeof(aestestinputvector)/sizeof(aestestinputvector[0]); i++)
 8000218:	3410      	adds	r4, #16
 800021a:	3510      	adds	r5, #16
 800021c:	42a7      	cmp	r7, r4
 800021e:	d1e6      	bne.n	80001ee <aesTest+0x3a>
		{
			return -1;
		}
	}

	return 0;
 8000220:	2000      	movs	r0, #0
	
}
 8000222:	b055      	add	sp, #340	; 0x154
 8000224:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -1;
 8000226:	2001      	movs	r0, #1
 8000228:	4240      	negs	r0, r0
 800022a:	e7fa      	b.n	8000222 <aesTest+0x6e>
 800022c:	080018d4 	.word	0x080018d4
 8000230:	08001840 	.word	0x08001840
 8000234:	08001854 	.word	0x08001854

08000238 <usart1_gpio_configure>:
void usart1_enable(void);

void usart1_send_char(char c);

void usart1_gpio_configure(void)
{
 8000238:	b570      	push	{r4, r5, r6, lr}
	/*Configure gpio*/
	gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO9);
 800023a:	2580      	movs	r5, #128	; 0x80
 800023c:	2490      	movs	r4, #144	; 0x90
 800023e:	00ad      	lsls	r5, r5, #2
 8000240:	05e4      	lsls	r4, r4, #23
 8000242:	002b      	movs	r3, r5
 8000244:	0020      	movs	r0, r4
 8000246:	2200      	movs	r2, #0
 8000248:	2102      	movs	r1, #2
 800024a:	f000 f8d3 	bl	80003f4 <gpio_mode_setup>
	gpio_set_af(GPIOA, GPIO_AF1, GPIO9);
 800024e:	002a      	movs	r2, r5
 8000250:	2101      	movs	r1, #1
 8000252:	0020      	movs	r0, r4
 8000254:	f000 f90c 	bl	8000470 <gpio_set_af>
}
 8000258:	bd70      	pop	{r4, r5, r6, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <usart1_init>:

void usart1_init(void)
{
 800025c:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USART1);
 800025e:	4813      	ldr	r0, [pc, #76]	; (80002ac <usart1_init+0x50>)
 8000260:	f000 f940 	bl	80004e4 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOA);
 8000264:	4812      	ldr	r0, [pc, #72]	; (80002b0 <usart1_init+0x54>)
 8000266:	f000 f93d 	bl	80004e4 <rcc_periph_clock_enable>
	
	usart_set_baudrate(USART1, 115200);
 800026a:	21e1      	movs	r1, #225	; 0xe1
 800026c:	4c11      	ldr	r4, [pc, #68]	; (80002b4 <usart1_init+0x58>)
 800026e:	0249      	lsls	r1, r1, #9
 8000270:	0020      	movs	r0, r4
 8000272:	f000 f9af 	bl	80005d4 <usart_set_baudrate>
	usart_set_databits(USART1, 8);
 8000276:	0020      	movs	r0, r4
 8000278:	2108      	movs	r1, #8
 800027a:	f000 f9b7 	bl	80005ec <usart_set_databits>
	usart_set_stopbits(USART1, USART_CR2_STOPBITS_1);
 800027e:	0020      	movs	r0, r4
 8000280:	2100      	movs	r1, #0
 8000282:	f000 f9c1 	bl	8000608 <usart_set_stopbits>
	usart_set_mode(USART1, USART_MODE_TX);
 8000286:	0020      	movs	r0, r4
 8000288:	2108      	movs	r1, #8
 800028a:	f000 f9cd 	bl	8000628 <usart_set_mode>
	usart_set_parity(USART1, USART_PARITY_NONE);
 800028e:	0020      	movs	r0, r4
 8000290:	2100      	movs	r1, #0
 8000292:	f000 f9c1 	bl	8000618 <usart_set_parity>
	usart_set_flow_control(USART1, USART_FLOWCONTROL_NONE);
 8000296:	2100      	movs	r1, #0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f9cb 	bl	8000634 <usart_set_flow_control>
	usart1_enable();
}

void usart1_enable(void)
{
	usart1_gpio_configure();
 800029e:	f7ff ffcb 	bl	8000238 <usart1_gpio_configure>
	usart_enable(USART1);
 80002a2:	0020      	movs	r0, r4
 80002a4:	f000 f9ce 	bl	8000644 <usart_enable>
}
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	0000030e 	.word	0x0000030e
 80002b0:	00000291 	.word	0x00000291
 80002b4:	40013800 	.word	0x40013800

080002b8 <usart1_enable>:
{
 80002b8:	b510      	push	{r4, lr}
	usart1_gpio_configure();
 80002ba:	f7ff ffbd 	bl	8000238 <usart1_gpio_configure>
	usart_enable(USART1);
 80002be:	4802      	ldr	r0, [pc, #8]	; (80002c8 <usart1_enable+0x10>)
 80002c0:	f000 f9c0 	bl	8000644 <usart_enable>
}
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	40013800 	.word	0x40013800

080002cc <usart1_send_char>:

void usart1_send_char(char c)
{
 80002cc:	b510      	push	{r4, lr}
	usart_send_blocking(USART1, c);
 80002ce:	0001      	movs	r1, r0
 80002d0:	4801      	ldr	r0, [pc, #4]	; (80002d8 <usart1_send_char+0xc>)
 80002d2:	f000 f9c1 	bl	8000658 <usart_send_blocking>
}
 80002d6:	bd10      	pop	{r4, pc}
 80002d8:	40013800 	.word	0x40013800

080002dc <usart1_send_string_len>:

void usart1_send_string_len(char *s, unsigned int len)
{
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	0004      	movs	r4, r0
	for(unsigned int i = 0; i < len; i++)
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d015      	beq.n	8000310 <usart1_send_string_len+0x34>
 80002e4:	1845      	adds	r5, r0, r1
 80002e6:	e002      	b.n	80002ee <usart1_send_string_len+0x12>
		usart1_send_char(*s);
		if(*s == '\r')
		{
			usart1_send_char('\n');
		}
		s++;
 80002e8:	3401      	adds	r4, #1
	for(unsigned int i = 0; i < len; i++)
 80002ea:	42ac      	cmp	r4, r5
 80002ec:	d010      	beq.n	8000310 <usart1_send_string_len+0x34>
		if(*s == 0)
 80002ee:	7821      	ldrb	r1, [r4, #0]
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d00d      	beq.n	8000310 <usart1_send_string_len+0x34>
	usart_send_blocking(USART1, c);
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <usart1_send_string_len+0x38>)
 80002f6:	b289      	uxth	r1, r1
 80002f8:	f000 f9ae 	bl	8000658 <usart_send_blocking>
		if(*s == '\r')
 80002fc:	7823      	ldrb	r3, [r4, #0]
 80002fe:	2b0d      	cmp	r3, #13
 8000300:	d1f2      	bne.n	80002e8 <usart1_send_string_len+0xc>
	usart_send_blocking(USART1, c);
 8000302:	210a      	movs	r1, #10
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <usart1_send_string_len+0x38>)
		s++;
 8000306:	3401      	adds	r4, #1
	usart_send_blocking(USART1, c);
 8000308:	f000 f9a6 	bl	8000658 <usart_send_blocking>
	for(unsigned int i = 0; i < len; i++)
 800030c:	42ac      	cmp	r4, r5
 800030e:	d1ee      	bne.n	80002ee <usart1_send_string_len+0x12>
	}
}
 8000310:	bd70      	pop	{r4, r5, r6, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	40013800 	.word	0x40013800

08000318 <usart1_send_string>:
void usart1_send_string(char *s)
{
	unsigned int len = 0;
	char *s_inc = s;
	while(*s_inc != '\0')
 8000318:	7803      	ldrb	r3, [r0, #0]
	unsigned int len = 0;
 800031a:	2100      	movs	r1, #0
{
 800031c:	b510      	push	{r4, lr}
	while(*s_inc != '\0')
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <usart1_send_string+0x12>
	{
		len++;
 8000322:	3101      	adds	r1, #1
	while(*s_inc != '\0')
 8000324:	5c43      	ldrb	r3, [r0, r1]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1fb      	bne.n	8000322 <usart1_send_string+0xa>
		s_inc++;
	}
	usart1_send_string_len(s, len);
 800032a:	f7ff ffd7 	bl	80002dc <usart1_send_string_len>
}
 800032e:	bd10      	pop	{r4, pc}

08000330 <send_hex_byte>:

void send_hex_byte(uint8_t c)
{
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	b086      	sub	sp, #24
	char lookup[]="0123456789ABCDEF";
 8000334:	ac01      	add	r4, sp, #4
 8000336:	0022      	movs	r2, r4
{
 8000338:	0005      	movs	r5, r0
	char lookup[]="0123456789ABCDEF";
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <send_hex_byte+0x34>)
 800033c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800033e:	c243      	stmia	r2!, {r0, r1, r6}
 8000340:	6819      	ldr	r1, [r3, #0]
	usart_send_blocking(USART1, c);
 8000342:	4e09      	ldr	r6, [pc, #36]	; (8000368 <send_hex_byte+0x38>)
	char lookup[]="0123456789ABCDEF";
 8000344:	6011      	str	r1, [r2, #0]
 8000346:	791b      	ldrb	r3, [r3, #4]
	usart_send_blocking(USART1, c);
 8000348:	0030      	movs	r0, r6
	char lookup[]="0123456789ABCDEF";
 800034a:	7113      	strb	r3, [r2, #4]
	uint8_t c_high = (c & 0xF0) >> 4;
	c = c & 0xF;
	usart1_send_char(lookup[c_high]);
 800034c:	092b      	lsrs	r3, r5, #4
	usart_send_blocking(USART1, c);
 800034e:	5ce1      	ldrb	r1, [r4, r3]
 8000350:	f000 f982 	bl	8000658 <usart_send_blocking>
	usart1_send_char(lookup[c]);
 8000354:	200f      	movs	r0, #15
 8000356:	4005      	ands	r5, r0
	usart_send_blocking(USART1, c);
 8000358:	5d61      	ldrb	r1, [r4, r5]
 800035a:	0030      	movs	r0, r6
 800035c:	f000 f97c 	bl	8000658 <usart_send_blocking>
}
 8000360:	b006      	add	sp, #24
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	08001994 	.word	0x08001994
 8000368:	40013800 	.word	0x40013800

0800036c <send_hex>:

void send_hex(uint32_t val)
{
 800036c:	b510      	push	{r4, lr}
 800036e:	2378      	movs	r3, #120	; 0x78
 8000370:	0004      	movs	r4, r0
	unsigned int len = 0;
 8000372:	2100      	movs	r1, #0
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <send_hex+0x40>)
 8000376:	e000      	b.n	800037a <send_hex+0xe>
 8000378:	5c53      	ldrb	r3, [r2, r1]
		len++;
 800037a:	3101      	adds	r1, #1
	while(*s_inc != '\0')
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1fb      	bne.n	8000378 <send_hex+0xc>
	usart1_send_string_len(s, len);
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <send_hex+0x44>)
 8000382:	f7ff ffab 	bl	80002dc <usart1_send_string_len>
	usart1_send_string("0x");
	for(int i = 0; i < 4; i++)
	{
		send_hex_byte((char)(val >> i*8) & 0xFF );
 8000386:	b2e0      	uxtb	r0, r4
 8000388:	f7ff ffd2 	bl	8000330 <send_hex_byte>
 800038c:	0a20      	lsrs	r0, r4, #8
 800038e:	b2c0      	uxtb	r0, r0
 8000390:	f7ff ffce 	bl	8000330 <send_hex_byte>
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	b2c0      	uxtb	r0, r0
 8000398:	f7ff ffca 	bl	8000330 <send_hex_byte>
 800039c:	0e20      	lsrs	r0, r4, #24
 800039e:	f7ff ffc7 	bl	8000330 <send_hex_byte>
	usart1_send_string_len(s, len);
 80003a2:	2101      	movs	r1, #1
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <send_hex+0x48>)
 80003a6:	f7ff ff99 	bl	80002dc <usart1_send_string_len>
	}
	usart1_send_string("\r");
}
 80003aa:	bd10      	pop	{r4, pc}
 80003ac:	080019a9 	.word	0x080019a9
 80003b0:	080019a8 	.word	0x080019a8
 80003b4:	08001768 	.word	0x08001768

080003b8 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80003b8:	6181      	str	r1, [r0, #24]
}
 80003ba:	4770      	bx	lr

080003bc <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80003bc:	0409      	lsls	r1, r1, #16
 80003be:	6181      	str	r1, [r0, #24]
}
 80003c0:	4770      	bx	lr

080003c2 <gpio_get>:
@param[in] gpioport Unsigned int32. Port identifier @ref gpio_port_id
@return Unsigned int16. The value held in the specified GPIO port.
*/
uint16_t gpio_port_read(uint32_t gpioport)
{
	return (uint16_t)GPIO_IDR(gpioport);
 80003c2:	6900      	ldr	r0, [r0, #16]
	return gpio_port_read(gpioport) & gpios;
 80003c4:	4008      	ands	r0, r1
}
 80003c6:	4770      	bx	lr

080003c8 <gpio_toggle>:
	uint32_t port = GPIO_ODR(gpioport);
 80003c8:	6942      	ldr	r2, [r0, #20]
	GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);
 80003ca:	0013      	movs	r3, r2
 80003cc:	400b      	ands	r3, r1
 80003ce:	041b      	lsls	r3, r3, #16
 80003d0:	4391      	bics	r1, r2
 80003d2:	4319      	orrs	r1, r3
 80003d4:	6181      	str	r1, [r0, #24]
}
 80003d6:	4770      	bx	lr

080003d8 <gpio_port_read>:
	return (uint16_t)GPIO_IDR(gpioport);
 80003d8:	6900      	ldr	r0, [r0, #16]
 80003da:	b280      	uxth	r0, r0
}
 80003dc:	4770      	bx	lr

080003de <gpio_port_write>:
@param[in] gpioport Unsigned int32. Port identifier @ref gpio_port_id
@param[in] data Unsigned int16. The value to be written to the GPIO port.
*/
void gpio_port_write(uint32_t gpioport, uint16_t data)
{
	GPIO_ODR(gpioport) = data;
 80003de:	6141      	str	r1, [r0, #20]
}
 80003e0:	4770      	bx	lr

080003e2 <gpio_port_config_lock>:
void gpio_port_config_lock(uint32_t gpioport, uint16_t gpios)
{
	uint32_t reg32;

	/* Special "Lock Key Writing Sequence", see datasheet. */
	GPIO_LCKR(gpioport) = GPIO_LCKK | gpios;	/* Set LCKK. */
 80003e2:	2380      	movs	r3, #128	; 0x80
 80003e4:	025b      	lsls	r3, r3, #9
 80003e6:	430b      	orrs	r3, r1
 80003e8:	61c3      	str	r3, [r0, #28]
	GPIO_LCKR(gpioport) = ~GPIO_LCKK & gpios;	/* Clear LCKK. */
 80003ea:	61c1      	str	r1, [r0, #28]
	GPIO_LCKR(gpioport) = GPIO_LCKK | gpios;	/* Set LCKK. */
 80003ec:	61c3      	str	r3, [r0, #28]
	reg32 = GPIO_LCKR(gpioport);			/* Read LCKK. */
 80003ee:	69c3      	ldr	r3, [r0, #28]
	reg32 = GPIO_LCKR(gpioport);			/* Read LCKK again. */
 80003f0:	69c3      	ldr	r3, [r0, #28]
	 * optimized out anyways.
	 */
	reg32 = reg32;

	/* If (reg32 & GPIO_LCKK) is true, the lock is now active. */
}
 80003f2:	4770      	bx	lr

080003f4 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 80003fa:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 80003fc:	2100      	movs	r1, #0
{
 80003fe:	9202      	str	r2, [sp, #8]
 8000400:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8000402:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000404:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8000406:	9c03      	ldr	r4, [sp, #12]
 8000408:	2501      	movs	r5, #1
 800040a:	410c      	asrs	r4, r1
 800040c:	422c      	tst	r4, r5
 800040e:	d00a      	beq.n	8000426 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8000410:	003d      	movs	r5, r7
 8000412:	004c      	lsls	r4, r1, #1
 8000414:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000416:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8000418:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 800041a:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 800041c:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 800041e:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000420:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000422:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000424:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8000426:	3101      	adds	r1, #1
 8000428:	2910      	cmp	r1, #16
 800042a:	d1ec      	bne.n	8000406 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 800042c:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 800042e:	60c3      	str	r3, [r0, #12]
}
 8000430:	b005      	add	sp, #20
 8000432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000434 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8000434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000436:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8000438:	2901      	cmp	r1, #1
 800043a:	d116      	bne.n	800046a <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 800043c:	6841      	ldr	r1, [r0, #4]
 800043e:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8000440:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000442:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000444:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000446:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8000448:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 800044a:	001d      	movs	r5, r3
 800044c:	4125      	asrs	r5, r4
 800044e:	4235      	tst	r5, r6
 8000450:	d006      	beq.n	8000460 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000452:	003a      	movs	r2, r7
 8000454:	0065      	lsls	r5, r4, #1
 8000456:	40aa      	lsls	r2, r5
 8000458:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 800045a:	9a01      	ldr	r2, [sp, #4]
 800045c:	40aa      	lsls	r2, r5
 800045e:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8000460:	3401      	adds	r4, #1
 8000462:	2c10      	cmp	r4, #16
 8000464:	d1f1      	bne.n	800044a <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8000466:	6081      	str	r1, [r0, #8]
}
 8000468:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 800046a:	6841      	ldr	r1, [r0, #4]
 800046c:	4399      	bics	r1, r3
 800046e:	e7e7      	b.n	8000440 <gpio_set_output_options+0xc>

08000470 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8000472:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8000474:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000476:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8000478:	6a04      	ldr	r4, [r0, #32]
{
 800047a:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 800047c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800047e:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8000480:	9d01      	ldr	r5, [sp, #4]
 8000482:	411d      	asrs	r5, r3
 8000484:	4235      	tst	r5, r6
 8000486:	d006      	beq.n	8000496 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8000488:	003a      	movs	r2, r7
 800048a:	009d      	lsls	r5, r3, #2
 800048c:	40aa      	lsls	r2, r5
 800048e:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8000490:	9a00      	ldr	r2, [sp, #0]
 8000492:	40aa      	lsls	r2, r5
 8000494:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8000496:	3301      	adds	r3, #1
 8000498:	2b08      	cmp	r3, #8
 800049a:	d1f1      	bne.n	8000480 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 800049c:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800049e:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 80004a0:	9a01      	ldr	r2, [sp, #4]
 80004a2:	411a      	asrs	r2, r3
 80004a4:	4232      	tst	r2, r6
 80004a6:	d007      	beq.n	80004b8 <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80004a8:	003a      	movs	r2, r7
 80004aa:	009d      	lsls	r5, r3, #2
 80004ac:	3d20      	subs	r5, #32
 80004ae:	40aa      	lsls	r2, r5
 80004b0:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 80004b2:	9a00      	ldr	r2, [sp, #0]
 80004b4:	40aa      	lsls	r2, r5
 80004b6:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 80004b8:	3301      	adds	r3, #1
 80004ba:	2b10      	cmp	r3, #16
 80004bc:	d1f0      	bne.n	80004a0 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 80004be:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 80004c0:	6241      	str	r1, [r0, #36]	; 0x24
}
 80004c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080004c4 <rcc_peripheral_enable_clock>:
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */

void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg |= en;
 80004c4:	6803      	ldr	r3, [r0, #0]
 80004c6:	430b      	orrs	r3, r1
 80004c8:	6003      	str	r3, [r0, #0]
}
 80004ca:	4770      	bx	lr

080004cc <rcc_peripheral_disable_clock>:
 * @li If register is RCC_APB1ENR, from @ref rcc_apb1enr_en
 * @li If register is RCC_APB2ENR, from @ref rcc_apb2enr_en
 */
void rcc_peripheral_disable_clock(volatile uint32_t *reg, uint32_t en)
{
	*reg &= ~en;
 80004cc:	6803      	ldr	r3, [r0, #0]
 80004ce:	438b      	bics	r3, r1
 80004d0:	6003      	str	r3, [r0, #0]
}
 80004d2:	4770      	bx	lr

080004d4 <rcc_peripheral_reset>:
 80004d4:	6803      	ldr	r3, [r0, #0]
 80004d6:	4319      	orrs	r1, r3
 80004d8:	6001      	str	r1, [r0, #0]
 80004da:	4770      	bx	lr

080004dc <rcc_peripheral_clear_reset>:
 80004dc:	6803      	ldr	r3, [r0, #0]
 80004de:	438b      	bics	r3, r1
 80004e0:	6003      	str	r3, [r0, #0]
 80004e2:	4770      	bx	lr

080004e4 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <rcc_periph_clock_enable+0x18>)
 80004e6:	0942      	lsrs	r2, r0, #5
 80004e8:	18d2      	adds	r2, r2, r3
 80004ea:	231f      	movs	r3, #31
 80004ec:	4018      	ands	r0, r3
 80004ee:	3b1e      	subs	r3, #30
 80004f0:	4083      	lsls	r3, r0
 80004f2:	6811      	ldr	r1, [r2, #0]
 80004f4:	430b      	orrs	r3, r1
 80004f6:	6013      	str	r3, [r2, #0]
}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000

08000500 <rcc_periph_clock_disable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_disable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) &= ~_RCC_BIT(clken);
 8000500:	211f      	movs	r1, #31
 8000502:	0943      	lsrs	r3, r0, #5
 8000504:	4008      	ands	r0, r1
 8000506:	391e      	subs	r1, #30
 8000508:	4081      	lsls	r1, r0
 800050a:	4a03      	ldr	r2, [pc, #12]	; (8000518 <rcc_periph_clock_disable+0x18>)
 800050c:	189b      	adds	r3, r3, r2
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	438a      	bics	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	4770      	bx	lr
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	40021000 	.word	0x40021000

0800051c <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <rcc_periph_reset_pulse+0x1c>)
 800051e:	0943      	lsrs	r3, r0, #5
 8000520:	189b      	adds	r3, r3, r2
 8000522:	221f      	movs	r2, #31
 8000524:	4010      	ands	r0, r2
 8000526:	3a1e      	subs	r2, #30
 8000528:	4082      	lsls	r2, r0
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	4311      	orrs	r1, r2
 800052e:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000530:	6819      	ldr	r1, [r3, #0]
 8000532:	4391      	bics	r1, r2
 8000534:	6019      	str	r1, [r3, #0]
}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000

0800053c <rcc_periph_reset_hold>:
 800053c:	b510      	push	{r4, lr}
 800053e:	f7ff ffd1 	bl	80004e4 <rcc_periph_clock_enable>
 8000542:	bd10      	pop	{r4, pc}

08000544 <rcc_periph_reset_release>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f7ff ffdb 	bl	8000500 <rcc_periph_clock_disable>
 800054a:	bd10      	pop	{r4, pc}

0800054c <rcc_set_mco>:
 * @param[in] mcosrc the unshifted source bits
 */

void rcc_set_mco(uint32_t mcosrc)
{
	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 800054c:	4a03      	ldr	r2, [pc, #12]	; (800055c <rcc_set_mco+0x10>)
 800054e:	4904      	ldr	r1, [pc, #16]	; (8000560 <rcc_set_mco+0x14>)
 8000550:	6813      	ldr	r3, [r2, #0]
			(mcosrc << RCC_CFGR_MCO_SHIFT);
 8000552:	0600      	lsls	r0, r0, #24
	RCC_CFGR = (RCC_CFGR & ~(RCC_CFGR_MCO_MASK << RCC_CFGR_MCO_SHIFT)) |
 8000554:	400b      	ands	r3, r1
 8000556:	4303      	orrs	r3, r0
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	4770      	bx	lr
 800055c:	40021004 	.word	0x40021004
 8000560:	f0ffffff 	.word	0xf0ffffff

08000564 <rcc_osc_bypass_enable>:
 * pwr_disable_backup_domain_write_protect).
 * @param[in] osc Oscillator ID. Only HSE and LSE have effect.
 */
void rcc_osc_bypass_enable(enum rcc_osc osc)
{
	switch (osc) {
 8000564:	2802      	cmp	r0, #2
 8000566:	d002      	beq.n	800056e <rcc_osc_bypass_enable+0xa>
 8000568:	2805      	cmp	r0, #5
 800056a:	d007      	beq.n	800057c <rcc_osc_bypass_enable+0x18>
		break;
	default:
		/* Do nothing, only HSE/LSE allowed here. */
		break;
	}
}
 800056c:	4770      	bx	lr
		RCC_CR |= RCC_CR_HSEBYP;
 800056e:	2380      	movs	r3, #128	; 0x80
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <rcc_osc_bypass_enable+0x20>)
 8000572:	02db      	lsls	r3, r3, #11
 8000574:	6811      	ldr	r1, [r2, #0]
		RCC_BDCR |= RCC_BDCR_LSEBYP;
 8000576:	430b      	orrs	r3, r1
 8000578:	6013      	str	r3, [r2, #0]
}
 800057a:	e7f7      	b.n	800056c <rcc_osc_bypass_enable+0x8>
		RCC_BDCR |= RCC_BDCR_LSEBYP;
 800057c:	4a02      	ldr	r2, [pc, #8]	; (8000588 <rcc_osc_bypass_enable+0x24>)
 800057e:	2304      	movs	r3, #4
 8000580:	6811      	ldr	r1, [r2, #0]
 8000582:	e7f8      	b.n	8000576 <rcc_osc_bypass_enable+0x12>
 8000584:	40021000 	.word	0x40021000
 8000588:	40021020 	.word	0x40021020

0800058c <rcc_osc_bypass_disable>:
 * (see @ref rcc_backupdomain_reset).
 * @param[in] osc Oscillator ID. Only HSE and LSE have effect.
 */
void rcc_osc_bypass_disable(enum rcc_osc osc)
{
	switch (osc) {
 800058c:	2802      	cmp	r0, #2
 800058e:	d002      	beq.n	8000596 <rcc_osc_bypass_disable+0xa>
 8000590:	2805      	cmp	r0, #5
 8000592:	d006      	beq.n	80005a2 <rcc_osc_bypass_disable+0x16>
		break;
	default:
		/* Do nothing, only HSE/LSE allowed here. */
		break;
	}
}
 8000594:	4770      	bx	lr
		RCC_CR &= ~RCC_CR_HSEBYP;
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <rcc_osc_bypass_disable+0x20>)
 8000598:	4905      	ldr	r1, [pc, #20]	; (80005b0 <rcc_osc_bypass_disable+0x24>)
 800059a:	6813      	ldr	r3, [r2, #0]
 800059c:	400b      	ands	r3, r1
		RCC_BDCR &= ~RCC_BDCR_LSEBYP;
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	e7f8      	b.n	8000594 <rcc_osc_bypass_disable+0x8>
		RCC_BDCR &= ~RCC_BDCR_LSEBYP;
 80005a2:	2104      	movs	r1, #4
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <rcc_osc_bypass_disable+0x28>)
 80005a6:	6813      	ldr	r3, [r2, #0]
 80005a8:	438b      	bics	r3, r1
 80005aa:	e7f8      	b.n	800059e <rcc_osc_bypass_disable+0x12>
 80005ac:	40021000 	.word	0x40021000
 80005b0:	fffbffff 	.word	0xfffbffff
 80005b4:	40021020 	.word	0x40021020

080005b8 <rcc_get_div_from_hpre>:

/* This is a helper to calculate dividers that go 2/4/8/16/64/128/256/512.
 * These dividers also use the top bit as an "enable". This is tyipcally
 * used for AHB and other system clock prescaler. */
uint16_t rcc_get_div_from_hpre(uint8_t div_val) {
	if (div_val < 0x8) {
 80005b8:	2201      	movs	r2, #1
uint16_t rcc_get_div_from_hpre(uint8_t div_val) {
 80005ba:	0003      	movs	r3, r0
		return 1;
 80005bc:	0010      	movs	r0, r2
	if (div_val < 0x8) {
 80005be:	2b07      	cmp	r3, #7
 80005c0:	d904      	bls.n	80005cc <rcc_get_div_from_hpre+0x14>
	} else if (div_val <= 0x0b /* DIV16 */) {
 80005c2:	2b0b      	cmp	r3, #11
 80005c4:	d803      	bhi.n	80005ce <rcc_get_div_from_hpre+0x16>
		return (1U << (div_val - 7));
 80005c6:	3b07      	subs	r3, #7
	} else {
		return (1U << (div_val - 6));
 80005c8:	409a      	lsls	r2, r3
 80005ca:	b290      	uxth	r0, r2
	}
}
 80005cc:	4770      	bx	lr
		return (1U << (div_val - 6));
 80005ce:	3b06      	subs	r3, #6
 80005d0:	e7fa      	b.n	80005c8 <rcc_get_div_from_hpre+0x10>
	...

080005d4 <usart_set_baudrate>:
@param[in] baud unsigned 32 bit. Baud rate specified in Hz.
*/

void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <usart_set_baudrate+0x14>)
{
 80005d6:	b510      	push	{r4, lr}
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 80005d8:	681b      	ldr	r3, [r3, #0]
{
 80005da:	0004      	movs	r4, r0
	USART_BRR(usart) = (clock + baud / 2) / baud;
 80005dc:	0848      	lsrs	r0, r1, #1
 80005de:	18c0      	adds	r0, r0, r3
 80005e0:	f001 f816 	bl	8001610 <__udivsi3>
 80005e4:	60e0      	str	r0, [r4, #12]
}
 80005e6:	bd10      	pop	{r4, pc}
 80005e8:	20000024 	.word	0x20000024

080005ec <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 80005ec:	2908      	cmp	r1, #8
 80005ee:	d104      	bne.n	80005fa <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80005f0:	6803      	ldr	r3, [r0, #0]
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <usart_set_databits+0x18>)
 80005f4:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80005f6:	6003      	str	r3, [r0, #0]
	}
}
 80005f8:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	6802      	ldr	r2, [r0, #0]
 80005fe:	015b      	lsls	r3, r3, #5
 8000600:	4313      	orrs	r3, r2
 8000602:	e7f8      	b.n	80005f6 <usart_set_databits+0xa>
 8000604:	ffffefff 	.word	0xffffefff

08000608 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8000608:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 800060a:	4a02      	ldr	r2, [pc, #8]	; (8000614 <usart_set_stopbits+0xc>)
 800060c:	4013      	ands	r3, r2
 800060e:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8000610:	6043      	str	r3, [r0, #4]
}
 8000612:	4770      	bx	lr
 8000614:	ffffcfff 	.word	0xffffcfff

08000618 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8000618:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 800061a:	4a02      	ldr	r2, [pc, #8]	; (8000624 <usart_set_parity+0xc>)
 800061c:	4013      	ands	r3, r2
 800061e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8000620:	6003      	str	r3, [r0, #0]
}
 8000622:	4770      	bx	lr
 8000624:	fffff9ff 	.word	0xfffff9ff

08000628 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000628:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 800062a:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 800062c:	4393      	bics	r3, r2
 800062e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8000630:	6003      	str	r3, [r0, #0]
}
 8000632:	4770      	bx	lr

08000634 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8000634:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8000636:	4a02      	ldr	r2, [pc, #8]	; (8000640 <usart_set_flow_control+0xc>)
 8000638:	4013      	ands	r3, r2
 800063a:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 800063c:	6083      	str	r3, [r0, #8]
}
 800063e:	4770      	bx	lr
 8000640:	fffffcff 	.word	0xfffffcff

08000644 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8000644:	2301      	movs	r3, #1
 8000646:	6802      	ldr	r2, [r0, #0]
 8000648:	4313      	orrs	r3, r2
 800064a:	6003      	str	r3, [r0, #0]
}
 800064c:	4770      	bx	lr

0800064e <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 800064e:	2201      	movs	r2, #1
 8000650:	6803      	ldr	r3, [r0, #0]
 8000652:	4393      	bics	r3, r2
 8000654:	6003      	str	r3, [r0, #0]
}
 8000656:	4770      	bx	lr

08000658 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	000d      	movs	r5, r1
 800065c:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800065e:	f000 f8b3 	bl	80007c8 <usart_wait_send_ready>
	usart_send(usart, data);
 8000662:	0029      	movs	r1, r5
 8000664:	0020      	movs	r0, r4
 8000666:	f000 f8a7 	bl	80007b8 <usart_send>
}
 800066a:	bd70      	pop	{r4, r5, r6, pc}

0800066c <usart_recv_blocking>:
usart_reg_base
@returns unsigned 16 bit data word.
*/

uint16_t usart_recv_blocking(uint32_t usart)
{
 800066c:	b510      	push	{r4, lr}
 800066e:	0004      	movs	r4, r0
	usart_wait_recv_ready(usart);
 8000670:	f000 f8af 	bl	80007d2 <usart_wait_recv_ready>

	return usart_recv(usart);
 8000674:	0020      	movs	r0, r4
 8000676:	f000 f8a3 	bl	80007c0 <usart_recv>
}
 800067a:	bd10      	pop	{r4, pc}

0800067c <usart_enable_rx_dma>:
usart_reg_base
*/

void usart_enable_rx_dma(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_DMAR;
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	6882      	ldr	r2, [r0, #8]
 8000680:	4313      	orrs	r3, r2
 8000682:	6083      	str	r3, [r0, #8]
}
 8000684:	4770      	bx	lr

08000686 <usart_disable_rx_dma>:
usart_reg_base
*/

void usart_disable_rx_dma(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_DMAR;
 8000686:	2240      	movs	r2, #64	; 0x40
 8000688:	6883      	ldr	r3, [r0, #8]
 800068a:	4393      	bics	r3, r2
 800068c:	6083      	str	r3, [r0, #8]
}
 800068e:	4770      	bx	lr

08000690 <usart_enable_tx_dma>:
usart_reg_base
*/

void usart_enable_tx_dma(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_DMAT;
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	6882      	ldr	r2, [r0, #8]
 8000694:	4313      	orrs	r3, r2
 8000696:	6083      	str	r3, [r0, #8]
}
 8000698:	4770      	bx	lr

0800069a <usart_disable_tx_dma>:
usart_reg_base
*/

void usart_disable_tx_dma(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_DMAT;
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	6883      	ldr	r3, [r0, #8]
 800069e:	4393      	bics	r3, r2
 80006a0:	6083      	str	r3, [r0, #8]
}
 80006a2:	4770      	bx	lr

080006a4 <usart_enable_rx_interrupt>:
usart_reg_base
*/

void usart_enable_rx_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_RXNEIE;
 80006a4:	2320      	movs	r3, #32
 80006a6:	6802      	ldr	r2, [r0, #0]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	6003      	str	r3, [r0, #0]
}
 80006ac:	4770      	bx	lr

080006ae <usart_disable_rx_interrupt>:
usart_reg_base
*/

void usart_disable_rx_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_RXNEIE;
 80006ae:	2220      	movs	r2, #32
 80006b0:	6803      	ldr	r3, [r0, #0]
 80006b2:	4393      	bics	r3, r2
 80006b4:	6003      	str	r3, [r0, #0]
}
 80006b6:	4770      	bx	lr

080006b8 <usart_enable_tx_interrupt>:
usart_reg_base
*/

void usart_enable_tx_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_TXEIE;
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	6802      	ldr	r2, [r0, #0]
 80006bc:	4313      	orrs	r3, r2
 80006be:	6003      	str	r3, [r0, #0]
}
 80006c0:	4770      	bx	lr

080006c2 <usart_disable_tx_interrupt>:
usart_reg_base
*/

void usart_disable_tx_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_TXEIE;
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	4393      	bics	r3, r2
 80006c8:	6003      	str	r3, [r0, #0]
}
 80006ca:	4770      	bx	lr

080006cc <usart_enable_tx_complete_interrupt>:
usart_reg_base
 */

void usart_enable_tx_complete_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_TCIE;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	6802      	ldr	r2, [r0, #0]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	6003      	str	r3, [r0, #0]
}
 80006d4:	4770      	bx	lr

080006d6 <usart_disable_tx_complete_interrupt>:
usart_reg_base
 */

void usart_disable_tx_complete_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_TCIE;
 80006d6:	2240      	movs	r2, #64	; 0x40
 80006d8:	6803      	ldr	r3, [r0, #0]
 80006da:	4393      	bics	r3, r2
 80006dc:	6003      	str	r3, [r0, #0]
}
 80006de:	4770      	bx	lr

080006e0 <usart_enable_idle_interrupt>:
usart_reg_base
*/

void usart_enable_idle_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_IDLEIE;
 80006e0:	2310      	movs	r3, #16
 80006e2:	6802      	ldr	r2, [r0, #0]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	6003      	str	r3, [r0, #0]
}
 80006e8:	4770      	bx	lr

080006ea <usart_disable_idle_interrupt>:
usart_reg_base
*/

void usart_disable_idle_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_IDLEIE;
 80006ea:	2210      	movs	r2, #16
 80006ec:	6803      	ldr	r3, [r0, #0]
 80006ee:	4393      	bics	r3, r2
 80006f0:	6003      	str	r3, [r0, #0]
}
 80006f2:	4770      	bx	lr

080006f4 <usart_enable_error_interrupt>:
usart_reg_base
*/

void usart_enable_error_interrupt(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_EIE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	6882      	ldr	r2, [r0, #8]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	6083      	str	r3, [r0, #8]
}
 80006fc:	4770      	bx	lr

080006fe <usart_disable_error_interrupt>:
usart_reg_base
*/

void usart_disable_error_interrupt(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_EIE;
 80006fe:	2201      	movs	r2, #1
 8000700:	6883      	ldr	r3, [r0, #8]
 8000702:	4393      	bics	r3, r2
 8000704:	6083      	str	r3, [r0, #8]
}
 8000706:	4770      	bx	lr

08000708 <usart_enable_data_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_data_inversion(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_DATAINV;
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	6842      	ldr	r2, [r0, #4]
 800070c:	02db      	lsls	r3, r3, #11
 800070e:	4313      	orrs	r3, r2
 8000710:	6043      	str	r3, [r0, #4]
}
 8000712:	4770      	bx	lr

08000714 <usart_disable_data_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_data_inversion(uint32_t usart)
{
	USART_CR2(usart) &= ~USART_CR2_DATAINV;
 8000714:	6843      	ldr	r3, [r0, #4]
 8000716:	4a02      	ldr	r2, [pc, #8]	; (8000720 <usart_disable_data_inversion+0xc>)
 8000718:	4013      	ands	r3, r2
 800071a:	6043      	str	r3, [r0, #4]
}
 800071c:	4770      	bx	lr
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	fffbffff 	.word	0xfffbffff

08000724 <usart_enable_tx_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_tx_inversion(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_TXINV;
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	6842      	ldr	r2, [r0, #4]
 8000728:	029b      	lsls	r3, r3, #10
 800072a:	4313      	orrs	r3, r2
 800072c:	6043      	str	r3, [r0, #4]
}
 800072e:	4770      	bx	lr

08000730 <usart_disable_tx_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_tx_inversion(uint32_t usart)
{
	USART_CR2(usart) &= ~USART_CR2_TXINV;
 8000730:	6843      	ldr	r3, [r0, #4]
 8000732:	4a02      	ldr	r2, [pc, #8]	; (800073c <usart_disable_tx_inversion+0xc>)
 8000734:	4013      	ands	r3, r2
 8000736:	6043      	str	r3, [r0, #4]
}
 8000738:	4770      	bx	lr
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	fffdffff 	.word	0xfffdffff

08000740 <usart_enable_rx_inversion>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_rx_inversion(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_RXINV;
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	6842      	ldr	r2, [r0, #4]
 8000744:	025b      	lsls	r3, r3, #9
 8000746:	4313      	orrs	r3, r2
 8000748:	6043      	str	r3, [r0, #4]
}
 800074a:	4770      	bx	lr

0800074c <usart_disable_rx_inversion>:
 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_rx_inversion(uint32_t usart)
{

	USART_CR2(usart) &= ~USART_CR2_RXINV;
 800074c:	6843      	ldr	r3, [r0, #4]
 800074e:	4a02      	ldr	r2, [pc, #8]	; (8000758 <usart_disable_rx_inversion+0xc>)
 8000750:	4013      	ands	r3, r2
 8000752:	6043      	str	r3, [r0, #4]
}
 8000754:	4770      	bx	lr
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	fffeffff 	.word	0xfffeffff

0800075c <usart_enable_halfduplex>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_halfduplex(uint32_t usart)
{
	USART_CR3(usart) |= USART_CR3_HDSEL;
 800075c:	2308      	movs	r3, #8
 800075e:	6882      	ldr	r2, [r0, #8]
 8000760:	4313      	orrs	r3, r2
 8000762:	6083      	str	r3, [r0, #8]
}
 8000764:	4770      	bx	lr

08000766 <usart_disable_halfduplex>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_halfduplex(uint32_t usart)
{
	USART_CR3(usart) &= ~USART_CR3_HDSEL;
 8000766:	2208      	movs	r2, #8
 8000768:	6883      	ldr	r3, [r0, #8]
 800076a:	4393      	bics	r3, r2
 800076c:	6083      	str	r3, [r0, #8]
}
 800076e:	4770      	bx	lr

08000770 <usart_set_rx_timeout_value>:
 @param[in] value The receive timeout value in terms of number of bit duration.
 */
void usart_set_rx_timeout_value(uint32_t usart, uint32_t value)
{
	uint32_t reg;
	reg = USART_RTOR(usart) & ~USART_RTOR_RTO_MASK;
 8000770:	6943      	ldr	r3, [r0, #20]
	reg |= (USART_RTOR_RTO_VAL(value) & USART_RTOR_RTO_MASK);
 8000772:	0309      	lsls	r1, r1, #12
	reg = USART_RTOR(usart) & ~USART_RTOR_RTO_MASK;
 8000774:	0d1b      	lsrs	r3, r3, #20
 8000776:	051b      	lsls	r3, r3, #20
	reg |= (USART_RTOR_RTO_VAL(value) & USART_RTOR_RTO_MASK);
 8000778:	0b09      	lsrs	r1, r1, #12
 800077a:	4319      	orrs	r1, r3
	USART_RTOR(usart) = reg;
 800077c:	6141      	str	r1, [r0, #20]
}
 800077e:	4770      	bx	lr

08000780 <usart_enable_rx_timeout>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_rx_timeout(uint32_t usart)
{
	USART_CR2(usart) |= USART_CR2_RTOEN;
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	6842      	ldr	r2, [r0, #4]
 8000784:	041b      	lsls	r3, r3, #16
 8000786:	4313      	orrs	r3, r2
 8000788:	6043      	str	r3, [r0, #4]
}
 800078a:	4770      	bx	lr

0800078c <usart_disable_rx_timeout>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_rx_timeout(uint32_t usart)
{
	USART_CR2(usart) &= ~USART_CR2_RTOEN;
 800078c:	6843      	ldr	r3, [r0, #4]
 800078e:	4a02      	ldr	r2, [pc, #8]	; (8000798 <usart_disable_rx_timeout+0xc>)
 8000790:	4013      	ands	r3, r2
 8000792:	6043      	str	r3, [r0, #4]
}
 8000794:	4770      	bx	lr
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	ff7fffff 	.word	0xff7fffff

0800079c <usart_enable_rx_timeout_interrupt>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_enable_rx_timeout_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_RTOIE;
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	6802      	ldr	r2, [r0, #0]
 80007a0:	04db      	lsls	r3, r3, #19
 80007a2:	4313      	orrs	r3, r2
 80007a4:	6003      	str	r3, [r0, #0]
}
 80007a6:	4770      	bx	lr

080007a8 <usart_disable_rx_timeout_interrupt>:

 @param[in] usart USART block register address base @ref usart_reg_base
 */
void usart_disable_rx_timeout_interrupt(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_RTOIE;
 80007a8:	6803      	ldr	r3, [r0, #0]
 80007aa:	4a02      	ldr	r2, [pc, #8]	; (80007b4 <usart_disable_rx_timeout_interrupt+0xc>)
 80007ac:	4013      	ands	r3, r2
 80007ae:	6003      	str	r3, [r0, #0]
}
 80007b0:	4770      	bx	lr
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	fbffffff 	.word	0xfbffffff

080007b8 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 80007b8:	05c9      	lsls	r1, r1, #23
 80007ba:	0dc9      	lsrs	r1, r1, #23
 80007bc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80007be:	4770      	bx	lr

080007c0 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 80007c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80007c2:	05c0      	lsls	r0, r0, #23
 80007c4:	0dc0      	lsrs	r0, r0, #23
}
 80007c6:	4770      	bx	lr

080007c8 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	69c2      	ldr	r2, [r0, #28]
 80007cc:	421a      	tst	r2, r3
 80007ce:	d0fc      	beq.n	80007ca <usart_wait_send_ready+0x2>
}
 80007d0:	4770      	bx	lr

080007d2 <usart_wait_recv_ready>:
 */

void usart_wait_recv_ready(uint32_t usart)
{
	/* Wait until the data is ready to be received. */
	while ((USART_ISR(usart) & USART_ISR_RXNE) == 0);
 80007d2:	2320      	movs	r3, #32
 80007d4:	69c2      	ldr	r2, [r0, #28]
 80007d6:	421a      	tst	r2, r3
 80007d8:	d0fc      	beq.n	80007d4 <usart_wait_recv_ready+0x2>
}
 80007da:	4770      	bx	lr

080007dc <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 80007dc:	69c0      	ldr	r0, [r0, #28]
 80007de:	4008      	ands	r0, r1
 80007e0:	1e41      	subs	r1, r0, #1
 80007e2:	4188      	sbcs	r0, r1
 80007e4:	b2c0      	uxtb	r0, r0
}
 80007e6:	4770      	bx	lr

080007e8 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 80007e8:	e7fe      	b.n	80007e8 <blocking_handler>

080007ea <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80007ea:	4770      	bx	lr

080007ec <reset_handler>:
{
 80007ec:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <reset_handler+0x5c>)
 80007f0:	4a16      	ldr	r2, [pc, #88]	; (800084c <reset_handler+0x60>)
 80007f2:	4917      	ldr	r1, [pc, #92]	; (8000850 <reset_handler+0x64>)
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d318      	bcc.n	800082a <reset_handler+0x3e>
		*dest++ = 0;
 80007f8:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <reset_handler+0x68>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d317      	bcc.n	8000830 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <reset_handler+0x6c>)
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000808:	4c14      	ldr	r4, [pc, #80]	; (800085c <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800080a:	430b      	orrs	r3, r1
 800080c:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <reset_handler+0x74>)
 8000810:	429c      	cmp	r4, r3
 8000812:	d30f      	bcc.n	8000834 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000814:	4c13      	ldr	r4, [pc, #76]	; (8000864 <reset_handler+0x78>)
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <reset_handler+0x7c>)
 8000818:	429c      	cmp	r4, r3
 800081a:	d30e      	bcc.n	800083a <reset_handler+0x4e>
	(void)main();
 800081c:	f7ff fc82 	bl	8000124 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000820:	4c12      	ldr	r4, [pc, #72]	; (800086c <reset_handler+0x80>)
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <reset_handler+0x84>)
 8000824:	429c      	cmp	r4, r3
 8000826:	d30b      	bcc.n	8000840 <reset_handler+0x54>
}
 8000828:	bd10      	pop	{r4, pc}
		*dest = *src;
 800082a:	ca01      	ldmia	r2!, {r0}
 800082c:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 800082e:	e7e1      	b.n	80007f4 <reset_handler+0x8>
		*dest++ = 0;
 8000830:	c302      	stmia	r3!, {r1}
 8000832:	e7e3      	b.n	80007fc <reset_handler+0x10>
		(*fp)();
 8000834:	cc08      	ldmia	r4!, {r3}
 8000836:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000838:	e7e9      	b.n	800080e <reset_handler+0x22>
		(*fp)();
 800083a:	cc08      	ldmia	r4!, {r3}
 800083c:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800083e:	e7ea      	b.n	8000816 <reset_handler+0x2a>
		(*fp)();
 8000840:	cc08      	ldmia	r4!, {r3}
 8000842:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000844:	e7ed      	b.n	8000822 <reset_handler+0x36>
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000000 	.word	0x20000000
 800084c:	08001bb8 	.word	0x08001bb8
 8000850:	20000028 	.word	0x20000028
 8000854:	20000028 	.word	0x20000028
 8000858:	e000ed14 	.word	0xe000ed14
 800085c:	08001bb8 	.word	0x08001bb8
 8000860:	08001bb8 	.word	0x08001bb8
 8000864:	08001bb8 	.word	0x08001bb8
 8000868:	08001bb8 	.word	0x08001bb8
 800086c:	08001bb8 	.word	0x08001bb8
 8000870:	08001bb8 	.word	0x08001bb8

08000874 <rcc_get_usart_clksel_freq>:
	rcc_apb1_frequency = 48000000;
	rcc_ahb_frequency = 48000000;
}

static uint32_t rcc_get_usart_clksel_freq(uint8_t shift) {
	uint8_t clksel = (RCC_CFGR3 >> shift) & RCC_CFGR3_USARTxSW_MASK;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <rcc_get_usart_clksel_freq+0x3c>)
 8000876:	2203      	movs	r2, #3
 8000878:	681b      	ldr	r3, [r3, #0]
static uint32_t rcc_get_usart_clksel_freq(uint8_t shift) {
 800087a:	b510      	push	{r4, lr}
	uint8_t clksel = (RCC_CFGR3 >> shift) & RCC_CFGR3_USARTxSW_MASK;
 800087c:	40c3      	lsrs	r3, r0
 800087e:	4013      	ands	r3, r2
	uint8_t hpre = (RCC_CFGR >> RCC_CFGR_HPRE_SHIFT) & RCC_CFGR_HPRE_MASK;
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <rcc_get_usart_clksel_freq+0x40>)
 8000882:	6810      	ldr	r0, [r2, #0]
	switch (clksel) {
 8000884:	2b01      	cmp	r3, #1
 8000886:	d006      	beq.n	8000896 <rcc_get_usart_clksel_freq+0x22>
 8000888:	2b03      	cmp	r3, #3
 800088a:	d00e      	beq.n	80008aa <rcc_get_usart_clksel_freq+0x36>
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10a      	bne.n	80008a6 <rcc_get_usart_clksel_freq+0x32>
		case RCC_CFGR3_USART1SW_PCLK:
			return rcc_apb1_frequency;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <rcc_get_usart_clksel_freq+0x44>)
 8000892:	6818      	ldr	r0, [r3, #0]
			return rcc_ahb_frequency * rcc_get_div_from_hpre(hpre);
		case RCC_CFGR3_USART1SW_HSI:
			return 8000000U;
	}
	cm3_assert_not_reached();
}
 8000894:	bd10      	pop	{r4, pc}
	uint8_t hpre = (RCC_CFGR >> RCC_CFGR_HPRE_SHIFT) & RCC_CFGR_HPRE_MASK;
 8000896:	0600      	lsls	r0, r0, #24
			return rcc_ahb_frequency * rcc_get_div_from_hpre(hpre);
 8000898:	0f00      	lsrs	r0, r0, #28
 800089a:	f7ff fe8d 	bl	80005b8 <rcc_get_div_from_hpre>
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <rcc_get_usart_clksel_freq+0x48>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4358      	muls	r0, r3
 80008a4:	e7f6      	b.n	8000894 <rcc_get_usart_clksel_freq+0x20>
	cm3_assert_not_reached();
 80008a6:	f000 fb1f 	bl	8000ee8 <cm3_assert_failed>
	switch (clksel) {
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <rcc_get_usart_clksel_freq+0x4c>)
 80008ac:	e7f2      	b.n	8000894 <rcc_get_usart_clksel_freq+0x20>
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40021030 	.word	0x40021030
 80008b4:	40021004 	.word	0x40021004
 80008b8:	20000024 	.word	0x20000024
 80008bc:	20000020 	.word	0x20000020
 80008c0:	007a1200 	.word	0x007a1200

080008c4 <rcc_osc_ready_int_clear>:
{
 80008c4:	b500      	push	{lr}
 80008c6:	2806      	cmp	r0, #6
 80008c8:	d80b      	bhi.n	80008e2 <rcc_osc_ready_int_clear+0x1e>
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <rcc_osc_ready_int_clear+0x38>)
		RCC_CIR |= RCC_CIR_HSI48RDYC;
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	6819      	ldr	r1, [r3, #0]
 80008d0:	f000 fe94 	bl	80015fc <__gnu_thumb1_case_uqi>
 80008d4:	0e0c0a08 	.word	0x0e0c0a08
 80008d8:	1012      	.short	0x1012
 80008da:	04          	.byte	0x04
 80008db:	00          	.byte	0x00
 80008dc:	03d2      	lsls	r2, r2, #15
		RCC_CIR |= RCC_CIR_LSIRDYC;
 80008de:	430a      	orrs	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	bd00      	pop	{pc}
		RCC_CIR |= RCC_CIR_HSI14RDYC;
 80008e4:	0392      	lsls	r2, r2, #14
 80008e6:	e7fa      	b.n	80008de <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_HSIRDYC;
 80008e8:	02d2      	lsls	r2, r2, #11
 80008ea:	e7f8      	b.n	80008de <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_HSERDYC;
 80008ec:	0312      	lsls	r2, r2, #12
 80008ee:	e7f6      	b.n	80008de <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_PLLRDYC;
 80008f0:	0352      	lsls	r2, r2, #13
 80008f2:	e7f4      	b.n	80008de <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_LSERDYC;
 80008f4:	0292      	lsls	r2, r2, #10
 80008f6:	e7f2      	b.n	80008de <rcc_osc_ready_int_clear+0x1a>
		RCC_CIR |= RCC_CIR_LSIRDYC;
 80008f8:	0252      	lsls	r2, r2, #9
 80008fa:	e7f0      	b.n	80008de <rcc_osc_ready_int_clear+0x1a>
 80008fc:	40021008 	.word	0x40021008

08000900 <rcc_osc_ready_int_enable>:
{
 8000900:	b500      	push	{lr}
 8000902:	2806      	cmp	r0, #6
 8000904:	d80b      	bhi.n	800091e <rcc_osc_ready_int_enable+0x1e>
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <rcc_osc_ready_int_enable+0x38>)
		RCC_CIR |= RCC_CIR_HSI48RDYIE;
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	6819      	ldr	r1, [r3, #0]
 800090c:	f000 fe76 	bl	80015fc <__gnu_thumb1_case_uqi>
 8000910:	0e0c0a08 	.word	0x0e0c0a08
 8000914:	1012      	.short	0x1012
 8000916:	04          	.byte	0x04
 8000917:	00          	.byte	0x00
 8000918:	01d2      	lsls	r2, r2, #7
		RCC_CIR |= RCC_CIR_LSIRDYIE;
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
}
 800091e:	bd00      	pop	{pc}
		RCC_CIR |= RCC_CIR_HSI14RDYIE;
 8000920:	0192      	lsls	r2, r2, #6
 8000922:	e7fa      	b.n	800091a <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_HSIRDYIE;
 8000924:	00d2      	lsls	r2, r2, #3
 8000926:	e7f8      	b.n	800091a <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_HSERDYIE;
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	e7f6      	b.n	800091a <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_PLLRDYIE;
 800092c:	0152      	lsls	r2, r2, #5
 800092e:	e7f4      	b.n	800091a <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_LSERDYIE;
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	e7f2      	b.n	800091a <rcc_osc_ready_int_enable+0x1a>
		RCC_CIR |= RCC_CIR_LSIRDYIE;
 8000934:	0052      	lsls	r2, r2, #1
 8000936:	e7f0      	b.n	800091a <rcc_osc_ready_int_enable+0x1a>
 8000938:	40021008 	.word	0x40021008

0800093c <rcc_osc_ready_int_disable>:
{
 800093c:	b500      	push	{lr}
 800093e:	2806      	cmp	r0, #6
 8000940:	d80a      	bhi.n	8000958 <rcc_osc_ready_int_disable+0x1c>
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <rcc_osc_ready_int_disable+0x38>)
		RCC_CIR &= ~RCC_CIR_HSI48RDYC;
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f000 fe59 	bl	80015fc <__gnu_thumb1_case_uqi>
 800094a:	0a08      	.short	0x0a08
 800094c:	10120e0c 	.word	0x10120e0c
 8000950:	04          	.byte	0x04
 8000951:	00          	.byte	0x00
 8000952:	4909      	ldr	r1, [pc, #36]	; (8000978 <rcc_osc_ready_int_disable+0x3c>)
		RCC_CIR &= ~RCC_CIR_LSIRDYC;
 8000954:	400a      	ands	r2, r1
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	bd00      	pop	{pc}
		RCC_CIR &= ~RCC_CIR_HSI14RDYC;
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <rcc_osc_ready_int_disable+0x40>)
 800095c:	e7fa      	b.n	8000954 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_HSIRDYC;
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <rcc_osc_ready_int_disable+0x44>)
 8000960:	e7f8      	b.n	8000954 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_HSERDYC;
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <rcc_osc_ready_int_disable+0x48>)
 8000964:	e7f6      	b.n	8000954 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_PLLRDYC;
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <rcc_osc_ready_int_disable+0x4c>)
 8000968:	e7f4      	b.n	8000954 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_LSERDYC;
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <rcc_osc_ready_int_disable+0x50>)
 800096c:	e7f2      	b.n	8000954 <rcc_osc_ready_int_disable+0x18>
		RCC_CIR &= ~RCC_CIR_LSIRDYC;
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <rcc_osc_ready_int_disable+0x54>)
 8000970:	e7f0      	b.n	8000954 <rcc_osc_ready_int_disable+0x18>
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40021008 	.word	0x40021008
 8000978:	ffbfffff 	.word	0xffbfffff
 800097c:	ffdfffff 	.word	0xffdfffff
 8000980:	fffbffff 	.word	0xfffbffff
 8000984:	fff7ffff 	.word	0xfff7ffff
 8000988:	ffefffff 	.word	0xffefffff
 800098c:	fffdffff 	.word	0xfffdffff
 8000990:	fffeffff 	.word	0xfffeffff

08000994 <rcc_osc_ready_int_flag>:
{
 8000994:	b510      	push	{r4, lr}
 8000996:	2806      	cmp	r0, #6
 8000998:	d81c      	bhi.n	80009d4 <rcc_osc_ready_int_flag+0x40>
 800099a:	2301      	movs	r3, #1
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <rcc_osc_ready_int_flag+0x44>)
 800099e:	f000 fe2d 	bl	80015fc <__gnu_thumb1_case_uqi>
 80009a2:	0b08      	.short	0x0b08
 80009a4:	1417110e 	.word	0x1417110e
 80009a8:	04          	.byte	0x04
 80009a9:	00          	.byte	0x00
		return (RCC_CIR & RCC_CIR_HSI48RDYF) != 0;
 80009aa:	6810      	ldr	r0, [r2, #0]
 80009ac:	0980      	lsrs	r0, r0, #6
		return (RCC_CIR & RCC_CIR_LSIRDYF) != 0;
 80009ae:	4018      	ands	r0, r3
}
 80009b0:	bd10      	pop	{r4, pc}
		return (RCC_CIR & RCC_CIR_HSI14RDYF) != 0;
 80009b2:	6810      	ldr	r0, [r2, #0]
 80009b4:	0940      	lsrs	r0, r0, #5
 80009b6:	e7fa      	b.n	80009ae <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_HSIRDYF) != 0;
 80009b8:	6810      	ldr	r0, [r2, #0]
 80009ba:	0880      	lsrs	r0, r0, #2
 80009bc:	e7f7      	b.n	80009ae <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_HSERDYF) != 0;
 80009be:	6810      	ldr	r0, [r2, #0]
 80009c0:	08c0      	lsrs	r0, r0, #3
 80009c2:	e7f4      	b.n	80009ae <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_PLLRDYF) != 0;
 80009c4:	6810      	ldr	r0, [r2, #0]
 80009c6:	0900      	lsrs	r0, r0, #4
 80009c8:	e7f1      	b.n	80009ae <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_LSERDYF) != 0;
 80009ca:	6810      	ldr	r0, [r2, #0]
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	e7ee      	b.n	80009ae <rcc_osc_ready_int_flag+0x1a>
		return (RCC_CIR & RCC_CIR_LSIRDYF) != 0;
 80009d0:	6810      	ldr	r0, [r2, #0]
 80009d2:	e7ec      	b.n	80009ae <rcc_osc_ready_int_flag+0x1a>
	cm3_assert_not_reached();
 80009d4:	f000 fa88 	bl	8000ee8 <cm3_assert_failed>
 80009d8:	40021008 	.word	0x40021008

080009dc <rcc_css_int_clear>:
	RCC_CIR |= RCC_CIR_CSSC;
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	4a03      	ldr	r2, [pc, #12]	; (80009ec <rcc_css_int_clear+0x10>)
 80009e0:	041b      	lsls	r3, r3, #16
 80009e2:	6811      	ldr	r1, [r2, #0]
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	4770      	bx	lr
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40021008 	.word	0x40021008

080009f0 <rcc_css_int_flag>:
	return ((RCC_CIR & RCC_CIR_CSSF) != 0);
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <rcc_css_int_flag+0xc>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	0600      	lsls	r0, r0, #24
 80009f6:	0fc0      	lsrs	r0, r0, #31
}
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021008 	.word	0x40021008

08000a00 <rcc_is_osc_ready>:
{
 8000a00:	2300      	movs	r3, #0
 8000a02:	b500      	push	{lr}
 8000a04:	2806      	cmp	r0, #6
 8000a06:	d80a      	bhi.n	8000a1e <rcc_is_osc_ready+0x1e>
 8000a08:	3301      	adds	r3, #1
 8000a0a:	f000 fdf7 	bl	80015fc <__gnu_thumb1_case_uqi>
 8000a0e:	0e0a      	.short	0x0e0a
 8000a10:	16181210 	.word	0x16181210
 8000a14:	04          	.byte	0x04
 8000a15:	00          	.byte	0x00
		return RCC_CR2 & RCC_CR2_HSI48RDY;
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <rcc_is_osc_ready+0x44>)
		return RCC_CR & RCC_CR_HSERDY;
 8000a18:	6810      	ldr	r0, [r2, #0]
 8000a1a:	0c40      	lsrs	r0, r0, #17
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a1c:	4003      	ands	r3, r0
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	bd00      	pop	{pc}
		return RCC_CR2 & RCC_CR2_HSI14RDY;
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <rcc_is_osc_ready+0x44>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a24:	6810      	ldr	r0, [r2, #0]
 8000a26:	0840      	lsrs	r0, r0, #1
 8000a28:	e7f8      	b.n	8000a1c <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSIRDY;
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <rcc_is_osc_ready+0x48>)
 8000a2c:	e7fa      	b.n	8000a24 <rcc_is_osc_ready+0x24>
		return RCC_CR & RCC_CR_HSERDY;
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <rcc_is_osc_ready+0x48>)
 8000a30:	e7f2      	b.n	8000a18 <rcc_is_osc_ready+0x18>
		return RCC_CR & RCC_CR_PLLRDY;
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <rcc_is_osc_ready+0x48>)
 8000a34:	6810      	ldr	r0, [r2, #0]
 8000a36:	0e40      	lsrs	r0, r0, #25
 8000a38:	e7f0      	b.n	8000a1c <rcc_is_osc_ready+0x1c>
		return RCC_BDCR & RCC_BDCR_LSERDY;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <rcc_is_osc_ready+0x4c>)
 8000a3c:	e7f2      	b.n	8000a24 <rcc_is_osc_ready+0x24>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <rcc_is_osc_ready+0x50>)
 8000a40:	e7f0      	b.n	8000a24 <rcc_is_osc_ready+0x24>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40021034 	.word	0x40021034
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40021020 	.word	0x40021020
 8000a50:	40021024 	.word	0x40021024

08000a54 <rcc_wait_for_osc_ready>:
{
 8000a54:	b510      	push	{r4, lr}
 8000a56:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8000a58:	0020      	movs	r0, r4
 8000a5a:	f7ff ffd1 	bl	8000a00 <rcc_is_osc_ready>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d0fa      	beq.n	8000a58 <rcc_wait_for_osc_ready+0x4>
}
 8000a62:	bd10      	pop	{r4, pc}

08000a64 <rcc_osc_on>:
{
 8000a64:	b500      	push	{lr}
 8000a66:	2806      	cmp	r0, #6
 8000a68:	d80b      	bhi.n	8000a82 <rcc_osc_on+0x1e>
 8000a6a:	f000 fdc7 	bl	80015fc <__gnu_thumb1_case_uqi>
 8000a6e:	0f0b      	.short	0x0f0b
 8000a70:	13151711 	.word	0x13151711
 8000a74:	04          	.byte	0x04
 8000a75:	00          	.byte	0x00
		RCC_CR2 |= RCC_CR2_HSI48ON;
 8000a76:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <rcc_osc_on+0x44>)
		RCC_CR |= RCC_CR_HSEON;
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	6811      	ldr	r1, [r2, #0]
 8000a7c:	025b      	lsls	r3, r3, #9
		RCC_CR |= RCC_CR_PLLON;
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
}
 8000a82:	bd00      	pop	{pc}
		RCC_CR2 |= RCC_CR2_HSI14ON;
 8000a84:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <rcc_osc_on+0x44>)
		RCC_CSR |= RCC_CSR_LSION;
 8000a86:	2301      	movs	r3, #1
 8000a88:	6811      	ldr	r1, [r2, #0]
 8000a8a:	e7f8      	b.n	8000a7e <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSION;
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <rcc_osc_on+0x48>)
 8000a8e:	e7fa      	b.n	8000a86 <rcc_osc_on+0x22>
		RCC_CR |= RCC_CR_HSEON;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <rcc_osc_on+0x48>)
 8000a92:	e7f1      	b.n	8000a78 <rcc_osc_on+0x14>
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <rcc_osc_on+0x4c>)
 8000a96:	e7f6      	b.n	8000a86 <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8000a98:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <rcc_osc_on+0x50>)
 8000a9a:	e7f4      	b.n	8000a86 <rcc_osc_on+0x22>
		RCC_CR |= RCC_CR_PLLON;
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	4a03      	ldr	r2, [pc, #12]	; (8000aac <rcc_osc_on+0x48>)
 8000aa0:	045b      	lsls	r3, r3, #17
 8000aa2:	6811      	ldr	r1, [r2, #0]
 8000aa4:	e7eb      	b.n	8000a7e <rcc_osc_on+0x1a>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40021034 	.word	0x40021034
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021020 	.word	0x40021020
 8000ab4:	40021024 	.word	0x40021024

08000ab8 <rcc_osc_off>:
{
 8000ab8:	b500      	push	{lr}
 8000aba:	2806      	cmp	r0, #6
 8000abc:	d80a      	bhi.n	8000ad4 <rcc_osc_off+0x1c>
 8000abe:	f000 fd9d 	bl	80015fc <__gnu_thumb1_case_uqi>
 8000ac2:	0f0a      	.short	0x0f0a
 8000ac4:	13150911 	.word	0x13150911
 8000ac8:	04          	.byte	0x04
 8000ac9:	00          	.byte	0x00
		RCC_CR2 &= ~RCC_CR2_HSI48ON;
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <rcc_osc_off+0x38>)
		RCC_CR &= ~RCC_CR_HSEON;
 8000acc:	6813      	ldr	r3, [r2, #0]
 8000ace:	4909      	ldr	r1, [pc, #36]	; (8000af4 <rcc_osc_off+0x3c>)
 8000ad0:	400b      	ands	r3, r1
		RCC_CSR &= ~RCC_CSR_LSION;
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bd00      	pop	{pc}
		RCC_CR2 &= ~RCC_CR2_HSI14ON;
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <rcc_osc_off+0x38>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8000ad8:	2101      	movs	r1, #1
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	438b      	bics	r3, r1
 8000ade:	e7f8      	b.n	8000ad2 <rcc_osc_off+0x1a>
		RCC_CR &= ~RCC_CR_HSION;
 8000ae0:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <rcc_osc_off+0x40>)
 8000ae2:	e7f9      	b.n	8000ad8 <rcc_osc_off+0x20>
		RCC_CR &= ~RCC_CR_HSEON;
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <rcc_osc_off+0x40>)
 8000ae6:	e7f1      	b.n	8000acc <rcc_osc_off+0x14>
		RCC_BDCR &= ~RCC_BDCR_LSEON;
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <rcc_osc_off+0x44>)
 8000aea:	e7f5      	b.n	8000ad8 <rcc_osc_off+0x20>
		RCC_CSR &= ~RCC_CSR_LSION;
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <rcc_osc_off+0x48>)
 8000aee:	e7f3      	b.n	8000ad8 <rcc_osc_off+0x20>
 8000af0:	40021034 	.word	0x40021034
 8000af4:	fffeffff 	.word	0xfffeffff
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40021020 	.word	0x40021020
 8000b00:	40021024 	.word	0x40021024

08000b04 <rcc_css_enable>:
	RCC_CR |= RCC_CR_CSSON;
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <rcc_css_enable+0x10>)
 8000b08:	031b      	lsls	r3, r3, #12
 8000b0a:	6811      	ldr	r1, [r2, #0]
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	4770      	bx	lr
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40021000 	.word	0x40021000

08000b18 <rcc_css_disable>:
	RCC_CR &= ~RCC_CR_CSSON;
 8000b18:	4a02      	ldr	r2, [pc, #8]	; (8000b24 <rcc_css_disable+0xc>)
 8000b1a:	4903      	ldr	r1, [pc, #12]	; (8000b28 <rcc_css_disable+0x10>)
 8000b1c:	6813      	ldr	r3, [r2, #0]
 8000b1e:	400b      	ands	r3, r1
 8000b20:	6013      	str	r3, [r2, #0]
}
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000
 8000b28:	fff7ffff 	.word	0xfff7ffff

08000b2c <rcc_set_sysclk_source>:
	switch (clk) {
 8000b2c:	3801      	subs	r0, #1
{
 8000b2e:	b500      	push	{lr}
 8000b30:	2805      	cmp	r0, #5
 8000b32:	d812      	bhi.n	8000b5a <rcc_set_sysclk_source+0x2e>
 8000b34:	f000 fd62 	bl	80015fc <__gnu_thumb1_case_uqi>
 8000b38:	11120903 	.word	0x11120903
 8000b3c:	1911      	.short	0x1911
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSI;
 8000b3e:	2103      	movs	r1, #3
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <rcc_set_sysclk_source+0x48>)
 8000b42:	6813      	ldr	r3, [r2, #0]
 8000b44:	438b      	bics	r3, r1
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	e007      	b.n	8000b5a <rcc_set_sysclk_source+0x2e>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	4909      	ldr	r1, [pc, #36]	; (8000b74 <rcc_set_sysclk_source+0x48>)
 8000b4e:	680b      	ldr	r3, [r1, #0]
 8000b50:	4393      	bics	r3, r2
 8000b52:	001a      	movs	r2, r3
 8000b54:	2301      	movs	r3, #1
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_PLL;
 8000b56:	4313      	orrs	r3, r2
 8000b58:	600b      	str	r3, [r1, #0]
}
 8000b5a:	bd00      	pop	{pc}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_PLL;
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	4905      	ldr	r1, [pc, #20]	; (8000b74 <rcc_set_sysclk_source+0x48>)
 8000b60:	680b      	ldr	r3, [r1, #0]
 8000b62:	4393      	bics	r3, r2
 8000b64:	001a      	movs	r2, r3
 8000b66:	2302      	movs	r3, #2
 8000b68:	e7f5      	b.n	8000b56 <rcc_set_sysclk_source+0x2a>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSI48;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <rcc_set_sysclk_source+0x48>)
 8000b6e:	6811      	ldr	r1, [r2, #0]
 8000b70:	430b      	orrs	r3, r1
 8000b72:	e7e8      	b.n	8000b46 <rcc_set_sysclk_source+0x1a>
 8000b74:	40021004 	.word	0x40021004

08000b78 <rcc_set_usbclk_source>:
	switch (clk) {
 8000b78:	2803      	cmp	r0, #3
 8000b7a:	d002      	beq.n	8000b82 <rcc_set_usbclk_source+0xa>
 8000b7c:	2806      	cmp	r0, #6
 8000b7e:	d006      	beq.n	8000b8e <rcc_set_usbclk_source+0x16>
}
 8000b80:	4770      	bx	lr
		RCC_CFGR3 |= RCC_CFGR3_USBSW;
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <rcc_set_usbclk_source+0x20>)
 8000b86:	6811      	ldr	r1, [r2, #0]
 8000b88:	430b      	orrs	r3, r1
		RCC_CFGR3 &= ~RCC_CFGR3_USBSW;
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	e7f8      	b.n	8000b80 <rcc_set_usbclk_source+0x8>
		RCC_CFGR3 &= ~RCC_CFGR3_USBSW;
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	4a01      	ldr	r2, [pc, #4]	; (8000b98 <rcc_set_usbclk_source+0x20>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	438b      	bics	r3, r1
 8000b96:	e7f8      	b.n	8000b8a <rcc_set_usbclk_source+0x12>
 8000b98:	40021030 	.word	0x40021030

08000b9c <rcc_enable_rtc_clock>:
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	4a03      	ldr	r2, [pc, #12]	; (8000bac <rcc_enable_rtc_clock+0x10>)
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	6811      	ldr	r1, [r2, #0]
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	40021020 	.word	0x40021020

08000bb0 <rcc_disable_rtc_clock>:
	RCC_BDCR &= ~RCC_BDCR_RTCEN;
 8000bb0:	4a02      	ldr	r2, [pc, #8]	; (8000bbc <rcc_disable_rtc_clock+0xc>)
 8000bb2:	4903      	ldr	r1, [pc, #12]	; (8000bc0 <rcc_disable_rtc_clock+0x10>)
 8000bb4:	6813      	ldr	r3, [r2, #0]
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	6013      	str	r3, [r2, #0]
}
 8000bba:	4770      	bx	lr
 8000bbc:	40021020 	.word	0x40021020
 8000bc0:	ffff7fff 	.word	0xffff7fff

08000bc4 <rcc_set_rtc_clock_source>:
	switch (clk) {
 8000bc4:	2804      	cmp	r0, #4
 8000bc6:	d013      	beq.n	8000bf0 <rcc_set_rtc_clock_source+0x2c>
 8000bc8:	2805      	cmp	r0, #5
 8000bca:	d008      	beq.n	8000bde <rcc_set_rtc_clock_source+0x1a>
 8000bcc:	2802      	cmp	r0, #2
 8000bce:	d105      	bne.n	8000bdc <rcc_set_rtc_clock_source+0x18>
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_HSE;
 8000bd0:	23c0      	movs	r3, #192	; 0xc0
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <rcc_set_rtc_clock_source+0x3c>)
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	6811      	ldr	r1, [r2, #0]
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	4770      	bx	lr
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_LSE;
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <rcc_set_rtc_clock_source+0x3c>)
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <rcc_set_rtc_clock_source+0x40>)
 8000be2:	680b      	ldr	r3, [r1, #0]
 8000be4:	401a      	ands	r2, r3
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	005b      	lsls	r3, r3, #1
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_LSI;
 8000bea:	4313      	orrs	r3, r2
 8000bec:	600b      	str	r3, [r1, #0]
}
 8000bee:	e7f5      	b.n	8000bdc <rcc_set_rtc_clock_source+0x18>
		RCC_BDCR = (RCC_BDCR & ~RCC_BDCR_RTCSEL) | RCC_BDCR_RTCSEL_LSI;
 8000bf0:	4903      	ldr	r1, [pc, #12]	; (8000c00 <rcc_set_rtc_clock_source+0x3c>)
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <rcc_set_rtc_clock_source+0x40>)
 8000bf4:	680b      	ldr	r3, [r1, #0]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	e7f5      	b.n	8000bea <rcc_set_rtc_clock_source+0x26>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40021020 	.word	0x40021020
 8000c04:	fffffcff 	.word	0xfffffcff

08000c08 <rcc_set_pll_multiplication_factor>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) | mul;
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <rcc_set_pll_multiplication_factor+0x10>)
 8000c0a:	4904      	ldr	r1, [pc, #16]	; (8000c1c <rcc_set_pll_multiplication_factor+0x14>)
 8000c0c:	6813      	ldr	r3, [r2, #0]
 8000c0e:	400b      	ands	r3, r1
 8000c10:	4303      	orrs	r3, r0
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	4770      	bx	lr
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40021004 	.word	0x40021004
 8000c1c:	ffc3ffff 	.word	0xffc3ffff

08000c20 <rcc_set_pll_source>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <rcc_set_pll_source+0x10>)
 8000c22:	4904      	ldr	r1, [pc, #16]	; (8000c34 <rcc_set_pll_source+0x14>)
 8000c24:	6813      	ldr	r3, [r2, #0]
			(pllsrc << 16);
 8000c26:	0400      	lsls	r0, r0, #16
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000c28:	400b      	ands	r3, r1
 8000c2a:	4303      	orrs	r3, r0
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	4770      	bx	lr
 8000c30:	40021004 	.word	0x40021004
 8000c34:	fffeffff 	.word	0xfffeffff

08000c38 <rcc_set_pllxtpre>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <rcc_set_pllxtpre+0x10>)
 8000c3a:	4904      	ldr	r1, [pc, #16]	; (8000c4c <rcc_set_pllxtpre+0x14>)
 8000c3c:	6813      	ldr	r3, [r2, #0]
			(pllxtpre << 17);
 8000c3e:	0440      	lsls	r0, r0, #17
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000c40:	400b      	ands	r3, r1
 8000c42:	4303      	orrs	r3, r0
 8000c44:	6013      	str	r3, [r2, #0]
}
 8000c46:	4770      	bx	lr
 8000c48:	40021004 	.word	0x40021004
 8000c4c:	fffdffff 	.word	0xfffdffff

08000c50 <rcc_set_ppre>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE) | ppre;
 8000c50:	4a03      	ldr	r2, [pc, #12]	; (8000c60 <rcc_set_ppre+0x10>)
 8000c52:	4904      	ldr	r1, [pc, #16]	; (8000c64 <rcc_set_ppre+0x14>)
 8000c54:	6813      	ldr	r3, [r2, #0]
 8000c56:	400b      	ands	r3, r1
 8000c58:	4303      	orrs	r3, r0
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	4770      	bx	lr
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40021004 	.word	0x40021004
 8000c64:	fffff8ff 	.word	0xfffff8ff

08000c68 <rcc_set_hpre>:
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) | hpre;
 8000c68:	21f0      	movs	r1, #240	; 0xf0
 8000c6a:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <rcc_set_hpre+0x10>)
 8000c6c:	6813      	ldr	r3, [r2, #0]
 8000c6e:	438b      	bics	r3, r1
 8000c70:	4303      	orrs	r3, r0
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	4770      	bx	lr
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40021004 	.word	0x40021004

08000c7c <rcc_set_prediv>:
	RCC_CFGR2 = (RCC_CFGR2 & ~RCC_CFGR2_PREDIV) | prediv;
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <rcc_set_prediv+0x10>)
 8000c80:	6813      	ldr	r3, [r2, #0]
 8000c82:	438b      	bics	r3, r1
 8000c84:	4303      	orrs	r3, r0
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	4002102c 	.word	0x4002102c

08000c90 <rcc_system_clock_source>:
	switch (RCC_CFGR & RCC_CFGR_SWS) {
 8000c90:	220c      	movs	r2, #12
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <rcc_system_clock_source+0x30>)
{
 8000c94:	b510      	push	{r4, lr}
	switch (RCC_CFGR & RCC_CFGR_SWS) {
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d00b      	beq.n	8000cb6 <rcc_system_clock_source+0x26>
 8000c9e:	d806      	bhi.n	8000cae <rcc_system_clock_source+0x1e>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00a      	beq.n	8000cba <rcc_system_clock_source+0x2a>
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d004      	beq.n	8000cb4 <rcc_system_clock_source+0x24>
	cm3_assert_not_reached();
 8000caa:	f000 f91d 	bl	8000ee8 <cm3_assert_failed>
		return RCC_HSI48;
 8000cae:	2006      	movs	r0, #6
	switch (RCC_CFGR & RCC_CFGR_SWS) {
 8000cb0:	2b0c      	cmp	r3, #12
 8000cb2:	d1fa      	bne.n	8000caa <rcc_system_clock_source+0x1a>
}
 8000cb4:	bd10      	pop	{r4, pc}
		return RCC_PLL;
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e7fc      	b.n	8000cb4 <rcc_system_clock_source+0x24>
		return RCC_HSI;
 8000cba:	2001      	movs	r0, #1
 8000cbc:	e7fa      	b.n	8000cb4 <rcc_system_clock_source+0x24>
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40021004 	.word	0x40021004

08000cc4 <rcc_set_i2c_clock_hsi>:
	if (i2c == I2C1) {
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <rcc_set_i2c_clock_hsi+0x14>)
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d104      	bne.n	8000cd4 <rcc_set_i2c_clock_hsi+0x10>
		RCC_CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <rcc_set_i2c_clock_hsi+0x18>)
 8000cce:	6813      	ldr	r3, [r2, #0]
 8000cd0:	438b      	bics	r3, r1
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	4770      	bx	lr
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40021030 	.word	0x40021030

08000ce0 <rcc_set_i2c_clock_sysclk>:
	if (i2c == I2C1) {
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <rcc_set_i2c_clock_sysclk+0x14>)
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d104      	bne.n	8000cf0 <rcc_set_i2c_clock_sysclk+0x10>
		RCC_CFGR3 |= RCC_CFGR3_I2C1SW;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <rcc_set_i2c_clock_sysclk+0x18>)
 8000cea:	6811      	ldr	r1, [r2, #0]
 8000cec:	430b      	orrs	r3, r1
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	4770      	bx	lr
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	40021030 	.word	0x40021030

08000cfc <rcc_get_i2c_clocks>:
	return RCC_CFGR3 & RCC_CFGR3_I2C1SW;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <rcc_get_i2c_clocks+0xc>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	2310      	movs	r3, #16
 8000d02:	4018      	ands	r0, r3
}
 8000d04:	4770      	bx	lr
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40021030 	.word	0x40021030

08000d0c <rcc_usb_clock_source>:
	return (RCC_CFGR3 & RCC_CFGR3_USBSW) ? RCC_PLL : RCC_HSI48;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <rcc_usb_clock_source+0x10>)
 8000d0e:	2003      	movs	r0, #3
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	d400      	bmi.n	8000d18 <rcc_usb_clock_source+0xc>
 8000d16:	1800      	adds	r0, r0, r0
}
 8000d18:	4770      	bx	lr
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40021030 	.word	0x40021030

08000d20 <rcc_clock_setup_in_hse_8mhz_out_48mhz>:
{
 8000d20:	b570      	push	{r4, r5, r6, lr}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000d22:	2403      	movs	r4, #3
 8000d24:	2501      	movs	r5, #1
	rcc_osc_on(RCC_HSE);
 8000d26:	2002      	movs	r0, #2
 8000d28:	f7ff fe9c 	bl	8000a64 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSE);
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fe91 	bl	8000a54 <rcc_wait_for_osc_ready>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x64>)
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000d34:	2000      	movs	r0, #0
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_HSE;
 8000d36:	6813      	ldr	r3, [r2, #0]
 8000d38:	43a3      	bics	r3, r4
 8000d3a:	432b      	orrs	r3, r5
 8000d3c:	6013      	str	r3, [r2, #0]
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000d3e:	f7ff ff93 	bl	8000c68 <rcc_set_hpre>
	rcc_set_ppre(RCC_CFGR_PPRE_NODIV);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff ff84 	bl	8000c50 <rcc_set_ppre>
	flash_prefetch_enable();
 8000d48:	f000 f8d2 	bl	8000ef0 <flash_prefetch_enable>
	flash_set_ws(FLASH_ACR_LATENCY_024_048MHZ);
 8000d4c:	0028      	movs	r0, r5
 8000d4e:	f000 f8df 	bl	8000f10 <flash_set_ws>
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_MUL6);
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	0340      	lsls	r0, r0, #13
 8000d56:	f7ff ff57 	bl	8000c08 <rcc_set_pll_multiplication_factor>
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 8000d5a:	0028      	movs	r0, r5
 8000d5c:	f7ff ff60 	bl	8000c20 <rcc_set_pll_source>
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ff69 	bl	8000c38 <rcc_set_pllxtpre>
	rcc_osc_on(RCC_PLL);
 8000d66:	0020      	movs	r0, r4
 8000d68:	f7ff fe7c 	bl	8000a64 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_PLL);
 8000d6c:	0020      	movs	r0, r4
 8000d6e:	f7ff fe71 	bl	8000a54 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_PLL);
 8000d72:	0020      	movs	r0, r4
 8000d74:	f7ff feda 	bl	8000b2c <rcc_set_sysclk_source>
	rcc_apb1_frequency = 48000000;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x68>)
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x6c>)
 8000d7c:	6013      	str	r3, [r2, #0]
	rcc_ahb_frequency = 48000000;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <rcc_clock_setup_in_hse_8mhz_out_48mhz+0x70>)
 8000d80:	6013      	str	r3, [r2, #0]
}
 8000d82:	bd70      	pop	{r4, r5, r6, pc}
 8000d84:	40021004 	.word	0x40021004
 8000d88:	02dc6c00 	.word	0x02dc6c00
 8000d8c:	20000024 	.word	0x20000024
 8000d90:	20000020 	.word	0x20000020

08000d94 <rcc_clock_setup_in_hsi_out_48mhz>:
{
 8000d94:	b510      	push	{r4, lr}
	rcc_osc_on(RCC_HSI);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fe64 	bl	8000a64 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fe59 	bl	8000a54 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_HSI);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff fec2 	bl	8000b2c <rcc_set_sysclk_source>
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff5d 	bl	8000c68 <rcc_set_hpre>
	rcc_set_ppre(RCC_CFGR_PPRE_NODIV);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff ff4e 	bl	8000c50 <rcc_set_ppre>
	flash_prefetch_enable();
 8000db4:	f000 f89c 	bl	8000ef0 <flash_prefetch_enable>
	flash_set_ws(FLASH_ACR_LATENCY_024_048MHZ);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 f8a9 	bl	8000f10 <flash_set_ws>
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_MUL12);
 8000dbe:	20a0      	movs	r0, #160	; 0xa0
 8000dc0:	0380      	lsls	r0, r0, #14
 8000dc2:	f7ff ff21 	bl	8000c08 <rcc_set_pll_multiplication_factor>
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSI_CLK_DIV2);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff ff2a 	bl	8000c20 <rcc_set_pll_source>
	rcc_osc_on(RCC_PLL);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f7ff fe49 	bl	8000a64 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_PLL);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f7ff fe3e 	bl	8000a54 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_PLL);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f7ff fea7 	bl	8000b2c <rcc_set_sysclk_source>
	rcc_apb1_frequency = 48000000;
 8000dde:	4b03      	ldr	r3, [pc, #12]	; (8000dec <rcc_clock_setup_in_hsi_out_48mhz+0x58>)
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <rcc_clock_setup_in_hsi_out_48mhz+0x5c>)
 8000de2:	6013      	str	r3, [r2, #0]
	rcc_ahb_frequency = 48000000;
 8000de4:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <rcc_clock_setup_in_hsi_out_48mhz+0x60>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	02dc6c00 	.word	0x02dc6c00
 8000df0:	20000024 	.word	0x20000024
 8000df4:	20000020 	.word	0x20000020

08000df8 <rcc_clock_setup_in_hsi48_out_48mhz>:
{
 8000df8:	b510      	push	{r4, lr}
	rcc_osc_on(RCC_HSI48);
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	f7ff fe32 	bl	8000a64 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI48);
 8000e00:	2006      	movs	r0, #6
 8000e02:	f7ff fe27 	bl	8000a54 <rcc_wait_for_osc_ready>
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff2e 	bl	8000c68 <rcc_set_hpre>
	rcc_set_ppre(RCC_CFGR_PPRE_NODIV);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff1f 	bl	8000c50 <rcc_set_ppre>
	flash_prefetch_enable();
 8000e12:	f000 f86d 	bl	8000ef0 <flash_prefetch_enable>
	flash_set_ws(FLASH_ACR_LATENCY_024_048MHZ);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 f87a 	bl	8000f10 <flash_set_ws>
	rcc_set_sysclk_source(RCC_HSI48);
 8000e1c:	2006      	movs	r0, #6
 8000e1e:	f7ff fe85 	bl	8000b2c <rcc_set_sysclk_source>
	rcc_apb1_frequency = 48000000;
 8000e22:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <rcc_clock_setup_in_hsi48_out_48mhz+0x38>)
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <rcc_clock_setup_in_hsi48_out_48mhz+0x3c>)
 8000e26:	6013      	str	r3, [r2, #0]
	rcc_ahb_frequency = 48000000;
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <rcc_clock_setup_in_hsi48_out_48mhz+0x40>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bd10      	pop	{r4, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	02dc6c00 	.word	0x02dc6c00
 8000e34:	20000024 	.word	0x20000024
 8000e38:	20000020 	.word	0x20000020

08000e3c <rcc_get_usart_clk_freq>:
/** @brief Get the peripheral clock speed for the USART at base specified.
 * @param usart  Base address of USART to get clock frequency for.
 */
uint32_t rcc_get_usart_clk_freq(uint32_t usart)
{
	if (usart == USART1_BASE) {
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <rcc_get_usart_clk_freq+0x2c>)
{
 8000e3e:	b510      	push	{r4, lr}
	if (usart == USART1_BASE) {
 8000e40:	4298      	cmp	r0, r3
 8000e42:	d103      	bne.n	8000e4c <rcc_get_usart_clk_freq+0x10>
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART1SW_SHIFT);
 8000e44:	2000      	movs	r0, #0
	} else if (usart == USART2_BASE) {
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART2SW_SHIFT);
	} else if (usart == USART3_BASE) {
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART3SW_SHIFT);
 8000e46:	f7ff fd15 	bl	8000874 <rcc_get_usart_clksel_freq>
	} else {
		return rcc_apb1_frequency;
	}
}
 8000e4a:	bd10      	pop	{r4, pc}
	} else if (usart == USART2_BASE) {
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <rcc_get_usart_clk_freq+0x30>)
 8000e4e:	4298      	cmp	r0, r3
 8000e50:	d101      	bne.n	8000e56 <rcc_get_usart_clk_freq+0x1a>
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART2SW_SHIFT);
 8000e52:	2010      	movs	r0, #16
 8000e54:	e7f7      	b.n	8000e46 <rcc_get_usart_clk_freq+0xa>
	} else if (usart == USART3_BASE) {
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <rcc_get_usart_clk_freq+0x34>)
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	d101      	bne.n	8000e60 <rcc_get_usart_clk_freq+0x24>
		return rcc_get_usart_clksel_freq(RCC_CFGR3_USART3SW_SHIFT);
 8000e5c:	2012      	movs	r0, #18
 8000e5e:	e7f2      	b.n	8000e46 <rcc_get_usart_clk_freq+0xa>
		return rcc_apb1_frequency;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <rcc_get_usart_clk_freq+0x38>)
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	e7f1      	b.n	8000e4a <rcc_get_usart_clk_freq+0xe>
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40004400 	.word	0x40004400
 8000e70:	40004800 	.word	0x40004800
 8000e74:	20000024 	.word	0x20000024

08000e78 <rcc_get_timer_clk_freq>:
/** @brief Get the peripheral clock speed for the Timer at base specified.
 * @param timer  Base address of TIM to get clock frequency for.
 */
uint32_t rcc_get_timer_clk_freq(uint32_t timer __attribute__((unused)))
{
	uint8_t ppre = (RCC_CFGR >> RCC_CFGR_PPRE_SHIFT) & RCC_CFGR_PPRE_MASK;
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <rcc_get_timer_clk_freq+0x14>)
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <rcc_get_timer_clk_freq+0x18>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
	return (ppre == RCC_CFGR_PPRE_NODIV) 	? rcc_apb1_frequency
 8000e7e:	6810      	ldr	r0, [r2, #0]
	uint8_t ppre = (RCC_CFGR >> RCC_CFGR_PPRE_SHIFT) & RCC_CFGR_PPRE_MASK;
 8000e80:	055b      	lsls	r3, r3, #21
						: 2 * rcc_apb1_frequency;
 8000e82:	0f5b      	lsrs	r3, r3, #29
 8000e84:	d000      	beq.n	8000e88 <rcc_get_timer_clk_freq+0x10>
 8000e86:	0040      	lsls	r0, r0, #1
}
 8000e88:	4770      	bx	lr
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021004 	.word	0x40021004
 8000e90:	20000024 	.word	0x20000024

08000e94 <rcc_get_i2c_clk_freq>:
/** @brief Get the peripheral clock speed for the I2C device at base specified.
 * @param i2c  Base address of I2C to get clock frequency for.
 */
uint32_t rcc_get_i2c_clk_freq(uint32_t i2c)
{
	if (i2c == I2C1_BASE) {
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <rcc_get_i2c_clk_freq+0x30>)
{
 8000e96:	b510      	push	{r4, lr}
	if (i2c == I2C1_BASE) {
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	d10d      	bne.n	8000eb8 <rcc_get_i2c_clk_freq+0x24>
		if (RCC_CFGR3 & RCC_CFGR3_I2C1SW) {
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <rcc_get_i2c_clk_freq+0x34>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	06db      	lsls	r3, r3, #27
 8000ea2:	d50c      	bpl.n	8000ebe <rcc_get_i2c_clk_freq+0x2a>
			uint8_t hpre = (RCC_CFGR >> RCC_CFGR_HPRE_SHIFT) & RCC_CFGR_HPRE_MASK;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <rcc_get_i2c_clk_freq+0x38>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	0600      	lsls	r0, r0, #24
			return rcc_ahb_frequency * rcc_get_div_from_hpre(hpre);
 8000eaa:	0f00      	lsrs	r0, r0, #28
 8000eac:	f7ff fb84 	bl	80005b8 <rcc_get_div_from_hpre>
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <rcc_get_i2c_clk_freq+0x3c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4358      	muls	r0, r3
			return 8000000U;
		}
	} else {
		return rcc_apb1_frequency;
	}
}
 8000eb6:	bd10      	pop	{r4, pc}
		return rcc_apb1_frequency;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <rcc_get_i2c_clk_freq+0x40>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	e7fb      	b.n	8000eb6 <rcc_get_i2c_clk_freq+0x22>
			return 8000000U;
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <rcc_get_i2c_clk_freq+0x44>)
 8000ec0:	e7f9      	b.n	8000eb6 <rcc_get_i2c_clk_freq+0x22>
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40021030 	.word	0x40021030
 8000ecc:	40021004 	.word	0x40021004
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	20000024 	.word	0x20000024
 8000ed8:	007a1200 	.word	0x007a1200

08000edc <rcc_get_spi_clk_freq>:
/*---------------------------------------------------------------------------*/
/** @brief Get the peripheral clock speed for the SPI device at base specified.
 * @param spi  Base address of SPI device to get clock frequency for (e.g. SPI1_BASE).
 */
uint32_t rcc_get_spi_clk_freq(uint32_t spi __attribute__((unused))) {
	return rcc_apb1_frequency;
 8000edc:	4b01      	ldr	r3, [pc, #4]	; (8000ee4 <rcc_get_spi_clk_freq+0x8>)
 8000ede:	6818      	ldr	r0, [r3, #0]
}
 8000ee0:	4770      	bx	lr
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20000024 	.word	0x20000024

08000ee8 <cm3_assert_failed>:

#include <libopencm3/cm3/assert.h>

void __attribute__((weak)) cm3_assert_failed(void)
{
	while (1);
 8000ee8:	e7fe      	b.n	8000ee8 <cm3_assert_failed>

08000eea <cm3_assert_failed_verbose>:
void __attribute__((weak)) cm3_assert_failed_verbose(
		const char *file __attribute__((unused)),
		int line __attribute__((unused)),
		const char *func __attribute__((unused)),
		const char *assert_expr __attribute__((unused)))
{
 8000eea:	b510      	push	{r4, lr}
	cm3_assert_failed();
 8000eec:	f7ff fffc 	bl	8000ee8 <cm3_assert_failed>

08000ef0 <flash_prefetch_enable>:

#include <libopencm3/stm32/flash.h>

void flash_prefetch_enable(void)
{
	FLASH_ACR |= FLASH_ACR_PRFTEN;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	4a02      	ldr	r2, [pc, #8]	; (8000efc <flash_prefetch_enable+0xc>)
 8000ef4:	6811      	ldr	r1, [r2, #0]
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	4770      	bx	lr
 8000efc:	40022000 	.word	0x40022000

08000f00 <flash_prefetch_disable>:

void flash_prefetch_disable(void)
{
	FLASH_ACR &= ~FLASH_ACR_PRFTEN;
 8000f00:	2110      	movs	r1, #16
 8000f02:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <flash_prefetch_disable+0xc>)
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	438b      	bics	r3, r1
 8000f08:	6013      	str	r3, [r2, #0]
}
 8000f0a:	4770      	bx	lr
 8000f0c:	40022000 	.word	0x40022000

08000f10 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000f10:	2107      	movs	r1, #7
	reg32 = FLASH_ACR;
 8000f12:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <flash_set_ws+0x10>)
 8000f14:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000f16:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8000f18:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	4770      	bx	lr
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40022000 	.word	0x40022000

08000f24 <flash_unlock_option_bytes>:

void flash_unlock_option_bytes(void)
{
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY1;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <flash_unlock_option_bytes+0xc>)
 8000f26:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <flash_unlock_option_bytes+0x10>)
 8000f28:	601a      	str	r2, [r3, #0]
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY2;
 8000f2a:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <flash_unlock_option_bytes+0x14>)
 8000f2c:	601a      	str	r2, [r3, #0]
}
 8000f2e:	4770      	bx	lr
 8000f30:	40022008 	.word	0x40022008
 8000f34:	45670123 	.word	0x45670123
 8000f38:	cdef89ab 	.word	0xcdef89ab

08000f3c <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	46ce      	mov	lr, r9
 8000f40:	4647      	mov	r7, r8
 8000f42:	000c      	movs	r4, r1
 8000f44:	0003      	movs	r3, r0
 8000f46:	b580      	push	{r7, lr}
 8000f48:	3410      	adds	r4, #16
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000f4a:	780a      	ldrb	r2, [r1, #0]
 8000f4c:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000f4e:	784a      	ldrb	r2, [r1, #1]
 8000f50:	705a      	strb	r2, [r3, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000f52:	788a      	ldrb	r2, [r1, #2]
 8000f54:	709a      	strb	r2, [r3, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000f56:	78ca      	ldrb	r2, [r1, #3]
 8000f58:	3104      	adds	r1, #4
 8000f5a:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < Nk; ++i)
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	42a1      	cmp	r1, r4
 8000f60:	d1f3      	bne.n	8000f4a <KeyExpansion+0xe>
      tempa[2]=RoundKey[k + 2];
      tempa[3]=RoundKey[k + 3];

    }

    if (i % Nk == 0)
 8000f62:	2303      	movs	r3, #3
 8000f64:	4699      	mov	r9, r3
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <KeyExpansion+0x7c>)
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000f68:	2504      	movs	r5, #4
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f6a:	469c      	mov	ip, r3
        tempa[0] = getSBoxValue(tempa[0]);
 8000f6c:	4e13      	ldr	r6, [pc, #76]	; (8000fbc <KeyExpansion+0x80>)
    if (i % Nk == 0)
 8000f6e:	464f      	mov	r7, r9
      tempa[0]=RoundKey[k + 0];
 8000f70:	7b03      	ldrb	r3, [r0, #12]
      tempa[1]=RoundKey[k + 1];
 8000f72:	7b44      	ldrb	r4, [r0, #13]
      tempa[2]=RoundKey[k + 2];
 8000f74:	7b81      	ldrb	r1, [r0, #14]
      tempa[3]=RoundKey[k + 3];
 8000f76:	7bc2      	ldrb	r2, [r0, #15]
    if (i % Nk == 0)
 8000f78:	422f      	tst	r7, r5
 8000f7a:	d109      	bne.n	8000f90 <KeyExpansion+0x54>
        tempa[0] = getSBoxValue(tempa[0]);
 8000f7c:	5d34      	ldrb	r4, [r6, r4]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f7e:	4667      	mov	r7, ip
        tempa[0] = getSBoxValue(tempa[0]);
 8000f80:	46a0      	mov	r8, r4
        tempa[1] = getSBoxValue(tempa[1]);
 8000f82:	5c74      	ldrb	r4, [r6, r1]
        tempa[2] = getSBoxValue(tempa[2]);
 8000f84:	5cb1      	ldrb	r1, [r6, r2]
        tempa[3] = getSBoxValue(tempa[3]);
 8000f86:	5cf2      	ldrb	r2, [r6, r3]
      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000f88:	08ab      	lsrs	r3, r5, #2
 8000f8a:	5cfb      	ldrb	r3, [r7, r3]
 8000f8c:	4647      	mov	r7, r8
 8000f8e:	407b      	eors	r3, r7
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000f90:	7807      	ldrb	r7, [r0, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000f92:	3501      	adds	r5, #1
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000f94:	407b      	eors	r3, r7
 8000f96:	7403      	strb	r3, [r0, #16]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000f98:	7843      	ldrb	r3, [r0, #1]
 8000f9a:	405c      	eors	r4, r3
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000f9c:	7883      	ldrb	r3, [r0, #2]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000f9e:	7444      	strb	r4, [r0, #17]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000fa0:	4059      	eors	r1, r3
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000fa2:	78c3      	ldrb	r3, [r0, #3]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000fa4:	7481      	strb	r1, [r0, #18]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000fa6:	405a      	eors	r2, r3
 8000fa8:	74c2      	strb	r2, [r0, #19]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000faa:	3004      	adds	r0, #4
 8000fac:	2d2c      	cmp	r5, #44	; 0x2c
 8000fae:	d1de      	bne.n	8000f6e <KeyExpansion+0x32>
  }
}
 8000fb0:	bc0c      	pop	{r2, r3}
 8000fb2:	4690      	mov	r8, r2
 8000fb4:	4699      	mov	r9, r3
 8000fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb8:	080019ac 	.word	0x080019ac
 8000fbc:	08001ab8 	.word	0x08001ab8

08000fc0 <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	4645      	mov	r5, r8
 8000fc4:	46de      	mov	lr, fp
 8000fc6:	4657      	mov	r7, sl
 8000fc8:	464e      	mov	r6, r9
 8000fca:	b5e0      	push	{r5, r6, r7, lr}
 8000fcc:	000d      	movs	r5, r1
 8000fce:	000c      	movs	r4, r1
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	9104      	str	r1, [sp, #16]
 8000fd6:	9005      	str	r0, [sp, #20]
 8000fd8:	3510      	adds	r5, #16
 8000fda:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8000fdc:	5cd1      	ldrb	r1, [r2, r3]
 8000fde:	5ce6      	ldrb	r6, [r4, r3]
 8000fe0:	4071      	eors	r1, r6
 8000fe2:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d1f8      	bne.n	8000fdc <Cipher+0x1c>
  for (i = 0; i < 4; ++i)
 8000fea:	3404      	adds	r4, #4
 8000fec:	3204      	adds	r2, #4
 8000fee:	42a5      	cmp	r5, r4
 8000ff0:	d1f3      	bne.n	8000fda <Cipher+0x1a>
 8000ff2:	469c      	mov	ip, r3
 8000ff4:	330c      	adds	r3, #12
 8000ff6:	1a1b      	subs	r3, r3, r0
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	23a0      	movs	r3, #160	; 0xa0
 8000ffc:	1a1b      	subs	r3, r3, r0
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	2310      	movs	r3, #16
 8001002:	4698      	mov	r8, r3
 8001004:	3304      	adds	r3, #4
 8001006:	4699      	mov	r9, r3
 8001008:	4f57      	ldr	r7, [pc, #348]	; (8001168 <Cipher+0x1a8>)
 800100a:	4480      	add	r8, r0
 800100c:	4481      	add	r9, r0
{
 800100e:	4642      	mov	r2, r8
 8001010:	464c      	mov	r4, r9
    for (j = 0; j < 4; ++j)
 8001012:	0013      	movs	r3, r2
 8001014:	3b10      	subs	r3, #16
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8001016:	7819      	ldrb	r1, [r3, #0]
 8001018:	5c79      	ldrb	r1, [r7, r1]
 800101a:	7019      	strb	r1, [r3, #0]
    for (j = 0; j < 4; ++j)
 800101c:	3304      	adds	r3, #4
 800101e:	429a      	cmp	r2, r3
 8001020:	d1f9      	bne.n	8001016 <Cipher+0x56>
  for (i = 0; i < 4; ++i)
 8001022:	3201      	adds	r2, #1
 8001024:	4294      	cmp	r4, r2
 8001026:	d1f4      	bne.n	8001012 <Cipher+0x52>
  temp           = (*state)[0][1];
 8001028:	7843      	ldrb	r3, [r0, #1]
  (*state)[1][1] = (*state)[2][1];
 800102a:	7a42      	ldrb	r2, [r0, #9]
  (*state)[1][2] = (*state)[3][2];
 800102c:	7b81      	ldrb	r1, [r0, #14]
 800102e:	46a1      	mov	r9, r4
  (*state)[0][1] = (*state)[1][1];
 8001030:	7944      	ldrb	r4, [r0, #5]
  (*state)[1][1] = (*state)[2][1];
 8001032:	7142      	strb	r2, [r0, #5]
  (*state)[2][1] = (*state)[3][1];
 8001034:	7b42      	ldrb	r2, [r0, #13]
  (*state)[3][1] = temp;
 8001036:	7343      	strb	r3, [r0, #13]
  temp           = (*state)[0][2];
 8001038:	7883      	ldrb	r3, [r0, #2]
  (*state)[2][1] = (*state)[3][1];
 800103a:	7242      	strb	r2, [r0, #9]
  (*state)[0][2] = (*state)[2][2];
 800103c:	7a82      	ldrb	r2, [r0, #10]
  (*state)[2][2] = temp;
 800103e:	7283      	strb	r3, [r0, #10]
  temp           = (*state)[1][2];
 8001040:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
 8001042:	7181      	strb	r1, [r0, #6]
  (*state)[3][3] = (*state)[2][3];
 8001044:	7ac1      	ldrb	r1, [r0, #11]
  (*state)[3][2] = temp;
 8001046:	7383      	strb	r3, [r0, #14]
  (*state)[0][3] = (*state)[3][3];
 8001048:	7bc5      	ldrb	r5, [r0, #15]
  temp           = (*state)[0][3];
 800104a:	78c3      	ldrb	r3, [r0, #3]
  (*state)[3][3] = (*state)[2][3];
 800104c:	73c1      	strb	r1, [r0, #15]
  (*state)[2][3] = (*state)[1][3];
 800104e:	79c1      	ldrb	r1, [r0, #7]
  (*state)[0][1] = (*state)[1][1];
 8001050:	7044      	strb	r4, [r0, #1]
  (*state)[0][2] = (*state)[2][2];
 8001052:	7082      	strb	r2, [r0, #2]
  (*state)[0][3] = (*state)[3][3];
 8001054:	70c5      	strb	r5, [r0, #3]
  (*state)[2][3] = (*state)[1][3];
 8001056:	72c1      	strb	r1, [r0, #11]
  (*state)[1][3] = temp;
 8001058:	71c3      	strb	r3, [r0, #7]
  // Last one without MixColumns()
  for (round = 1; ; ++round)
  {
    SubBytes(state);
    ShiftRows(state);
    if (round == Nr) {
 800105a:	9b03      	ldr	r3, [sp, #12]
 800105c:	9901      	ldr	r1, [sp, #4]
 800105e:	428b      	cmp	r3, r1
 8001060:	d069      	beq.n	8001136 <Cipher+0x176>
 8001062:	4641      	mov	r1, r8
 8001064:	0003      	movs	r3, r0
 8001066:	9002      	str	r0, [sp, #8]
 8001068:	9100      	str	r1, [sp, #0]
    t   = (*state)[i][0];
 800106a:	7819      	ldrb	r1, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800106c:	406a      	eors	r2, r5
 800106e:	404c      	eors	r4, r1
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001070:	09e5      	lsrs	r5, r4, #7
 8001072:	0068      	lsls	r0, r5, #1
 8001074:	182d      	adds	r5, r5, r0
 8001076:	00e8      	lsls	r0, r5, #3
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8001078:	4062      	eors	r2, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800107a:	182d      	adds	r5, r5, r0
 800107c:	0064      	lsls	r4, r4, #1
 800107e:	4065      	eors	r5, r4
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8001080:	000c      	movs	r4, r1
 8001082:	4054      	eors	r4, r2
 8001084:	4065      	eors	r5, r4
 8001086:	701d      	strb	r5, [r3, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8001088:	785d      	ldrb	r5, [r3, #1]
 800108a:	7898      	ldrb	r0, [r3, #2]
 800108c:	002c      	movs	r4, r5
 800108e:	4044      	eors	r4, r0
 8001090:	46a2      	mov	sl, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001092:	09e4      	lsrs	r4, r4, #7
 8001094:	0066      	lsls	r6, r4, #1
 8001096:	46b3      	mov	fp, r6
 8001098:	445c      	add	r4, fp
 800109a:	00e6      	lsls	r6, r4, #3
 800109c:	46b3      	mov	fp, r6
 800109e:	4656      	mov	r6, sl
 80010a0:	445c      	add	r4, fp
 80010a2:	0076      	lsls	r6, r6, #1
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80010a4:	4055      	eors	r5, r2
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010a6:	4074      	eors	r4, r6
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80010a8:	406c      	eors	r4, r5
 80010aa:	705c      	strb	r4, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80010ac:	0004      	movs	r4, r0
 80010ae:	78dd      	ldrb	r5, [r3, #3]
 80010b0:	4050      	eors	r0, r2
 80010b2:	406c      	eors	r4, r5
 80010b4:	46a2      	mov	sl, r4
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010b6:	09e4      	lsrs	r4, r4, #7
 80010b8:	0066      	lsls	r6, r4, #1
 80010ba:	46b3      	mov	fp, r6
 80010bc:	445c      	add	r4, fp
 80010be:	00e6      	lsls	r6, r4, #3
 80010c0:	46b3      	mov	fp, r6
 80010c2:	4656      	mov	r6, sl
 80010c4:	445c      	add	r4, fp
 80010c6:	0076      	lsls	r6, r6, #1
 80010c8:	4074      	eors	r4, r6
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80010ca:	4044      	eors	r4, r0
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010cc:	4069      	eors	r1, r5
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80010ce:	709c      	strb	r4, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010d0:	000c      	movs	r4, r1
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010d2:	09c9      	lsrs	r1, r1, #7
 80010d4:	0048      	lsls	r0, r1, #1
 80010d6:	4680      	mov	r8, r0
 80010d8:	4441      	add	r1, r8
 80010da:	00c8      	lsls	r0, r1, #3
 80010dc:	4680      	mov	r8, r0
 80010de:	0064      	lsls	r4, r4, #1
 80010e0:	4441      	add	r1, r8
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010e2:	406a      	eors	r2, r5
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80010e4:	4061      	eors	r1, r4
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010e6:	4051      	eors	r1, r2
  for (i = 0; i < 4; ++i)
 80010e8:	9a00      	ldr	r2, [sp, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80010ea:	70d9      	strb	r1, [r3, #3]
  for (i = 0; i < 4; ++i)
 80010ec:	3304      	adds	r3, #4
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d003      	beq.n	80010fa <Cipher+0x13a>
 80010f2:	785c      	ldrb	r4, [r3, #1]
 80010f4:	789a      	ldrb	r2, [r3, #2]
 80010f6:	78dd      	ldrb	r5, [r3, #3]
 80010f8:	e7b7      	b.n	800106a <Cipher+0xaa>
 80010fa:	9b00      	ldr	r3, [sp, #0]
 80010fc:	9802      	ldr	r0, [sp, #8]
 80010fe:	4698      	mov	r8, r3
 8001100:	4663      	mov	r3, ip
 8001102:	009c      	lsls	r4, r3, #2
 8001104:	9b04      	ldr	r3, [sp, #16]
 8001106:	0001      	movs	r1, r0
 8001108:	469a      	mov	sl, r3
 800110a:	4646      	mov	r6, r8
 800110c:	4454      	add	r4, sl
    for (j = 0; j < 4; ++j)
 800110e:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8001110:	5cca      	ldrb	r2, [r1, r3]
 8001112:	5ce5      	ldrb	r5, [r4, r3]
 8001114:	406a      	eors	r2, r5
 8001116:	54ca      	strb	r2, [r1, r3]
    for (j = 0; j < 4; ++j)
 8001118:	3301      	adds	r3, #1
 800111a:	2b04      	cmp	r3, #4
 800111c:	d1f8      	bne.n	8001110 <Cipher+0x150>
  for (i = 0; i < 4; ++i)
 800111e:	3104      	adds	r1, #4
 8001120:	3404      	adds	r4, #4
 8001122:	428e      	cmp	r6, r1
 8001124:	d1f3      	bne.n	800110e <Cipher+0x14e>
 8001126:	2304      	movs	r3, #4
 8001128:	469a      	mov	sl, r3
 800112a:	9b01      	ldr	r3, [sp, #4]
 800112c:	46b0      	mov	r8, r6
  for (round = 1; ; ++round)
 800112e:	3310      	adds	r3, #16
 8001130:	44d4      	add	ip, sl
 8001132:	9301      	str	r3, [sp, #4]
    SubBytes(state);
 8001134:	e76b      	b.n	800100e <Cipher+0x4e>
    if (round == Nr) {
 8001136:	24a0      	movs	r4, #160	; 0xa0
 8001138:	9904      	ldr	r1, [sp, #16]
 800113a:	9805      	ldr	r0, [sp, #20]
 800113c:	31a0      	adds	r1, #160	; 0xa0
  for (i = 0; i < 4; ++i)
 800113e:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8001140:	5cc2      	ldrb	r2, [r0, r3]
 8001142:	5ccd      	ldrb	r5, [r1, r3]
 8001144:	406a      	eors	r2, r5
 8001146:	54c2      	strb	r2, [r0, r3]
    for (j = 0; j < 4; ++j)
 8001148:	3301      	adds	r3, #1
 800114a:	2b04      	cmp	r3, #4
 800114c:	d1f8      	bne.n	8001140 <Cipher+0x180>
  for (i = 0; i < 4; ++i)
 800114e:	3404      	adds	r4, #4
 8001150:	3004      	adds	r0, #4
 8001152:	3104      	adds	r1, #4
 8001154:	2cb0      	cmp	r4, #176	; 0xb0
 8001156:	d1f2      	bne.n	800113e <Cipher+0x17e>
    MixColumns(state);
    AddRoundKey(round, state, RoundKey);
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
}
 8001158:	b007      	add	sp, #28
 800115a:	bc3c      	pop	{r2, r3, r4, r5}
 800115c:	4690      	mov	r8, r2
 800115e:	4699      	mov	r9, r3
 8001160:	46a2      	mov	sl, r4
 8001162:	46ab      	mov	fp, r5
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	08001ab8 	.word	0x08001ab8

0800116c <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	464e      	mov	r6, r9
 8001170:	4645      	mov	r5, r8
 8001172:	46de      	mov	lr, fp
 8001174:	4657      	mov	r7, sl
 8001176:	b5e0      	push	{r5, r6, r7, lr}
 8001178:	000d      	movs	r5, r1
 800117a:	4681      	mov	r9, r0
 800117c:	26a0      	movs	r6, #160	; 0xa0
 800117e:	b08f      	sub	sp, #60	; 0x3c
 8001180:	35a0      	adds	r5, #160	; 0xa0
 8001182:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8001184:	5cc2      	ldrb	r2, [r0, r3]
 8001186:	5cec      	ldrb	r4, [r5, r3]
 8001188:	4062      	eors	r2, r4
 800118a:	54c2      	strb	r2, [r0, r3]
    for (j = 0; j < 4; ++j)
 800118c:	3301      	adds	r3, #1
 800118e:	2b04      	cmp	r3, #4
 8001190:	d1f8      	bne.n	8001184 <InvCipher+0x18>
  for (i = 0; i < 4; ++i)
 8001192:	3604      	adds	r6, #4
 8001194:	3004      	adds	r0, #4
 8001196:	3504      	adds	r5, #4
 8001198:	2eb0      	cmp	r6, #176	; 0xb0
 800119a:	d1f2      	bne.n	8001182 <InvCipher+0x16>
 800119c:	464a      	mov	r2, r9
 800119e:	338c      	adds	r3, #140	; 0x8c
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	9309      	str	r3, [sp, #36]	; 0x24
 80011a4:	4253      	negs	r3, r2
 80011a6:	930c      	str	r3, [sp, #48]	; 0x30
 80011a8:	2310      	movs	r3, #16
 80011aa:	444b      	add	r3, r9
 80011ac:	9308      	str	r3, [sp, #32]
 80011ae:	2314      	movs	r3, #20
 80011b0:	3190      	adds	r1, #144	; 0x90
 80011b2:	444b      	add	r3, r9
 80011b4:	910a      	str	r1, [sp, #40]	; 0x28
 80011b6:	930d      	str	r3, [sp, #52]	; 0x34
  (*state)[3][1] = (*state)[2][1];
 80011b8:	464a      	mov	r2, r9
 80011ba:	4649      	mov	r1, r9
  temp = (*state)[3][1];
 80011bc:	464b      	mov	r3, r9
  (*state)[3][1] = (*state)[2][1];
 80011be:	7a52      	ldrb	r2, [r2, #9]
  temp = (*state)[3][1];
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
  (*state)[3][1] = (*state)[2][1];
 80011c2:	734a      	strb	r2, [r1, #13]
  (*state)[2][1] = (*state)[1][1];
 80011c4:	794a      	ldrb	r2, [r1, #5]
 80011c6:	724a      	strb	r2, [r1, #9]
  (*state)[1][1] = (*state)[0][1];
 80011c8:	784a      	ldrb	r2, [r1, #1]
  (*state)[0][1] = temp;
 80011ca:	704b      	strb	r3, [r1, #1]
  (*state)[1][1] = (*state)[0][1];
 80011cc:	714a      	strb	r2, [r1, #5]
  (*state)[0][2] = (*state)[2][2];
 80011ce:	7a8a      	ldrb	r2, [r1, #10]
  temp = (*state)[0][2];
 80011d0:	788b      	ldrb	r3, [r1, #2]
  (*state)[0][2] = (*state)[2][2];
 80011d2:	708a      	strb	r2, [r1, #2]
  (*state)[1][2] = (*state)[3][2];
 80011d4:	7b8a      	ldrb	r2, [r1, #14]
  (*state)[2][2] = temp;
 80011d6:	728b      	strb	r3, [r1, #10]
  temp = (*state)[1][2];
 80011d8:	798b      	ldrb	r3, [r1, #6]
  (*state)[1][2] = (*state)[3][2];
 80011da:	718a      	strb	r2, [r1, #6]
  (*state)[0][3] = (*state)[1][3];
 80011dc:	79ca      	ldrb	r2, [r1, #7]
  (*state)[3][2] = temp;
 80011de:	738b      	strb	r3, [r1, #14]
  temp = (*state)[0][3];
 80011e0:	78cb      	ldrb	r3, [r1, #3]
  (*state)[0][3] = (*state)[1][3];
 80011e2:	70ca      	strb	r2, [r1, #3]
  (*state)[1][3] = (*state)[2][3];
 80011e4:	7aca      	ldrb	r2, [r1, #11]
 80011e6:	71ca      	strb	r2, [r1, #7]
  (*state)[2][3] = (*state)[3][3];
 80011e8:	7bca      	ldrb	r2, [r1, #15]
  (*state)[3][3] = temp;
 80011ea:	73cb      	strb	r3, [r1, #15]
  (*state)[2][3] = (*state)[3][3];
 80011ec:	72ca      	strb	r2, [r1, #11]
  (*state)[3][3] = temp;
 80011ee:	9a08      	ldr	r2, [sp, #32]
 80011f0:	980d      	ldr	r0, [sp, #52]	; 0x34
    for (j = 0; j < 4; ++j)
 80011f2:	0013      	movs	r3, r2
 80011f4:	3b10      	subs	r3, #16
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 80011f6:	7819      	ldrb	r1, [r3, #0]
 80011f8:	4c7a      	ldr	r4, [pc, #488]	; (80013e4 <InvCipher+0x278>)
 80011fa:	5c61      	ldrb	r1, [r4, r1]
 80011fc:	7019      	strb	r1, [r3, #0]
    for (j = 0; j < 4; ++j)
 80011fe:	3304      	adds	r3, #4
 8001200:	429a      	cmp	r2, r3
 8001202:	d1f8      	bne.n	80011f6 <InvCipher+0x8a>
  for (i = 0; i < 4; ++i)
 8001204:	3201      	adds	r2, #1
 8001206:	4290      	cmp	r0, r2
 8001208:	d1f3      	bne.n	80011f2 <InvCipher+0x86>
 800120a:	4649      	mov	r1, r9
 800120c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800120e:	9d08      	ldr	r5, [sp, #32]
  (*state)[3][3] = temp;
 8001210:	2300      	movs	r3, #0
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8001212:	5cca      	ldrb	r2, [r1, r3]
 8001214:	5ce0      	ldrb	r0, [r4, r3]
 8001216:	4042      	eors	r2, r0
 8001218:	54ca      	strb	r2, [r1, r3]
    for (j = 0; j < 4; ++j)
 800121a:	3301      	adds	r3, #1
 800121c:	2b04      	cmp	r3, #4
 800121e:	d1f8      	bne.n	8001212 <InvCipher+0xa6>
  for (i = 0; i < 4; ++i)
 8001220:	3104      	adds	r1, #4
 8001222:	3404      	adds	r4, #4
 8001224:	428d      	cmp	r5, r1
 8001226:	d1f3      	bne.n	8001210 <InvCipher+0xa4>
  for (round = (Nr - 1); ; --round)
  {
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(round, state, RoundKey);
    if (round == 0) {
 8001228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800122a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800122c:	4293      	cmp	r3, r2
 800122e:	d100      	bne.n	8001232 <InvCipher+0xc6>
 8001230:	e0d0      	b.n	80013d4 <InvCipher+0x268>
 8001232:	464b      	mov	r3, r9
 8001234:	46ca      	mov	sl, r9
 8001236:	930b      	str	r3, [sp, #44]	; 0x2c
    b = (*state)[i][1];
 8001238:	4652      	mov	r2, sl
    a = (*state)[i][0];
 800123a:	4653      	mov	r3, sl
    b = (*state)[i][1];
 800123c:	7850      	ldrb	r0, [r2, #1]
    c = (*state)[i][2];
 800123e:	7892      	ldrb	r2, [r2, #2]
    a = (*state)[i][0];
 8001240:	781b      	ldrb	r3, [r3, #0]
    c = (*state)[i][2];
 8001242:	4693      	mov	fp, r2
    d = (*state)[i][3];
 8001244:	4652      	mov	r2, sl
    a = (*state)[i][0];
 8001246:	0019      	movs	r1, r3
    d = (*state)[i][3];
 8001248:	78d2      	ldrb	r2, [r2, #3]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800124a:	09db      	lsrs	r3, r3, #7
    d = (*state)[i][3];
 800124c:	4691      	mov	r9, r2
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800124e:	005a      	lsls	r2, r3, #1
 8001250:	189b      	adds	r3, r3, r2
 8001252:	00da      	lsls	r2, r3, #3
 8001254:	189b      	adds	r3, r3, r2
 8001256:	004a      	lsls	r2, r1, #1
 8001258:	4053      	eors	r3, r2
 800125a:	b2dc      	uxtb	r4, r3
 800125c:	09e3      	lsrs	r3, r4, #7
 800125e:	005a      	lsls	r2, r3, #1
 8001260:	189b      	adds	r3, r3, r2
 8001262:	00da      	lsls	r2, r3, #3
 8001264:	189b      	adds	r3, r3, r2
 8001266:	0062      	lsls	r2, r4, #1
 8001268:	4053      	eors	r3, r2
 800126a:	b2dd      	uxtb	r5, r3
 800126c:	09eb      	lsrs	r3, r5, #7
 800126e:	005a      	lsls	r2, r3, #1
 8001270:	189b      	adds	r3, r3, r2
 8001272:	00df      	lsls	r7, r3, #3
 8001274:	19db      	adds	r3, r3, r7
 8001276:	006f      	lsls	r7, r5, #1
 8001278:	407b      	eors	r3, r7
 800127a:	b2de      	uxtb	r6, r3
 800127c:	09c3      	lsrs	r3, r0, #7
 800127e:	005a      	lsls	r2, r3, #1
 8001280:	189b      	adds	r3, r3, r2
 8001282:	00da      	lsls	r2, r3, #3
 8001284:	189b      	adds	r3, r3, r2
 8001286:	0042      	lsls	r2, r0, #1
 8001288:	4053      	eors	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	9004      	str	r0, [sp, #16]
 800128e:	09d8      	lsrs	r0, r3, #7
 8001290:	0042      	lsls	r2, r0, #1
 8001292:	1880      	adds	r0, r0, r2
 8001294:	00c2      	lsls	r2, r0, #3
 8001296:	1880      	adds	r0, r0, r2
 8001298:	005a      	lsls	r2, r3, #1
 800129a:	4050      	eors	r0, r2
 800129c:	b2c0      	uxtb	r0, r0
 800129e:	9602      	str	r6, [sp, #8]
 80012a0:	09c6      	lsrs	r6, r0, #7
 80012a2:	0077      	lsls	r7, r6, #1
 80012a4:	19f6      	adds	r6, r6, r7
 80012a6:	00f7      	lsls	r7, r6, #3
 80012a8:	19f7      	adds	r7, r6, r7
 80012aa:	0046      	lsls	r6, r0, #1
 80012ac:	4077      	eors	r7, r6
 80012ae:	465e      	mov	r6, fp
 80012b0:	09f2      	lsrs	r2, r6, #7
 80012b2:	9405      	str	r4, [sp, #20]
 80012b4:	0054      	lsls	r4, r2, #1
 80012b6:	1912      	adds	r2, r2, r4
 80012b8:	00d4      	lsls	r4, r2, #3
 80012ba:	1914      	adds	r4, r2, r4
 80012bc:	0072      	lsls	r2, r6, #1
 80012be:	4054      	eors	r4, r2
 80012c0:	b2e4      	uxtb	r4, r4
 80012c2:	9103      	str	r1, [sp, #12]
 80012c4:	09e1      	lsrs	r1, r4, #7
 80012c6:	004a      	lsls	r2, r1, #1
 80012c8:	1889      	adds	r1, r1, r2
 80012ca:	00ca      	lsls	r2, r1, #3
 80012cc:	188a      	adds	r2, r1, r2
 80012ce:	0061      	lsls	r1, r4, #1
 80012d0:	404a      	eors	r2, r1
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	9507      	str	r5, [sp, #28]
 80012d6:	09d5      	lsrs	r5, r2, #7
 80012d8:	006e      	lsls	r6, r5, #1
 80012da:	19ad      	adds	r5, r5, r6
 80012dc:	00ee      	lsls	r6, r5, #3
 80012de:	9206      	str	r2, [sp, #24]
 80012e0:	19ae      	adds	r6, r5, r6
 80012e2:	0055      	lsls	r5, r2, #1
 80012e4:	464a      	mov	r2, r9
 80012e6:	406e      	eors	r6, r5
 80012e8:	09d5      	lsrs	r5, r2, #7
 80012ea:	0069      	lsls	r1, r5, #1
 80012ec:	186d      	adds	r5, r5, r1
 80012ee:	00e9      	lsls	r1, r5, #3
 80012f0:	1869      	adds	r1, r5, r1
 80012f2:	0055      	lsls	r5, r2, #1
 80012f4:	4069      	eors	r1, r5
 80012f6:	b2ca      	uxtb	r2, r1
 80012f8:	09d5      	lsrs	r5, r2, #7
 80012fa:	0069      	lsls	r1, r5, #1
 80012fc:	186d      	adds	r5, r5, r1
 80012fe:	00e9      	lsls	r1, r5, #3
 8001300:	1869      	adds	r1, r5, r1
 8001302:	0055      	lsls	r5, r2, #1
 8001304:	4069      	eors	r1, r5
 8001306:	4690      	mov	r8, r2
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	09d1      	lsrs	r1, r2, #7
 800130c:	004d      	lsls	r5, r1, #1
 800130e:	1949      	adds	r1, r1, r5
 8001310:	00cd      	lsls	r5, r1, #3
 8001312:	4694      	mov	ip, r2
 8001314:	194d      	adds	r5, r1, r5
 8001316:	0051      	lsls	r1, r2, #1
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8001318:	465a      	mov	r2, fp
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800131a:	404d      	eors	r5, r1
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800131c:	9904      	ldr	r1, [sp, #16]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800131e:	b2ed      	uxtb	r5, r5
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8001320:	4051      	eors	r1, r2
 8001322:	464a      	mov	r2, r9
 8001324:	4051      	eors	r1, r2
 8001326:	9a05      	ldr	r2, [sp, #20]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001328:	9501      	str	r5, [sp, #4]
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800132a:	4051      	eors	r1, r2
 800132c:	9a07      	ldr	r2, [sp, #28]
 800132e:	9d06      	ldr	r5, [sp, #24]
 8001330:	4059      	eors	r1, r3
 8001332:	4051      	eors	r1, r2
 8001334:	4069      	eors	r1, r5
 8001336:	9d02      	ldr	r5, [sp, #8]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001338:	b2ff      	uxtb	r7, r7
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800133a:	4069      	eors	r1, r5
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800133c:	b2f6      	uxtb	r6, r6
    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800133e:	9d01      	ldr	r5, [sp, #4]
 8001340:	4079      	eors	r1, r7
 8001342:	4071      	eors	r1, r6
 8001344:	4069      	eors	r1, r5
 8001346:	4655      	mov	r5, sl
 8001348:	7029      	strb	r1, [r5, #0]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800134a:	465d      	mov	r5, fp
 800134c:	9903      	ldr	r1, [sp, #12]
 800134e:	4069      	eors	r1, r5
 8001350:	464d      	mov	r5, r9
 8001352:	4069      	eors	r1, r5
 8001354:	4665      	mov	r5, ip
 8001356:	404b      	eors	r3, r1
 8001358:	4063      	eors	r3, r4
 800135a:	4043      	eors	r3, r0
 800135c:	406b      	eors	r3, r5
 800135e:	9d02      	ldr	r5, [sp, #8]
 8001360:	9904      	ldr	r1, [sp, #16]
 8001362:	406b      	eors	r3, r5
 8001364:	407b      	eors	r3, r7
 8001366:	9d01      	ldr	r5, [sp, #4]
 8001368:	4073      	eors	r3, r6
 800136a:	406b      	eors	r3, r5
 800136c:	4655      	mov	r5, sl
 800136e:	706b      	strb	r3, [r5, #1]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001370:	9b03      	ldr	r3, [sp, #12]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8001372:	9d01      	ldr	r5, [sp, #4]
 8001374:	404b      	eors	r3, r1
 8001376:	4649      	mov	r1, r9
 8001378:	4059      	eors	r1, r3
 800137a:	404c      	eors	r4, r1
 800137c:	4641      	mov	r1, r8
 800137e:	404c      	eors	r4, r1
 8001380:	4054      	eors	r4, r2
 8001382:	9a06      	ldr	r2, [sp, #24]
 8001384:	9902      	ldr	r1, [sp, #8]
 8001386:	4054      	eors	r4, r2
 8001388:	404c      	eors	r4, r1
 800138a:	407c      	eors	r4, r7
 800138c:	4074      	eors	r4, r6
 800138e:	406c      	eors	r4, r5
 8001390:	4655      	mov	r5, sl
 8001392:	70ac      	strb	r4, [r5, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8001394:	465d      	mov	r5, fp
 8001396:	9a05      	ldr	r2, [sp, #20]
 8001398:	406b      	eors	r3, r5
 800139a:	4053      	eors	r3, r2
 800139c:	4642      	mov	r2, r8
 800139e:	4053      	eors	r3, r2
 80013a0:	4058      	eors	r0, r3
 80013a2:	4663      	mov	r3, ip
 80013a4:	4058      	eors	r0, r3
 80013a6:	4653      	mov	r3, sl
 80013a8:	4048      	eors	r0, r1
 80013aa:	9d01      	ldr	r5, [sp, #4]
 80013ac:	4047      	eors	r7, r0
 80013ae:	407e      	eors	r6, r7
 80013b0:	4075      	eors	r5, r6
 80013b2:	70dd      	strb	r5, [r3, #3]
  for (i = 0; i < 4; ++i)
 80013b4:	2304      	movs	r3, #4
 80013b6:	469c      	mov	ip, r3
 80013b8:	9b08      	ldr	r3, [sp, #32]
 80013ba:	44e2      	add	sl, ip
 80013bc:	4553      	cmp	r3, sl
 80013be:	d000      	beq.n	80013c2 <InvCipher+0x256>
 80013c0:	e73a      	b.n	8001238 <InvCipher+0xcc>
 80013c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013c4:	4699      	mov	r9, r3
  for (round = (Nr - 1); ; --round)
 80013c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013c8:	3b10      	subs	r3, #16
 80013ca:	930a      	str	r3, [sp, #40]	; 0x28
 80013cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013ce:	3b10      	subs	r3, #16
 80013d0:	9309      	str	r3, [sp, #36]	; 0x24
    InvShiftRows(state);
 80013d2:	e6f1      	b.n	80011b8 <InvCipher+0x4c>
      break;
    }
    InvMixColumns(state);
  }

}
 80013d4:	b00f      	add	sp, #60	; 0x3c
 80013d6:	bc3c      	pop	{r2, r3, r4, r5}
 80013d8:	4690      	mov	r8, r2
 80013da:	4699      	mov	r9, r3
 80013dc:	46a2      	mov	sl, r4
 80013de:	46ab      	mov	fp, r5
 80013e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	080019b8 	.word	0x080019b8

080013e8 <AES_init_ctx>:
{
 80013e8:	b510      	push	{r4, lr}
  KeyExpansion(ctx->RoundKey, key);
 80013ea:	f7ff fda7 	bl	8000f3c <KeyExpansion>
}
 80013ee:	bd10      	pop	{r4, pc}

080013f0 <AES_init_ctx_iv>:
{
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	0004      	movs	r4, r0
 80013f4:	0015      	movs	r5, r2
  KeyExpansion(ctx->RoundKey, key);
 80013f6:	f7ff fda1 	bl	8000f3c <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 80013fa:	0020      	movs	r0, r4
 80013fc:	0029      	movs	r1, r5
 80013fe:	2210      	movs	r2, #16
 8001400:	30b0      	adds	r0, #176	; 0xb0
 8001402:	f000 f8a7 	bl	8001554 <memcpy>
}
 8001406:	bd70      	pop	{r4, r5, r6, pc}

08001408 <AES_ctx_set_iv>:
{
 8001408:	b510      	push	{r4, lr}
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 800140a:	2210      	movs	r2, #16
 800140c:	30b0      	adds	r0, #176	; 0xb0
 800140e:	f000 f8a1 	bl	8001554 <memcpy>
}
 8001412:	bd10      	pop	{r4, pc}

08001414 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8001414:	0003      	movs	r3, r0
 8001416:	b510      	push	{r4, lr}
 8001418:	0008      	movs	r0, r1
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 800141a:	0019      	movs	r1, r3
 800141c:	f7ff fdd0 	bl	8000fc0 <Cipher>
}
 8001420:	bd10      	pop	{r4, pc}
 8001422:	46c0      	nop			; (mov r8, r8)

08001424 <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8001424:	0003      	movs	r3, r0
 8001426:	b510      	push	{r4, lr}
 8001428:	0008      	movs	r0, r1
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 800142a:	0019      	movs	r1, r3
 800142c:	f7ff fe9e 	bl	800116c <InvCipher>
}
 8001430:	bd10      	pop	{r4, pc}
 8001432:	46c0      	nop			; (mov r8, r8)

08001434 <AES_CBC_encrypt_buffer>:
}

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
  size_t i;
  uint8_t *Iv = ctx->Iv;
 8001434:	23b0      	movs	r3, #176	; 0xb0
{
 8001436:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001438:	46d6      	mov	lr, sl
  uint8_t *Iv = ctx->Iv;
 800143a:	469a      	mov	sl, r3
{
 800143c:	464f      	mov	r7, r9
 800143e:	4646      	mov	r6, r8
  uint8_t *Iv = ctx->Iv;
 8001440:	4482      	add	sl, r0
{
 8001442:	b5c0      	push	{r6, r7, lr}
 8001444:	4689      	mov	r9, r1
 8001446:	0007      	movs	r7, r0
 8001448:	4690      	mov	r8, r2
  uint8_t *Iv = ctx->Iv;
 800144a:	4655      	mov	r5, sl
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800144c:	2a00      	cmp	r2, #0
 800144e:	d012      	beq.n	8001476 <AES_CBC_encrypt_buffer+0x42>
 8001450:	2600      	movs	r6, #0
 8001452:	464b      	mov	r3, r9
 8001454:	0029      	movs	r1, r5
 8001456:	199d      	adds	r5, r3, r6
 8001458:	2300      	movs	r3, #0
    buf[i] ^= Iv[i];
 800145a:	5cec      	ldrb	r4, [r5, r3]
 800145c:	5cca      	ldrb	r2, [r1, r3]
 800145e:	4054      	eors	r4, r2
 8001460:	54ec      	strb	r4, [r5, r3]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8001462:	3301      	adds	r3, #1
 8001464:	2b10      	cmp	r3, #16
 8001466:	d1f8      	bne.n	800145a <AES_CBC_encrypt_buffer+0x26>
  {
    XorWithIv(buf, Iv);
    Cipher((state_t*)buf, ctx->RoundKey);
 8001468:	0039      	movs	r1, r7
 800146a:	0028      	movs	r0, r5
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800146c:	3610      	adds	r6, #16
    Cipher((state_t*)buf, ctx->RoundKey);
 800146e:	f7ff fda7 	bl	8000fc0 <Cipher>
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001472:	45b0      	cmp	r8, r6
 8001474:	d8ed      	bhi.n	8001452 <AES_CBC_encrypt_buffer+0x1e>
    Iv = buf;
    buf += AES_BLOCKLEN;
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8001476:	0029      	movs	r1, r5
 8001478:	4650      	mov	r0, sl
 800147a:	2210      	movs	r2, #16
 800147c:	f000 f86a 	bl	8001554 <memcpy>
}
 8001480:	bc1c      	pop	{r2, r3, r4}
 8001482:	4690      	mov	r8, r2
 8001484:	4699      	mov	r9, r3
 8001486:	46a2      	mov	sl, r4
 8001488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)

0800148c <AES_CBC_decrypt_buffer>:

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	46ce      	mov	lr, r9
 8001490:	4647      	mov	r7, r8
 8001492:	b580      	push	{r7, lr}
 8001494:	4681      	mov	r9, r0
 8001496:	000d      	movs	r5, r1
 8001498:	4690      	mov	r8, r2
 800149a:	b085      	sub	sp, #20
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800149c:	2a00      	cmp	r2, #0
 800149e:	d01c      	beq.n	80014da <AES_CBC_decrypt_buffer+0x4e>
 80014a0:	0006      	movs	r6, r0
 80014a2:	2700      	movs	r7, #0
 80014a4:	36b0      	adds	r6, #176	; 0xb0
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 80014a6:	2210      	movs	r2, #16
 80014a8:	0029      	movs	r1, r5
 80014aa:	4668      	mov	r0, sp
 80014ac:	f000 f852 	bl	8001554 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 80014b0:	4649      	mov	r1, r9
 80014b2:	0028      	movs	r0, r5
 80014b4:	f7ff fe5a 	bl	800116c <InvCipher>
 80014b8:	2300      	movs	r3, #0
    buf[i] ^= Iv[i];
 80014ba:	5cf4      	ldrb	r4, [r6, r3]
 80014bc:	5cea      	ldrb	r2, [r5, r3]
 80014be:	4054      	eors	r4, r2
 80014c0:	54ec      	strb	r4, [r5, r3]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 80014c2:	3301      	adds	r3, #1
 80014c4:	2b10      	cmp	r3, #16
 80014c6:	d1f8      	bne.n	80014ba <AES_CBC_decrypt_buffer+0x2e>
    XorWithIv(buf, ctx->Iv);
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 80014c8:	2210      	movs	r2, #16
 80014ca:	4669      	mov	r1, sp
 80014cc:	0030      	movs	r0, r6
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80014ce:	3710      	adds	r7, #16
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 80014d0:	f000 f840 	bl	8001554 <memcpy>
    buf += AES_BLOCKLEN;
 80014d4:	3510      	adds	r5, #16
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80014d6:	45b8      	cmp	r8, r7
 80014d8:	d8e5      	bhi.n	80014a6 <AES_CBC_decrypt_buffer+0x1a>
  }

}
 80014da:	b005      	add	sp, #20
 80014dc:	bc0c      	pop	{r2, r3}
 80014de:	4690      	mov	r8, r2
 80014e0:	4699      	mov	r9, r3
 80014e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e4 <AES_CTR_xcrypt_buffer>:

#if defined(CTR) && (CTR == 1)

/* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 80014e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e6:	46c6      	mov	lr, r8
 80014e8:	b500      	push	{lr}
 80014ea:	0006      	movs	r6, r0
 80014ec:	b084      	sub	sp, #16
  uint8_t buffer[AES_BLOCKLEN];
  
  size_t i;
  int bi;
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d012      	beq.n	8001518 <AES_CTR_xcrypt_buffer+0x34>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
      {
	/* inc will overflow */
        if (ctx->Iv[bi] == 255)
	{
          ctx->Iv[bi] = 0;
 80014f2:	2300      	movs	r3, #0
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 80014f4:	0007      	movs	r7, r0
 80014f6:	000c      	movs	r4, r1
 80014f8:	188d      	adds	r5, r1, r2
          ctx->Iv[bi] = 0;
 80014fa:	4698      	mov	r8, r3
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 80014fc:	2110      	movs	r1, #16
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 80014fe:	37b0      	adds	r7, #176	; 0xb0
    if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
 8001500:	2910      	cmp	r1, #16
 8001502:	d00d      	beq.n	8001520 <AES_CTR_xcrypt_buffer+0x3c>
 8001504:	000a      	movs	r2, r1
 8001506:	3101      	adds	r1, #1
        break;   
      }
      bi = 0;
    }

    buf[i] = (buf[i] ^ buffer[bi]);
 8001508:	4668      	mov	r0, sp
 800150a:	7823      	ldrb	r3, [r4, #0]
 800150c:	5c82      	ldrb	r2, [r0, r2]
 800150e:	4053      	eors	r3, r2
 8001510:	7023      	strb	r3, [r4, #0]
  for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
 8001512:	3401      	adds	r4, #1
 8001514:	42ac      	cmp	r4, r5
 8001516:	d1f3      	bne.n	8001500 <AES_CTR_xcrypt_buffer+0x1c>
  }
}
 8001518:	b004      	add	sp, #16
 800151a:	bc04      	pop	{r2}
 800151c:	4690      	mov	r8, r2
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
 8001520:	2210      	movs	r2, #16
 8001522:	0039      	movs	r1, r7
 8001524:	4668      	mov	r0, sp
 8001526:	f000 f815 	bl	8001554 <memcpy>
      Cipher((state_t*)buffer,ctx->RoundKey);
 800152a:	0031      	movs	r1, r6
 800152c:	4668      	mov	r0, sp
 800152e:	f7ff fd47 	bl	8000fc0 <Cipher>
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 8001532:	230f      	movs	r3, #15
        if (ctx->Iv[bi] == 255)
 8001534:	5cfa      	ldrb	r2, [r7, r3]
 8001536:	2aff      	cmp	r2, #255	; 0xff
 8001538:	d006      	beq.n	8001548 <AES_CTR_xcrypt_buffer+0x64>
        ctx->Iv[bi] += 1;
 800153a:	18f3      	adds	r3, r6, r3
 800153c:	33b0      	adds	r3, #176	; 0xb0
 800153e:	3201      	adds	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
        break;   
 8001542:	2101      	movs	r1, #1
      bi = 0;
 8001544:	2200      	movs	r2, #0
        break;   
 8001546:	e7df      	b.n	8001508 <AES_CTR_xcrypt_buffer+0x24>
          ctx->Iv[bi] = 0;
 8001548:	4642      	mov	r2, r8
 800154a:	54fa      	strb	r2, [r7, r3]
      for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
 800154c:	3b01      	subs	r3, #1
 800154e:	d2f1      	bcs.n	8001534 <AES_CTR_xcrypt_buffer+0x50>
 8001550:	e7f7      	b.n	8001542 <AES_CTR_xcrypt_buffer+0x5e>
 8001552:	46c0      	nop			; (mov r8, r8)

08001554 <memcpy>:
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	46c6      	mov	lr, r8
 8001558:	b500      	push	{lr}
 800155a:	2a0f      	cmp	r2, #15
 800155c:	d943      	bls.n	80015e6 <memcpy+0x92>
 800155e:	000b      	movs	r3, r1
 8001560:	2603      	movs	r6, #3
 8001562:	4303      	orrs	r3, r0
 8001564:	401e      	ands	r6, r3
 8001566:	000c      	movs	r4, r1
 8001568:	0003      	movs	r3, r0
 800156a:	2e00      	cmp	r6, #0
 800156c:	d140      	bne.n	80015f0 <memcpy+0x9c>
 800156e:	0015      	movs	r5, r2
 8001570:	3d10      	subs	r5, #16
 8001572:	092d      	lsrs	r5, r5, #4
 8001574:	46ac      	mov	ip, r5
 8001576:	012d      	lsls	r5, r5, #4
 8001578:	46a8      	mov	r8, r5
 800157a:	4480      	add	r8, r0
 800157c:	e000      	b.n	8001580 <memcpy+0x2c>
 800157e:	003b      	movs	r3, r7
 8001580:	6867      	ldr	r7, [r4, #4]
 8001582:	6825      	ldr	r5, [r4, #0]
 8001584:	605f      	str	r7, [r3, #4]
 8001586:	68e7      	ldr	r7, [r4, #12]
 8001588:	601d      	str	r5, [r3, #0]
 800158a:	60df      	str	r7, [r3, #12]
 800158c:	001f      	movs	r7, r3
 800158e:	68a5      	ldr	r5, [r4, #8]
 8001590:	3710      	adds	r7, #16
 8001592:	609d      	str	r5, [r3, #8]
 8001594:	3410      	adds	r4, #16
 8001596:	4543      	cmp	r3, r8
 8001598:	d1f1      	bne.n	800157e <memcpy+0x2a>
 800159a:	4665      	mov	r5, ip
 800159c:	230f      	movs	r3, #15
 800159e:	240c      	movs	r4, #12
 80015a0:	3501      	adds	r5, #1
 80015a2:	012d      	lsls	r5, r5, #4
 80015a4:	1949      	adds	r1, r1, r5
 80015a6:	4013      	ands	r3, r2
 80015a8:	1945      	adds	r5, r0, r5
 80015aa:	4214      	tst	r4, r2
 80015ac:	d023      	beq.n	80015f6 <memcpy+0xa2>
 80015ae:	598c      	ldr	r4, [r1, r6]
 80015b0:	51ac      	str	r4, [r5, r6]
 80015b2:	3604      	adds	r6, #4
 80015b4:	1b9c      	subs	r4, r3, r6
 80015b6:	2c03      	cmp	r4, #3
 80015b8:	d8f9      	bhi.n	80015ae <memcpy+0x5a>
 80015ba:	2403      	movs	r4, #3
 80015bc:	3b04      	subs	r3, #4
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3301      	adds	r3, #1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4022      	ands	r2, r4
 80015c6:	18ed      	adds	r5, r5, r3
 80015c8:	18c9      	adds	r1, r1, r3
 80015ca:	1e56      	subs	r6, r2, #1
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	d007      	beq.n	80015e0 <memcpy+0x8c>
 80015d0:	2300      	movs	r3, #0
 80015d2:	e000      	b.n	80015d6 <memcpy+0x82>
 80015d4:	0023      	movs	r3, r4
 80015d6:	5cca      	ldrb	r2, [r1, r3]
 80015d8:	1c5c      	adds	r4, r3, #1
 80015da:	54ea      	strb	r2, [r5, r3]
 80015dc:	429e      	cmp	r6, r3
 80015de:	d1f9      	bne.n	80015d4 <memcpy+0x80>
 80015e0:	bc04      	pop	{r2}
 80015e2:	4690      	mov	r8, r2
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	0005      	movs	r5, r0
 80015e8:	1e56      	subs	r6, r2, #1
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d1f0      	bne.n	80015d0 <memcpy+0x7c>
 80015ee:	e7f7      	b.n	80015e0 <memcpy+0x8c>
 80015f0:	1e56      	subs	r6, r2, #1
 80015f2:	0005      	movs	r5, r0
 80015f4:	e7ec      	b.n	80015d0 <memcpy+0x7c>
 80015f6:	001a      	movs	r2, r3
 80015f8:	e7f6      	b.n	80015e8 <memcpy+0x94>
 80015fa:	46c0      	nop			; (mov r8, r8)

080015fc <__gnu_thumb1_case_uqi>:
 80015fc:	b402      	push	{r1}
 80015fe:	4671      	mov	r1, lr
 8001600:	0849      	lsrs	r1, r1, #1
 8001602:	0049      	lsls	r1, r1, #1
 8001604:	5c09      	ldrb	r1, [r1, r0]
 8001606:	0049      	lsls	r1, r1, #1
 8001608:	448e      	add	lr, r1
 800160a:	bc02      	pop	{r1}
 800160c:	4770      	bx	lr
 800160e:	46c0      	nop			; (mov r8, r8)

08001610 <__udivsi3>:
 8001610:	2200      	movs	r2, #0
 8001612:	0843      	lsrs	r3, r0, #1
 8001614:	428b      	cmp	r3, r1
 8001616:	d374      	bcc.n	8001702 <__udivsi3+0xf2>
 8001618:	0903      	lsrs	r3, r0, #4
 800161a:	428b      	cmp	r3, r1
 800161c:	d35f      	bcc.n	80016de <__udivsi3+0xce>
 800161e:	0a03      	lsrs	r3, r0, #8
 8001620:	428b      	cmp	r3, r1
 8001622:	d344      	bcc.n	80016ae <__udivsi3+0x9e>
 8001624:	0b03      	lsrs	r3, r0, #12
 8001626:	428b      	cmp	r3, r1
 8001628:	d328      	bcc.n	800167c <__udivsi3+0x6c>
 800162a:	0c03      	lsrs	r3, r0, #16
 800162c:	428b      	cmp	r3, r1
 800162e:	d30d      	bcc.n	800164c <__udivsi3+0x3c>
 8001630:	22ff      	movs	r2, #255	; 0xff
 8001632:	0209      	lsls	r1, r1, #8
 8001634:	ba12      	rev	r2, r2
 8001636:	0c03      	lsrs	r3, r0, #16
 8001638:	428b      	cmp	r3, r1
 800163a:	d302      	bcc.n	8001642 <__udivsi3+0x32>
 800163c:	1212      	asrs	r2, r2, #8
 800163e:	0209      	lsls	r1, r1, #8
 8001640:	d065      	beq.n	800170e <__udivsi3+0xfe>
 8001642:	0b03      	lsrs	r3, r0, #12
 8001644:	428b      	cmp	r3, r1
 8001646:	d319      	bcc.n	800167c <__udivsi3+0x6c>
 8001648:	e000      	b.n	800164c <__udivsi3+0x3c>
 800164a:	0a09      	lsrs	r1, r1, #8
 800164c:	0bc3      	lsrs	r3, r0, #15
 800164e:	428b      	cmp	r3, r1
 8001650:	d301      	bcc.n	8001656 <__udivsi3+0x46>
 8001652:	03cb      	lsls	r3, r1, #15
 8001654:	1ac0      	subs	r0, r0, r3
 8001656:	4152      	adcs	r2, r2
 8001658:	0b83      	lsrs	r3, r0, #14
 800165a:	428b      	cmp	r3, r1
 800165c:	d301      	bcc.n	8001662 <__udivsi3+0x52>
 800165e:	038b      	lsls	r3, r1, #14
 8001660:	1ac0      	subs	r0, r0, r3
 8001662:	4152      	adcs	r2, r2
 8001664:	0b43      	lsrs	r3, r0, #13
 8001666:	428b      	cmp	r3, r1
 8001668:	d301      	bcc.n	800166e <__udivsi3+0x5e>
 800166a:	034b      	lsls	r3, r1, #13
 800166c:	1ac0      	subs	r0, r0, r3
 800166e:	4152      	adcs	r2, r2
 8001670:	0b03      	lsrs	r3, r0, #12
 8001672:	428b      	cmp	r3, r1
 8001674:	d301      	bcc.n	800167a <__udivsi3+0x6a>
 8001676:	030b      	lsls	r3, r1, #12
 8001678:	1ac0      	subs	r0, r0, r3
 800167a:	4152      	adcs	r2, r2
 800167c:	0ac3      	lsrs	r3, r0, #11
 800167e:	428b      	cmp	r3, r1
 8001680:	d301      	bcc.n	8001686 <__udivsi3+0x76>
 8001682:	02cb      	lsls	r3, r1, #11
 8001684:	1ac0      	subs	r0, r0, r3
 8001686:	4152      	adcs	r2, r2
 8001688:	0a83      	lsrs	r3, r0, #10
 800168a:	428b      	cmp	r3, r1
 800168c:	d301      	bcc.n	8001692 <__udivsi3+0x82>
 800168e:	028b      	lsls	r3, r1, #10
 8001690:	1ac0      	subs	r0, r0, r3
 8001692:	4152      	adcs	r2, r2
 8001694:	0a43      	lsrs	r3, r0, #9
 8001696:	428b      	cmp	r3, r1
 8001698:	d301      	bcc.n	800169e <__udivsi3+0x8e>
 800169a:	024b      	lsls	r3, r1, #9
 800169c:	1ac0      	subs	r0, r0, r3
 800169e:	4152      	adcs	r2, r2
 80016a0:	0a03      	lsrs	r3, r0, #8
 80016a2:	428b      	cmp	r3, r1
 80016a4:	d301      	bcc.n	80016aa <__udivsi3+0x9a>
 80016a6:	020b      	lsls	r3, r1, #8
 80016a8:	1ac0      	subs	r0, r0, r3
 80016aa:	4152      	adcs	r2, r2
 80016ac:	d2cd      	bcs.n	800164a <__udivsi3+0x3a>
 80016ae:	09c3      	lsrs	r3, r0, #7
 80016b0:	428b      	cmp	r3, r1
 80016b2:	d301      	bcc.n	80016b8 <__udivsi3+0xa8>
 80016b4:	01cb      	lsls	r3, r1, #7
 80016b6:	1ac0      	subs	r0, r0, r3
 80016b8:	4152      	adcs	r2, r2
 80016ba:	0983      	lsrs	r3, r0, #6
 80016bc:	428b      	cmp	r3, r1
 80016be:	d301      	bcc.n	80016c4 <__udivsi3+0xb4>
 80016c0:	018b      	lsls	r3, r1, #6
 80016c2:	1ac0      	subs	r0, r0, r3
 80016c4:	4152      	adcs	r2, r2
 80016c6:	0943      	lsrs	r3, r0, #5
 80016c8:	428b      	cmp	r3, r1
 80016ca:	d301      	bcc.n	80016d0 <__udivsi3+0xc0>
 80016cc:	014b      	lsls	r3, r1, #5
 80016ce:	1ac0      	subs	r0, r0, r3
 80016d0:	4152      	adcs	r2, r2
 80016d2:	0903      	lsrs	r3, r0, #4
 80016d4:	428b      	cmp	r3, r1
 80016d6:	d301      	bcc.n	80016dc <__udivsi3+0xcc>
 80016d8:	010b      	lsls	r3, r1, #4
 80016da:	1ac0      	subs	r0, r0, r3
 80016dc:	4152      	adcs	r2, r2
 80016de:	08c3      	lsrs	r3, r0, #3
 80016e0:	428b      	cmp	r3, r1
 80016e2:	d301      	bcc.n	80016e8 <__udivsi3+0xd8>
 80016e4:	00cb      	lsls	r3, r1, #3
 80016e6:	1ac0      	subs	r0, r0, r3
 80016e8:	4152      	adcs	r2, r2
 80016ea:	0883      	lsrs	r3, r0, #2
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d301      	bcc.n	80016f4 <__udivsi3+0xe4>
 80016f0:	008b      	lsls	r3, r1, #2
 80016f2:	1ac0      	subs	r0, r0, r3
 80016f4:	4152      	adcs	r2, r2
 80016f6:	0843      	lsrs	r3, r0, #1
 80016f8:	428b      	cmp	r3, r1
 80016fa:	d301      	bcc.n	8001700 <__udivsi3+0xf0>
 80016fc:	004b      	lsls	r3, r1, #1
 80016fe:	1ac0      	subs	r0, r0, r3
 8001700:	4152      	adcs	r2, r2
 8001702:	1a41      	subs	r1, r0, r1
 8001704:	d200      	bcs.n	8001708 <__udivsi3+0xf8>
 8001706:	4601      	mov	r1, r0
 8001708:	4152      	adcs	r2, r2
 800170a:	4610      	mov	r0, r2
 800170c:	4770      	bx	lr
 800170e:	e7ff      	b.n	8001710 <__udivsi3+0x100>
 8001710:	b501      	push	{r0, lr}
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f806 	bl	8001724 <__aeabi_idiv0>
 8001718:	bd02      	pop	{r1, pc}
 800171a:	46c0      	nop			; (mov r8, r8)

0800171c <__aeabi_uidivmod>:
 800171c:	2900      	cmp	r1, #0
 800171e:	d0f7      	beq.n	8001710 <__udivsi3+0x100>
 8001720:	e776      	b.n	8001610 <__udivsi3>
 8001722:	4770      	bx	lr

08001724 <__aeabi_idiv0>:
 8001724:	4770      	bx	lr
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	74696e49 	.word	0x74696e49
 800172c:	696c6169 	.word	0x696c6169
 8001730:	000d6573 	.word	0x000d6573
 8001734:	74736554 	.word	0x74736554
 8001738:	53454120 	.word	0x53454120
 800173c:	2e2e2e2e 	.word	0x2e2e2e2e
 8001740:	0000002e 	.word	0x0000002e
 8001744:	6c696166 	.word	0x6c696166
 8001748:	000d6465 	.word	0x000d6465
 800174c:	63637573 	.word	0x63637573
 8001750:	0d737365 	.word	0x0d737365
 8001754:	00000000 	.word	0x00000000
 8001758:	72617453 	.word	0x72617453
 800175c:	78652074 	.word	0x78652074
 8001760:	69726570 	.word	0x69726570
 8001764:	746e656d 	.word	0x746e656d
 8001768:	0000000d 	.word	0x0000000d
 800176c:	65707845 	.word	0x65707845
 8001770:	656d6972 	.word	0x656d6972
 8001774:	6420746e 	.word	0x6420746e
 8001778:	0d656e6f 	.word	0x0d656e6f
	...
 8001840:	16157e2b 	.word	0x16157e2b
 8001844:	a6d2ae28 	.word	0xa6d2ae28
 8001848:	8815f7ab 	.word	0x8815f7ab
 800184c:	3c4fcf09 	.word	0x3c4fcf09
 8001850:	00000000 	.word	0x00000000
 8001854:	e2bec16b 	.word	0xe2bec16b
 8001858:	969f402e 	.word	0x969f402e
 800185c:	117e3de9 	.word	0x117e3de9
 8001860:	2a179373 	.word	0x2a179373
 8001864:	578a2dae 	.word	0x578a2dae
 8001868:	9cac031e 	.word	0x9cac031e
 800186c:	ac6fb79e 	.word	0xac6fb79e
 8001870:	518eaf45 	.word	0x518eaf45
 8001874:	461cc830 	.word	0x461cc830
 8001878:	11e45ca3 	.word	0x11e45ca3
 800187c:	19c1fbe5 	.word	0x19c1fbe5
 8001880:	ef520a1a 	.word	0xef520a1a
 8001884:	45249ff6 	.word	0x45249ff6
 8001888:	179b4fdf 	.word	0x179b4fdf
 800188c:	7b412bad 	.word	0x7b412bad
 8001890:	10376ce6 	.word	0x10376ce6
 8001894:	b47bd73a 	.word	0xb47bd73a
 8001898:	60367a0d 	.word	0x60367a0d
 800189c:	f3ca9ea8 	.word	0xf3ca9ea8
 80018a0:	97ef6624 	.word	0x97ef6624
 80018a4:	85d5d3f5 	.word	0x85d5d3f5
 80018a8:	9d69b903 	.word	0x9d69b903
 80018ac:	5a8985e7 	.word	0x5a8985e7
 80018b0:	afbafd96 	.word	0xafbafd96
 80018b4:	7fcdb143 	.word	0x7fcdb143
 80018b8:	23ce8e59 	.word	0x23ce8e59
 80018bc:	e3001b88 	.word	0xe3001b88
 80018c0:	880603ed 	.word	0x880603ed
 80018c4:	5e780c7b 	.word	0x5e780c7b
 80018c8:	3fade827 	.word	0x3fade827
 80018cc:	71202382 	.word	0x71202382
 80018d0:	d45d7204 	.word	0xd45d7204
	...
 8001994:	33323130 	.word	0x33323130
 8001998:	37363534 	.word	0x37363534
 800199c:	42413938 	.word	0x42413938
 80019a0:	46454443 	.word	0x46454443
 80019a4:	00000000 	.word	0x00000000
 80019a8:	00007830 	.word	0x00007830

080019ac <Rcon>:
 80019ac:	0402018d 40201008 00361b80              ...... @..6.

080019b8 <rsbox>:
 80019b8:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 80019c8:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 80019d8:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 80019e8:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 80019f8:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 8001a08:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 8001a18:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 8001a28:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 8001a38:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 8001a48:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 8001a58:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 8001a68:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 8001a78:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 8001a88:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 8001a98:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 8001aa8:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

08001ab8 <sbox>:
 8001ab8:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 8001ac8:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 8001ad8:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 8001ae8:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 8001af8:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 8001b08:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 8001b18:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 8001b28:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 8001b38:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 8001b48:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 8001b58:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 8001b68:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 8001b78:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 8001b88:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 8001b98:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 8001ba8:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..
